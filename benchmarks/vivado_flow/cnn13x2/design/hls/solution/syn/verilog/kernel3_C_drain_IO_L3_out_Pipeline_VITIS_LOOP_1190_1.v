// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

module kernel3_C_drain_IO_L3_out_Pipeline_VITIS_LOOP_1190_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fifo_C_drain_C_drain_IO_L2_out_0137_dout,
        fifo_C_drain_C_drain_IO_L2_out_0137_num_data_valid,
        fifo_C_drain_C_drain_IO_L2_out_0137_fifo_cap,
        fifo_C_drain_C_drain_IO_L2_out_0137_empty_n,
        fifo_C_drain_C_drain_IO_L2_out_0137_read,
        m_axi_gmem_C_AWVALID,
        m_axi_gmem_C_AWREADY,
        m_axi_gmem_C_AWADDR,
        m_axi_gmem_C_AWID,
        m_axi_gmem_C_AWLEN,
        m_axi_gmem_C_AWSIZE,
        m_axi_gmem_C_AWBURST,
        m_axi_gmem_C_AWLOCK,
        m_axi_gmem_C_AWCACHE,
        m_axi_gmem_C_AWPROT,
        m_axi_gmem_C_AWQOS,
        m_axi_gmem_C_AWREGION,
        m_axi_gmem_C_AWUSER,
        m_axi_gmem_C_WVALID,
        m_axi_gmem_C_WREADY,
        m_axi_gmem_C_WDATA,
        m_axi_gmem_C_WSTRB,
        m_axi_gmem_C_WLAST,
        m_axi_gmem_C_WID,
        m_axi_gmem_C_WUSER,
        m_axi_gmem_C_ARVALID,
        m_axi_gmem_C_ARREADY,
        m_axi_gmem_C_ARADDR,
        m_axi_gmem_C_ARID,
        m_axi_gmem_C_ARLEN,
        m_axi_gmem_C_ARSIZE,
        m_axi_gmem_C_ARBURST,
        m_axi_gmem_C_ARLOCK,
        m_axi_gmem_C_ARCACHE,
        m_axi_gmem_C_ARPROT,
        m_axi_gmem_C_ARQOS,
        m_axi_gmem_C_ARREGION,
        m_axi_gmem_C_ARUSER,
        m_axi_gmem_C_RVALID,
        m_axi_gmem_C_RREADY,
        m_axi_gmem_C_RDATA,
        m_axi_gmem_C_RLAST,
        m_axi_gmem_C_RID,
        m_axi_gmem_C_RFIFONUM,
        m_axi_gmem_C_RUSER,
        m_axi_gmem_C_RRESP,
        m_axi_gmem_C_BVALID,
        m_axi_gmem_C_BREADY,
        m_axi_gmem_C_BRESP,
        m_axi_gmem_C_BID,
        m_axi_gmem_C_BUSER,
        sext_ln1190
);

parameter    ap_ST_fsm_pp0_stage0 = 8'd1;
parameter    ap_ST_fsm_pp0_stage1 = 8'd2;
parameter    ap_ST_fsm_pp0_stage2 = 8'd4;
parameter    ap_ST_fsm_pp0_stage3 = 8'd8;
parameter    ap_ST_fsm_pp0_stage4 = 8'd16;
parameter    ap_ST_fsm_pp0_stage5 = 8'd32;
parameter    ap_ST_fsm_pp0_stage6 = 8'd64;
parameter    ap_ST_fsm_pp0_stage7 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] fifo_C_drain_C_drain_IO_L2_out_0137_dout;
input  [1:0] fifo_C_drain_C_drain_IO_L2_out_0137_num_data_valid;
input  [1:0] fifo_C_drain_C_drain_IO_L2_out_0137_fifo_cap;
input   fifo_C_drain_C_drain_IO_L2_out_0137_empty_n;
output   fifo_C_drain_C_drain_IO_L2_out_0137_read;
output   m_axi_gmem_C_AWVALID;
input   m_axi_gmem_C_AWREADY;
output  [63:0] m_axi_gmem_C_AWADDR;
output  [0:0] m_axi_gmem_C_AWID;
output  [31:0] m_axi_gmem_C_AWLEN;
output  [2:0] m_axi_gmem_C_AWSIZE;
output  [1:0] m_axi_gmem_C_AWBURST;
output  [1:0] m_axi_gmem_C_AWLOCK;
output  [3:0] m_axi_gmem_C_AWCACHE;
output  [2:0] m_axi_gmem_C_AWPROT;
output  [3:0] m_axi_gmem_C_AWQOS;
output  [3:0] m_axi_gmem_C_AWREGION;
output  [0:0] m_axi_gmem_C_AWUSER;
output   m_axi_gmem_C_WVALID;
input   m_axi_gmem_C_WREADY;
output  [511:0] m_axi_gmem_C_WDATA;
output  [63:0] m_axi_gmem_C_WSTRB;
output   m_axi_gmem_C_WLAST;
output  [0:0] m_axi_gmem_C_WID;
output  [0:0] m_axi_gmem_C_WUSER;
output   m_axi_gmem_C_ARVALID;
input   m_axi_gmem_C_ARREADY;
output  [63:0] m_axi_gmem_C_ARADDR;
output  [0:0] m_axi_gmem_C_ARID;
output  [31:0] m_axi_gmem_C_ARLEN;
output  [2:0] m_axi_gmem_C_ARSIZE;
output  [1:0] m_axi_gmem_C_ARBURST;
output  [1:0] m_axi_gmem_C_ARLOCK;
output  [3:0] m_axi_gmem_C_ARCACHE;
output  [2:0] m_axi_gmem_C_ARPROT;
output  [3:0] m_axi_gmem_C_ARQOS;
output  [3:0] m_axi_gmem_C_ARREGION;
output  [0:0] m_axi_gmem_C_ARUSER;
input   m_axi_gmem_C_RVALID;
output   m_axi_gmem_C_RREADY;
input  [511:0] m_axi_gmem_C_RDATA;
input   m_axi_gmem_C_RLAST;
input  [0:0] m_axi_gmem_C_RID;
input  [8:0] m_axi_gmem_C_RFIFONUM;
input  [0:0] m_axi_gmem_C_RUSER;
input  [1:0] m_axi_gmem_C_RRESP;
input   m_axi_gmem_C_BVALID;
output   m_axi_gmem_C_BREADY;
input  [1:0] m_axi_gmem_C_BRESP;
input  [0:0] m_axi_gmem_C_BID;
input  [0:0] m_axi_gmem_C_BUSER;
input  [57:0] sext_ln1190;

reg ap_idle;
reg fifo_C_drain_C_drain_IO_L2_out_0137_read;
reg m_axi_gmem_C_WVALID;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage7;
reg   [0:0] icmp_ln1027_reg_139;
reg    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_subdone;
reg    ap_condition_exit_pp0_iter0_stage7;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_C_blk_n_W;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln1027_reg_139_pp0_iter1_reg;
reg    fifo_C_drain_C_drain_IO_L2_out_0137_blk_n;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1027_fu_92_p2;
reg   [63:0] fifo_data_reg_143;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
reg    ap_block_state10_io;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] fifo_data_8_reg_148;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg   [63:0] fifo_data_9_reg_153;
reg    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg   [63:0] fifo_data_10_reg_158;
reg    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg   [63:0] fifo_data_11_reg_163;
reg    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg   [63:0] fifo_data_12_reg_168;
reg    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg   [63:0] fifo_data_13_reg_173;
reg    ap_block_pp0_stage7_11001;
reg   [63:0] fifo_data_14_reg_183;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage1_01001;
reg   [10:0] i_V_fu_56;
wire   [10:0] add_ln840_fu_98_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_i_V_1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_idle_pp0_0to0;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel3_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage7),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter1_stage0) | ((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1027_fu_92_p2 == 1'd0))) begin
            i_V_fu_56 <= add_ln840_fu_98_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_fu_56 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        fifo_data_10_reg_158 <= fifo_C_drain_C_drain_IO_L2_out_0137_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        fifo_data_11_reg_163 <= fifo_C_drain_C_drain_IO_L2_out_0137_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        fifo_data_12_reg_168 <= fifo_C_drain_C_drain_IO_L2_out_0137_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        fifo_data_13_reg_173 <= fifo_C_drain_C_drain_IO_L2_out_0137_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_data_14_reg_183 <= fifo_C_drain_C_drain_IO_L2_out_0137_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        fifo_data_8_reg_148 <= fifo_C_drain_C_drain_IO_L2_out_0137_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        fifo_data_9_reg_153 <= fifo_C_drain_C_drain_IO_L2_out_0137_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        fifo_data_reg_143 <= fifo_C_drain_C_drain_IO_L2_out_0137_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1027_reg_139 <= icmp_ln1027_fu_92_p2;
        icmp_ln1027_reg_139_pp0_iter1_reg <= icmp_ln1027_reg_139;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_subdone) & (icmp_ln1027_reg_139 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_condition_exit_pp0_iter0_stage7 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1027_reg_139 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_V_1 = 11'd0;
    end else begin
        ap_sig_allocacmp_i_V_1 = i_V_fu_56;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage7) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        fifo_C_drain_C_drain_IO_L2_out_0137_blk_n = fifo_C_drain_C_drain_IO_L2_out_0137_empty_n;
    end else begin
        fifo_C_drain_C_drain_IO_L2_out_0137_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_reg_139 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        fifo_C_drain_C_drain_IO_L2_out_0137_read = 1'b1;
    end else begin
        fifo_C_drain_C_drain_IO_L2_out_0137_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1027_reg_139_pp0_iter1_reg == 1'd0))) begin
        gmem_C_blk_n_W = m_axi_gmem_C_WREADY;
    end else begin
        gmem_C_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1027_reg_139_pp0_iter1_reg == 1'd0))) begin
        m_axi_gmem_C_WVALID = 1'b1;
    end else begin
        m_axi_gmem_C_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln840_fu_98_p2 = (ap_sig_allocacmp_i_V_1 + 11'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state10_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state10_io)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state10_io = ((m_axi_gmem_C_WREADY == 1'b0) & (icmp_ln1027_reg_139_pp0_iter1_reg == 1'd0));
end

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage4_iter0 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage5_iter0 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage6_iter0 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp0_stage7_iter0 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((icmp_ln1027_reg_139 == 1'd0) & (fifo_C_drain_C_drain_IO_L2_out_0137_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage7;

assign icmp_ln1027_fu_92_p2 = ((ap_sig_allocacmp_i_V_1 == 11'd1664) ? 1'b1 : 1'b0);

assign m_axi_gmem_C_ARADDR = 64'd0;

assign m_axi_gmem_C_ARBURST = 2'd0;

assign m_axi_gmem_C_ARCACHE = 4'd0;

assign m_axi_gmem_C_ARID = 1'd0;

assign m_axi_gmem_C_ARLEN = 32'd0;

assign m_axi_gmem_C_ARLOCK = 2'd0;

assign m_axi_gmem_C_ARPROT = 3'd0;

assign m_axi_gmem_C_ARQOS = 4'd0;

assign m_axi_gmem_C_ARREGION = 4'd0;

assign m_axi_gmem_C_ARSIZE = 3'd0;

assign m_axi_gmem_C_ARUSER = 1'd0;

assign m_axi_gmem_C_ARVALID = 1'b0;

assign m_axi_gmem_C_AWADDR = 64'd0;

assign m_axi_gmem_C_AWBURST = 2'd0;

assign m_axi_gmem_C_AWCACHE = 4'd0;

assign m_axi_gmem_C_AWID = 1'd0;

assign m_axi_gmem_C_AWLEN = 32'd0;

assign m_axi_gmem_C_AWLOCK = 2'd0;

assign m_axi_gmem_C_AWPROT = 3'd0;

assign m_axi_gmem_C_AWQOS = 4'd0;

assign m_axi_gmem_C_AWREGION = 4'd0;

assign m_axi_gmem_C_AWSIZE = 3'd0;

assign m_axi_gmem_C_AWUSER = 1'd0;

assign m_axi_gmem_C_AWVALID = 1'b0;

assign m_axi_gmem_C_BREADY = 1'b0;

assign m_axi_gmem_C_RREADY = 1'b0;

assign m_axi_gmem_C_WDATA = {{{{{{{{fifo_data_14_reg_183}, {fifo_data_13_reg_173}}, {fifo_data_12_reg_168}}, {fifo_data_11_reg_163}}, {fifo_data_10_reg_158}}, {fifo_data_9_reg_153}}, {fifo_data_8_reg_148}}, {fifo_data_reg_143}};

assign m_axi_gmem_C_WID = 1'd0;

assign m_axi_gmem_C_WLAST = 1'b0;

assign m_axi_gmem_C_WSTRB = 64'd18446744073709551615;

assign m_axi_gmem_C_WUSER = 1'd0;

endmodule //kernel3_C_drain_IO_L3_out_Pipeline_VITIS_LOOP_1190_1
