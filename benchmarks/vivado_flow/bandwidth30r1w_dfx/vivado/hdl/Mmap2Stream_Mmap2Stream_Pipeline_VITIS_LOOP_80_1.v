// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

module Mmap2Stream_Mmap2Stream_Pipeline_VITIS_LOOP_80_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mmap_AWVALID,
        m_axi_mmap_AWREADY,
        m_axi_mmap_AWADDR,
        m_axi_mmap_AWID,
        m_axi_mmap_AWLEN,
        m_axi_mmap_AWSIZE,
        m_axi_mmap_AWBURST,
        m_axi_mmap_AWLOCK,
        m_axi_mmap_AWCACHE,
        m_axi_mmap_AWPROT,
        m_axi_mmap_AWQOS,
        m_axi_mmap_AWREGION,
        m_axi_mmap_AWUSER,
        m_axi_mmap_WVALID,
        m_axi_mmap_WREADY,
        m_axi_mmap_WDATA,
        m_axi_mmap_WSTRB,
        m_axi_mmap_WLAST,
        m_axi_mmap_WID,
        m_axi_mmap_WUSER,
        m_axi_mmap_ARVALID,
        m_axi_mmap_ARREADY,
        m_axi_mmap_ARADDR,
        m_axi_mmap_ARID,
        m_axi_mmap_ARLEN,
        m_axi_mmap_ARSIZE,
        m_axi_mmap_ARBURST,
        m_axi_mmap_ARLOCK,
        m_axi_mmap_ARCACHE,
        m_axi_mmap_ARPROT,
        m_axi_mmap_ARQOS,
        m_axi_mmap_ARREGION,
        m_axi_mmap_ARUSER,
        m_axi_mmap_RVALID,
        m_axi_mmap_RREADY,
        m_axi_mmap_RDATA,
        m_axi_mmap_RLAST,
        m_axi_mmap_RID,
        m_axi_mmap_RFIFONUM,
        m_axi_mmap_RUSER,
        m_axi_mmap_RRESP,
        m_axi_mmap_BVALID,
        m_axi_mmap_BREADY,
        m_axi_mmap_BRESP,
        m_axi_mmap_BID,
        m_axi_mmap_BUSER,
        stream_din,
        stream_full_n,
        stream_write,
        sext_ln80,
        n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mmap_AWVALID;
input   m_axi_mmap_AWREADY;
output  [63:0] m_axi_mmap_AWADDR;
output  [0:0] m_axi_mmap_AWID;
output  [31:0] m_axi_mmap_AWLEN;
output  [2:0] m_axi_mmap_AWSIZE;
output  [1:0] m_axi_mmap_AWBURST;
output  [1:0] m_axi_mmap_AWLOCK;
output  [3:0] m_axi_mmap_AWCACHE;
output  [2:0] m_axi_mmap_AWPROT;
output  [3:0] m_axi_mmap_AWQOS;
output  [3:0] m_axi_mmap_AWREGION;
output  [0:0] m_axi_mmap_AWUSER;
output   m_axi_mmap_WVALID;
input   m_axi_mmap_WREADY;
output  [511:0] m_axi_mmap_WDATA;
output  [63:0] m_axi_mmap_WSTRB;
output   m_axi_mmap_WLAST;
output  [0:0] m_axi_mmap_WID;
output  [0:0] m_axi_mmap_WUSER;
output   m_axi_mmap_ARVALID;
input   m_axi_mmap_ARREADY;
output  [63:0] m_axi_mmap_ARADDR;
output  [0:0] m_axi_mmap_ARID;
output  [31:0] m_axi_mmap_ARLEN;
output  [2:0] m_axi_mmap_ARSIZE;
output  [1:0] m_axi_mmap_ARBURST;
output  [1:0] m_axi_mmap_ARLOCK;
output  [3:0] m_axi_mmap_ARCACHE;
output  [2:0] m_axi_mmap_ARPROT;
output  [3:0] m_axi_mmap_ARQOS;
output  [3:0] m_axi_mmap_ARREGION;
output  [0:0] m_axi_mmap_ARUSER;
input   m_axi_mmap_RVALID;
output   m_axi_mmap_RREADY;
input  [511:0] m_axi_mmap_RDATA;
input   m_axi_mmap_RLAST;
input  [0:0] m_axi_mmap_RID;
input  [8:0] m_axi_mmap_RFIFONUM;
input  [0:0] m_axi_mmap_RUSER;
input  [1:0] m_axi_mmap_RRESP;
input   m_axi_mmap_BVALID;
output   m_axi_mmap_BREADY;
input  [1:0] m_axi_mmap_BRESP;
input  [0:0] m_axi_mmap_BID;
input  [0:0] m_axi_mmap_BUSER;
output  [8:0] stream_din;
input   stream_full_n;
output   stream_write;
input  [57:0] sext_ln80;
input  [63:0] n;

reg ap_idle;
reg m_axi_mmap_RREADY;
reg stream_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln80_reg_1342;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln80_fu_346_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mmap_blk_n_R;
wire    ap_block_pp0_stage0;
reg    stream_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [511:0] din_V_reg_1346;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [63:0] i_fu_306;
wire   [63:0] i_2_fu_351_p2;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] tmp_2_s_fu_371_p4;
wire   [7:0] trunc_ln628_fu_368_p1;
wire   [7:0] tmp_2_1_fu_380_p4;
wire   [7:0] tmp_2_2_fu_389_p4;
wire   [7:0] xor_ln1499_1_fu_944_p2;
wire   [7:0] xor_ln1499_fu_938_p2;
wire   [7:0] tmp_2_3_fu_398_p4;
wire   [7:0] tmp_2_4_fu_407_p4;
wire   [7:0] tmp_2_5_fu_416_p4;
wire   [7:0] tmp_2_6_fu_425_p4;
wire   [7:0] xor_ln1499_4_fu_962_p2;
wire   [7:0] xor_ln1499_3_fu_956_p2;
wire   [7:0] xor_ln1499_5_fu_968_p2;
wire   [7:0] xor_ln1499_2_fu_950_p2;
wire   [7:0] tmp_2_7_fu_434_p4;
wire   [7:0] tmp_2_8_fu_443_p4;
wire   [7:0] tmp_2_9_fu_452_p4;
wire   [7:0] tmp_2_10_fu_461_p4;
wire   [7:0] xor_ln1499_8_fu_986_p2;
wire   [7:0] xor_ln1499_7_fu_980_p2;
wire   [7:0] tmp_2_11_fu_470_p4;
wire   [7:0] tmp_2_12_fu_479_p4;
wire   [7:0] tmp_2_13_fu_488_p4;
wire   [7:0] tmp_2_14_fu_497_p4;
wire   [7:0] xor_ln1499_11_fu_1004_p2;
wire   [7:0] xor_ln1499_10_fu_998_p2;
wire   [7:0] xor_ln1499_12_fu_1010_p2;
wire   [7:0] xor_ln1499_9_fu_992_p2;
wire   [7:0] xor_ln1499_13_fu_1016_p2;
wire   [7:0] xor_ln1499_6_fu_974_p2;
wire   [7:0] tmp_2_15_fu_506_p4;
wire   [7:0] tmp_2_16_fu_515_p4;
wire   [7:0] tmp_2_17_fu_524_p4;
wire   [7:0] tmp_2_18_fu_533_p4;
wire   [7:0] xor_ln1499_16_fu_1034_p2;
wire   [7:0] xor_ln1499_15_fu_1028_p2;
wire   [7:0] tmp_2_19_fu_542_p4;
wire   [7:0] tmp_2_20_fu_551_p4;
wire   [7:0] tmp_2_21_fu_560_p4;
wire   [7:0] tmp_2_22_fu_569_p4;
wire   [7:0] xor_ln1499_19_fu_1052_p2;
wire   [7:0] xor_ln1499_18_fu_1046_p2;
wire   [7:0] xor_ln1499_20_fu_1058_p2;
wire   [7:0] xor_ln1499_17_fu_1040_p2;
wire   [7:0] tmp_2_23_fu_578_p4;
wire   [7:0] tmp_2_24_fu_587_p4;
wire   [7:0] tmp_2_25_fu_596_p4;
wire   [7:0] tmp_2_26_fu_605_p4;
wire   [7:0] xor_ln1499_23_fu_1076_p2;
wire   [7:0] xor_ln1499_22_fu_1070_p2;
wire   [7:0] tmp_2_27_fu_614_p4;
wire   [7:0] tmp_2_28_fu_623_p4;
wire   [7:0] tmp_2_29_fu_632_p4;
wire   [7:0] tmp_2_30_fu_641_p4;
wire   [7:0] xor_ln1499_26_fu_1094_p2;
wire   [7:0] xor_ln1499_25_fu_1088_p2;
wire   [7:0] xor_ln1499_27_fu_1100_p2;
wire   [7:0] xor_ln1499_24_fu_1082_p2;
wire   [7:0] xor_ln1499_28_fu_1106_p2;
wire   [7:0] xor_ln1499_21_fu_1064_p2;
wire   [7:0] xor_ln1499_29_fu_1112_p2;
wire   [7:0] xor_ln1499_14_fu_1022_p2;
wire   [7:0] tmp_2_31_fu_650_p4;
wire   [7:0] tmp_2_32_fu_659_p4;
wire   [7:0] tmp_2_33_fu_668_p4;
wire   [7:0] tmp_2_34_fu_677_p4;
wire   [7:0] xor_ln1499_32_fu_1130_p2;
wire   [7:0] xor_ln1499_31_fu_1124_p2;
wire   [7:0] tmp_2_35_fu_686_p4;
wire   [7:0] tmp_2_36_fu_695_p4;
wire   [7:0] tmp_2_37_fu_704_p4;
wire   [7:0] tmp_2_38_fu_713_p4;
wire   [7:0] xor_ln1499_35_fu_1148_p2;
wire   [7:0] xor_ln1499_34_fu_1142_p2;
wire   [7:0] xor_ln1499_36_fu_1154_p2;
wire   [7:0] xor_ln1499_33_fu_1136_p2;
wire   [7:0] tmp_2_39_fu_722_p4;
wire   [7:0] tmp_2_40_fu_731_p4;
wire   [7:0] tmp_2_41_fu_740_p4;
wire   [7:0] tmp_2_42_fu_749_p4;
wire   [7:0] xor_ln1499_39_fu_1172_p2;
wire   [7:0] xor_ln1499_38_fu_1166_p2;
wire   [7:0] tmp_2_43_fu_758_p4;
wire   [7:0] tmp_2_44_fu_767_p4;
wire   [7:0] tmp_2_45_fu_776_p4;
wire   [7:0] tmp_2_46_fu_785_p4;
wire   [7:0] xor_ln1499_42_fu_1190_p2;
wire   [7:0] xor_ln1499_41_fu_1184_p2;
wire   [7:0] xor_ln1499_43_fu_1196_p2;
wire   [7:0] xor_ln1499_40_fu_1178_p2;
wire   [7:0] xor_ln1499_44_fu_1202_p2;
wire   [7:0] xor_ln1499_37_fu_1160_p2;
wire   [7:0] tmp_2_47_fu_794_p4;
wire   [7:0] tmp_2_48_fu_803_p4;
wire   [7:0] tmp_2_49_fu_812_p4;
wire   [7:0] tmp_2_50_fu_821_p4;
wire   [7:0] xor_ln1499_47_fu_1220_p2;
wire   [7:0] xor_ln1499_46_fu_1214_p2;
wire   [7:0] tmp_2_51_fu_830_p4;
wire   [7:0] tmp_2_52_fu_839_p4;
wire   [7:0] tmp_2_53_fu_848_p4;
wire   [7:0] tmp_2_54_fu_857_p4;
wire   [7:0] xor_ln1499_50_fu_1238_p2;
wire   [7:0] xor_ln1499_49_fu_1232_p2;
wire   [7:0] xor_ln1499_51_fu_1244_p2;
wire   [7:0] xor_ln1499_48_fu_1226_p2;
wire   [7:0] tmp_2_55_fu_866_p4;
wire   [7:0] tmp_2_56_fu_875_p4;
wire   [7:0] tmp_2_57_fu_884_p4;
wire   [7:0] tmp_2_58_fu_893_p4;
wire   [7:0] xor_ln1499_54_fu_1262_p2;
wire   [7:0] xor_ln1499_53_fu_1256_p2;
wire   [7:0] tmp_2_59_fu_902_p4;
wire   [7:0] tmp_2_60_fu_911_p4;
wire   [7:0] tmp_2_61_fu_920_p4;
wire   [7:0] tmp_2_62_fu_929_p4;
wire   [7:0] xor_ln1499_57_fu_1280_p2;
wire   [7:0] xor_ln1499_56_fu_1274_p2;
wire   [7:0] xor_ln1499_58_fu_1286_p2;
wire   [7:0] xor_ln1499_55_fu_1268_p2;
wire   [7:0] xor_ln1499_59_fu_1292_p2;
wire   [7:0] xor_ln1499_52_fu_1250_p2;
wire   [7:0] xor_ln1499_60_fu_1298_p2;
wire   [7:0] xor_ln1499_45_fu_1208_p2;
wire   [7:0] xor_ln1499_61_fu_1304_p2;
wire   [7:0] xor_ln1499_30_fu_1118_p2;
wire   [7:0] xor_ln1499_62_fu_1310_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Mmap2Stream_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_306 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln80_fu_346_p2 == 1'd0))) begin
            i_fu_306 <= i_2_fu_351_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln80_reg_1342 <= icmp_ln80_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_1342 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        din_V_reg_1346 <= m_axi_mmap_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln80_fu_346_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_1342 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_1342 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_mmap_RREADY = 1'b1;
    end else begin
        m_axi_mmap_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_1342 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mmap_blk_n_R = m_axi_mmap_RVALID;
    end else begin
        mmap_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        stream_blk_n = stream_full_n;
    end else begin
        stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_write = 1'b1;
    end else begin
        stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln80_reg_1342 == 1'd0) & (m_axi_mmap_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln80_reg_1342 == 1'd0) & (m_axi_mmap_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln80_reg_1342 == 1'd0) & (m_axi_mmap_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln80_reg_1342 == 1'd0) & (m_axi_mmap_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (stream_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_2_fu_351_p2 = (i_fu_306 + 64'd1);

assign icmp_ln80_fu_346_p2 = ((i_fu_306 == n) ? 1'b1 : 1'b0);

assign m_axi_mmap_ARADDR = 64'd0;

assign m_axi_mmap_ARBURST = 2'd0;

assign m_axi_mmap_ARCACHE = 4'd0;

assign m_axi_mmap_ARID = 1'd0;

assign m_axi_mmap_ARLEN = 32'd0;

assign m_axi_mmap_ARLOCK = 2'd0;

assign m_axi_mmap_ARPROT = 3'd0;

assign m_axi_mmap_ARQOS = 4'd0;

assign m_axi_mmap_ARREGION = 4'd0;

assign m_axi_mmap_ARSIZE = 3'd0;

assign m_axi_mmap_ARUSER = 1'd0;

assign m_axi_mmap_ARVALID = 1'b0;

assign m_axi_mmap_AWADDR = 64'd0;

assign m_axi_mmap_AWBURST = 2'd0;

assign m_axi_mmap_AWCACHE = 4'd0;

assign m_axi_mmap_AWID = 1'd0;

assign m_axi_mmap_AWLEN = 32'd0;

assign m_axi_mmap_AWLOCK = 2'd0;

assign m_axi_mmap_AWPROT = 3'd0;

assign m_axi_mmap_AWQOS = 4'd0;

assign m_axi_mmap_AWREGION = 4'd0;

assign m_axi_mmap_AWSIZE = 3'd0;

assign m_axi_mmap_AWUSER = 1'd0;

assign m_axi_mmap_AWVALID = 1'b0;

assign m_axi_mmap_BREADY = 1'b0;

assign m_axi_mmap_WDATA = 512'd0;

assign m_axi_mmap_WID = 1'd0;

assign m_axi_mmap_WLAST = 1'b0;

assign m_axi_mmap_WSTRB = 64'd0;

assign m_axi_mmap_WUSER = 1'd0;

assign m_axi_mmap_WVALID = 1'b0;

assign stream_din = {{1'd0}, {xor_ln1499_62_fu_1310_p2}};

assign tmp_2_10_fu_461_p4 = {{din_V_reg_1346[95:88]}};

assign tmp_2_11_fu_470_p4 = {{din_V_reg_1346[103:96]}};

assign tmp_2_12_fu_479_p4 = {{din_V_reg_1346[111:104]}};

assign tmp_2_13_fu_488_p4 = {{din_V_reg_1346[119:112]}};

assign tmp_2_14_fu_497_p4 = {{din_V_reg_1346[127:120]}};

assign tmp_2_15_fu_506_p4 = {{din_V_reg_1346[135:128]}};

assign tmp_2_16_fu_515_p4 = {{din_V_reg_1346[143:136]}};

assign tmp_2_17_fu_524_p4 = {{din_V_reg_1346[151:144]}};

assign tmp_2_18_fu_533_p4 = {{din_V_reg_1346[159:152]}};

assign tmp_2_19_fu_542_p4 = {{din_V_reg_1346[167:160]}};

assign tmp_2_1_fu_380_p4 = {{din_V_reg_1346[23:16]}};

assign tmp_2_20_fu_551_p4 = {{din_V_reg_1346[175:168]}};

assign tmp_2_21_fu_560_p4 = {{din_V_reg_1346[183:176]}};

assign tmp_2_22_fu_569_p4 = {{din_V_reg_1346[191:184]}};

assign tmp_2_23_fu_578_p4 = {{din_V_reg_1346[199:192]}};

assign tmp_2_24_fu_587_p4 = {{din_V_reg_1346[207:200]}};

assign tmp_2_25_fu_596_p4 = {{din_V_reg_1346[215:208]}};

assign tmp_2_26_fu_605_p4 = {{din_V_reg_1346[223:216]}};

assign tmp_2_27_fu_614_p4 = {{din_V_reg_1346[231:224]}};

assign tmp_2_28_fu_623_p4 = {{din_V_reg_1346[239:232]}};

assign tmp_2_29_fu_632_p4 = {{din_V_reg_1346[247:240]}};

assign tmp_2_2_fu_389_p4 = {{din_V_reg_1346[31:24]}};

assign tmp_2_30_fu_641_p4 = {{din_V_reg_1346[255:248]}};

assign tmp_2_31_fu_650_p4 = {{din_V_reg_1346[263:256]}};

assign tmp_2_32_fu_659_p4 = {{din_V_reg_1346[271:264]}};

assign tmp_2_33_fu_668_p4 = {{din_V_reg_1346[279:272]}};

assign tmp_2_34_fu_677_p4 = {{din_V_reg_1346[287:280]}};

assign tmp_2_35_fu_686_p4 = {{din_V_reg_1346[295:288]}};

assign tmp_2_36_fu_695_p4 = {{din_V_reg_1346[303:296]}};

assign tmp_2_37_fu_704_p4 = {{din_V_reg_1346[311:304]}};

assign tmp_2_38_fu_713_p4 = {{din_V_reg_1346[319:312]}};

assign tmp_2_39_fu_722_p4 = {{din_V_reg_1346[327:320]}};

assign tmp_2_3_fu_398_p4 = {{din_V_reg_1346[39:32]}};

assign tmp_2_40_fu_731_p4 = {{din_V_reg_1346[335:328]}};

assign tmp_2_41_fu_740_p4 = {{din_V_reg_1346[343:336]}};

assign tmp_2_42_fu_749_p4 = {{din_V_reg_1346[351:344]}};

assign tmp_2_43_fu_758_p4 = {{din_V_reg_1346[359:352]}};

assign tmp_2_44_fu_767_p4 = {{din_V_reg_1346[367:360]}};

assign tmp_2_45_fu_776_p4 = {{din_V_reg_1346[375:368]}};

assign tmp_2_46_fu_785_p4 = {{din_V_reg_1346[383:376]}};

assign tmp_2_47_fu_794_p4 = {{din_V_reg_1346[391:384]}};

assign tmp_2_48_fu_803_p4 = {{din_V_reg_1346[399:392]}};

assign tmp_2_49_fu_812_p4 = {{din_V_reg_1346[407:400]}};

assign tmp_2_4_fu_407_p4 = {{din_V_reg_1346[47:40]}};

assign tmp_2_50_fu_821_p4 = {{din_V_reg_1346[415:408]}};

assign tmp_2_51_fu_830_p4 = {{din_V_reg_1346[423:416]}};

assign tmp_2_52_fu_839_p4 = {{din_V_reg_1346[431:424]}};

assign tmp_2_53_fu_848_p4 = {{din_V_reg_1346[439:432]}};

assign tmp_2_54_fu_857_p4 = {{din_V_reg_1346[447:440]}};

assign tmp_2_55_fu_866_p4 = {{din_V_reg_1346[455:448]}};

assign tmp_2_56_fu_875_p4 = {{din_V_reg_1346[463:456]}};

assign tmp_2_57_fu_884_p4 = {{din_V_reg_1346[471:464]}};

assign tmp_2_58_fu_893_p4 = {{din_V_reg_1346[479:472]}};

assign tmp_2_59_fu_902_p4 = {{din_V_reg_1346[487:480]}};

assign tmp_2_5_fu_416_p4 = {{din_V_reg_1346[55:48]}};

assign tmp_2_60_fu_911_p4 = {{din_V_reg_1346[495:488]}};

assign tmp_2_61_fu_920_p4 = {{din_V_reg_1346[503:496]}};

assign tmp_2_62_fu_929_p4 = {{din_V_reg_1346[511:504]}};

assign tmp_2_6_fu_425_p4 = {{din_V_reg_1346[63:56]}};

assign tmp_2_7_fu_434_p4 = {{din_V_reg_1346[71:64]}};

assign tmp_2_8_fu_443_p4 = {{din_V_reg_1346[79:72]}};

assign tmp_2_9_fu_452_p4 = {{din_V_reg_1346[87:80]}};

assign tmp_2_s_fu_371_p4 = {{din_V_reg_1346[15:8]}};

assign trunc_ln628_fu_368_p1 = din_V_reg_1346[7:0];

assign xor_ln1499_10_fu_998_p2 = (tmp_2_12_fu_479_p4 ^ tmp_2_11_fu_470_p4);

assign xor_ln1499_11_fu_1004_p2 = (tmp_2_14_fu_497_p4 ^ tmp_2_13_fu_488_p4);

assign xor_ln1499_12_fu_1010_p2 = (xor_ln1499_11_fu_1004_p2 ^ xor_ln1499_10_fu_998_p2);

assign xor_ln1499_13_fu_1016_p2 = (xor_ln1499_9_fu_992_p2 ^ xor_ln1499_12_fu_1010_p2);

assign xor_ln1499_14_fu_1022_p2 = (xor_ln1499_6_fu_974_p2 ^ xor_ln1499_13_fu_1016_p2);

assign xor_ln1499_15_fu_1028_p2 = (tmp_2_16_fu_515_p4 ^ tmp_2_15_fu_506_p4);

assign xor_ln1499_16_fu_1034_p2 = (tmp_2_18_fu_533_p4 ^ tmp_2_17_fu_524_p4);

assign xor_ln1499_17_fu_1040_p2 = (xor_ln1499_16_fu_1034_p2 ^ xor_ln1499_15_fu_1028_p2);

assign xor_ln1499_18_fu_1046_p2 = (tmp_2_20_fu_551_p4 ^ tmp_2_19_fu_542_p4);

assign xor_ln1499_19_fu_1052_p2 = (tmp_2_22_fu_569_p4 ^ tmp_2_21_fu_560_p4);

assign xor_ln1499_1_fu_944_p2 = (tmp_2_2_fu_389_p4 ^ tmp_2_1_fu_380_p4);

assign xor_ln1499_20_fu_1058_p2 = (xor_ln1499_19_fu_1052_p2 ^ xor_ln1499_18_fu_1046_p2);

assign xor_ln1499_21_fu_1064_p2 = (xor_ln1499_20_fu_1058_p2 ^ xor_ln1499_17_fu_1040_p2);

assign xor_ln1499_22_fu_1070_p2 = (tmp_2_24_fu_587_p4 ^ tmp_2_23_fu_578_p4);

assign xor_ln1499_23_fu_1076_p2 = (tmp_2_26_fu_605_p4 ^ tmp_2_25_fu_596_p4);

assign xor_ln1499_24_fu_1082_p2 = (xor_ln1499_23_fu_1076_p2 ^ xor_ln1499_22_fu_1070_p2);

assign xor_ln1499_25_fu_1088_p2 = (tmp_2_28_fu_623_p4 ^ tmp_2_27_fu_614_p4);

assign xor_ln1499_26_fu_1094_p2 = (tmp_2_30_fu_641_p4 ^ tmp_2_29_fu_632_p4);

assign xor_ln1499_27_fu_1100_p2 = (xor_ln1499_26_fu_1094_p2 ^ xor_ln1499_25_fu_1088_p2);

assign xor_ln1499_28_fu_1106_p2 = (xor_ln1499_27_fu_1100_p2 ^ xor_ln1499_24_fu_1082_p2);

assign xor_ln1499_29_fu_1112_p2 = (xor_ln1499_28_fu_1106_p2 ^ xor_ln1499_21_fu_1064_p2);

assign xor_ln1499_2_fu_950_p2 = (xor_ln1499_fu_938_p2 ^ xor_ln1499_1_fu_944_p2);

assign xor_ln1499_30_fu_1118_p2 = (xor_ln1499_29_fu_1112_p2 ^ xor_ln1499_14_fu_1022_p2);

assign xor_ln1499_31_fu_1124_p2 = (tmp_2_32_fu_659_p4 ^ tmp_2_31_fu_650_p4);

assign xor_ln1499_32_fu_1130_p2 = (tmp_2_34_fu_677_p4 ^ tmp_2_33_fu_668_p4);

assign xor_ln1499_33_fu_1136_p2 = (xor_ln1499_32_fu_1130_p2 ^ xor_ln1499_31_fu_1124_p2);

assign xor_ln1499_34_fu_1142_p2 = (tmp_2_36_fu_695_p4 ^ tmp_2_35_fu_686_p4);

assign xor_ln1499_35_fu_1148_p2 = (tmp_2_38_fu_713_p4 ^ tmp_2_37_fu_704_p4);

assign xor_ln1499_36_fu_1154_p2 = (xor_ln1499_35_fu_1148_p2 ^ xor_ln1499_34_fu_1142_p2);

assign xor_ln1499_37_fu_1160_p2 = (xor_ln1499_36_fu_1154_p2 ^ xor_ln1499_33_fu_1136_p2);

assign xor_ln1499_38_fu_1166_p2 = (tmp_2_40_fu_731_p4 ^ tmp_2_39_fu_722_p4);

assign xor_ln1499_39_fu_1172_p2 = (tmp_2_42_fu_749_p4 ^ tmp_2_41_fu_740_p4);

assign xor_ln1499_3_fu_956_p2 = (tmp_2_4_fu_407_p4 ^ tmp_2_3_fu_398_p4);

assign xor_ln1499_40_fu_1178_p2 = (xor_ln1499_39_fu_1172_p2 ^ xor_ln1499_38_fu_1166_p2);

assign xor_ln1499_41_fu_1184_p2 = (tmp_2_44_fu_767_p4 ^ tmp_2_43_fu_758_p4);

assign xor_ln1499_42_fu_1190_p2 = (tmp_2_46_fu_785_p4 ^ tmp_2_45_fu_776_p4);

assign xor_ln1499_43_fu_1196_p2 = (xor_ln1499_42_fu_1190_p2 ^ xor_ln1499_41_fu_1184_p2);

assign xor_ln1499_44_fu_1202_p2 = (xor_ln1499_43_fu_1196_p2 ^ xor_ln1499_40_fu_1178_p2);

assign xor_ln1499_45_fu_1208_p2 = (xor_ln1499_44_fu_1202_p2 ^ xor_ln1499_37_fu_1160_p2);

assign xor_ln1499_46_fu_1214_p2 = (tmp_2_48_fu_803_p4 ^ tmp_2_47_fu_794_p4);

assign xor_ln1499_47_fu_1220_p2 = (tmp_2_50_fu_821_p4 ^ tmp_2_49_fu_812_p4);

assign xor_ln1499_48_fu_1226_p2 = (xor_ln1499_47_fu_1220_p2 ^ xor_ln1499_46_fu_1214_p2);

assign xor_ln1499_49_fu_1232_p2 = (tmp_2_52_fu_839_p4 ^ tmp_2_51_fu_830_p4);

assign xor_ln1499_4_fu_962_p2 = (tmp_2_6_fu_425_p4 ^ tmp_2_5_fu_416_p4);

assign xor_ln1499_50_fu_1238_p2 = (tmp_2_54_fu_857_p4 ^ tmp_2_53_fu_848_p4);

assign xor_ln1499_51_fu_1244_p2 = (xor_ln1499_50_fu_1238_p2 ^ xor_ln1499_49_fu_1232_p2);

assign xor_ln1499_52_fu_1250_p2 = (xor_ln1499_51_fu_1244_p2 ^ xor_ln1499_48_fu_1226_p2);

assign xor_ln1499_53_fu_1256_p2 = (tmp_2_56_fu_875_p4 ^ tmp_2_55_fu_866_p4);

assign xor_ln1499_54_fu_1262_p2 = (tmp_2_58_fu_893_p4 ^ tmp_2_57_fu_884_p4);

assign xor_ln1499_55_fu_1268_p2 = (xor_ln1499_54_fu_1262_p2 ^ xor_ln1499_53_fu_1256_p2);

assign xor_ln1499_56_fu_1274_p2 = (tmp_2_60_fu_911_p4 ^ tmp_2_59_fu_902_p4);

assign xor_ln1499_57_fu_1280_p2 = (tmp_2_62_fu_929_p4 ^ tmp_2_61_fu_920_p4);

assign xor_ln1499_58_fu_1286_p2 = (xor_ln1499_57_fu_1280_p2 ^ xor_ln1499_56_fu_1274_p2);

assign xor_ln1499_59_fu_1292_p2 = (xor_ln1499_58_fu_1286_p2 ^ xor_ln1499_55_fu_1268_p2);

assign xor_ln1499_5_fu_968_p2 = (xor_ln1499_4_fu_962_p2 ^ xor_ln1499_3_fu_956_p2);

assign xor_ln1499_60_fu_1298_p2 = (xor_ln1499_59_fu_1292_p2 ^ xor_ln1499_52_fu_1250_p2);

assign xor_ln1499_61_fu_1304_p2 = (xor_ln1499_60_fu_1298_p2 ^ xor_ln1499_45_fu_1208_p2);

assign xor_ln1499_62_fu_1310_p2 = (xor_ln1499_61_fu_1304_p2 ^ xor_ln1499_30_fu_1118_p2);

assign xor_ln1499_6_fu_974_p2 = (xor_ln1499_5_fu_968_p2 ^ xor_ln1499_2_fu_950_p2);

assign xor_ln1499_7_fu_980_p2 = (tmp_2_8_fu_443_p4 ^ tmp_2_7_fu_434_p4);

assign xor_ln1499_8_fu_986_p2 = (tmp_2_9_fu_452_p4 ^ tmp_2_10_fu_461_p4);

assign xor_ln1499_9_fu_992_p2 = (xor_ln1499_8_fu_986_p2 ^ xor_ln1499_7_fu_980_p2);

assign xor_ln1499_fu_938_p2 = (trunc_ln628_fu_368_p1 ^ tmp_2_s_fu_371_p4);

endmodule //Mmap2Stream_Mmap2Stream_Pipeline_VITIS_LOOP_80_1
