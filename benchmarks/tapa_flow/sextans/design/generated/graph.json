{
    "cflags": [
        "-std=c++17",
        "-I",
        "/home/Licheng-Guo/dev/tapa/backend/python/tapa/../../../src",
        "-isystem",
        "/opt/tools/xilinx/Vitis_HLS/2022.2/include"
    ],
    "tasks": {
        "FloatvAddFloatv": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) {\n#pragma HLS disaggregate variable = fifo_in0\n#pragma HLS interface ap_fifo port = fifo_in0._\n#pragma HLS aggregate variable = fifo_in0._ bit\n#pragma HLS interface ap_fifo port = fifo_in0._peek\n#pragma HLS aggregate variable = fifo_in0._peek bit\nvoid(fifo_in0._.empty());\nvoid(fifo_in0._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_in1\n#pragma HLS interface ap_fifo port = fifo_in1._\n#pragma HLS aggregate variable = fifo_in1._ bit\n#pragma HLS interface ap_fifo port = fifo_in1._peek\n#pragma HLS aggregate variable = fifo_in1._peek bit\nvoid(fifo_in1._.empty());\nvoid(fifo_in1._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_out\n#pragma HLS interface ap_fifo port = fifo_out._\n#pragma HLS aggregate variable = fifo_out._ bit\nvoid(fifo_out._.full());\n\ncc:\n  for (;;) {\n#pragma HLS pipeline style = stp II = 1\n    bool flag_nop = fifo_in0.empty() | fifo_in1.empty();\n    if (!flag_nop) {\n      float_v16 tmp0;\n      fifo_in0.try_read(tmp0);\n      float_v16 tmp1;\n      fifo_in1.try_read(tmp1);\n      float_v16 c_out = tmp0 + tmp1;\n      fifo_out.write(c_out);\n    }\n  }\n}\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "FloatvMultConst": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) {\n\n\n\n#pragma HLS disaggregate variable = fifo_in\n#pragma HLS interface ap_fifo port = fifo_in._\n#pragma HLS aggregate variable = fifo_in._ bit\n#pragma HLS interface ap_fifo port = fifo_in._peek\n#pragma HLS aggregate variable = fifo_in._peek bit\nvoid(fifo_in._.empty());\nvoid(fifo_in._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_out\n#pragma HLS interface ap_fifo port = fifo_out._\n#pragma HLS aggregate variable = fifo_out._ bit\nvoid(fifo_out._.full());\n\n  const float alpha_f = tapa::bit_cast<float>(alpha_u);\n  const int N16 = P_N >> 16;\n  const int rp_time = (N16 == 0) ? 1 : N16;\n  const int N = P_N & 0xFFFF;\n  const int num_ite = ((M + 15) >> 4) * ((N + 7) >> 3) * rp_time;\ncc:\n  for (int i = 0; i < num_ite;) {\n#pragma HLS pipeline style = stp II = 1\n    float_v16 tmp;\n    bool read_ready = fifo_in.try_read(tmp);\n    if (read_ready) {\n      float_v16 c_out = tmp * alpha_f;\n      fifo_out.write(c_out);\n      ++i;\n    }\n  }\n}\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "Merger": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) {\n#pragma HLS disaggregate variable = fifo_in\n#pragma HLS array_partition variable = fifo_in complete\n#pragma HLS interface ap_fifo port = fifo_in[0]._\n#pragma HLS aggregate variable = fifo_in[0]._ bit\n#pragma HLS interface ap_fifo port = fifo_in[0]._peek\n#pragma HLS aggregate variable = fifo_in[0]._peek bit\nvoid(fifo_in[0]._.empty());\nvoid(fifo_in[0]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_in[1]._\n#pragma HLS aggregate variable = fifo_in[1]._ bit\n#pragma HLS interface ap_fifo port = fifo_in[1]._peek\n#pragma HLS aggregate variable = fifo_in[1]._peek bit\nvoid(fifo_in[1]._.empty());\nvoid(fifo_in[1]._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_out\n#pragma HLS interface ap_fifo port = fifo_out._\n#pragma HLS aggregate variable = fifo_out._ bit\nvoid(fifo_out._.full());\n\n  for (;;) {\n#pragma HLS pipeline style = stp II = 1\n    bool flag_nop = fifo_out.full() | fifo_in[0].empty() | fifo_in[1].empty();\n    if (!flag_nop) {\n      float_v16 tmpv16;\n      float_v8 tmpv8[2];\n#pragma HLS aggregate variable = tmpv16\n      fifo_in[0].try_read(tmpv8[0]);\n      fifo_in[1].try_read(tmpv8[1]);\n      for (int i = 0; i < 8; ++i) {\n        tmpv16[i] = tmpv8[0][i];\n        tmpv16[i + 8] = tmpv8[1][i];\n      }\n      fifo_out.try_write(tmpv16);\n    }\n  }\n}\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "PEG_Bmtx": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) {\n#pragma HLS disaggregate variable = PE_inst_in\n#pragma HLS interface ap_fifo port = PE_inst_in._\n#pragma HLS aggregate variable = PE_inst_in._ bit\n#pragma HLS interface ap_fifo port = PE_inst_in._peek\n#pragma HLS aggregate variable = PE_inst_in._peek bit\nvoid(PE_inst_in._.empty());\nvoid(PE_inst_in._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_inst_in\n#pragma HLS interface ap_fifo port = fifo_inst_in._\n#pragma HLS aggregate variable = fifo_inst_in._ bit\n#pragma HLS interface ap_fifo port = fifo_inst_in._peek\n#pragma HLS aggregate variable = fifo_inst_in._peek bit\nvoid(fifo_inst_in._.empty());\nvoid(fifo_inst_in._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_A\n#pragma HLS interface ap_fifo port = fifo_A._\n#pragma HLS aggregate variable = fifo_A._ bit\n#pragma HLS interface ap_fifo port = fifo_A._peek\n#pragma HLS aggregate variable = fifo_A._peek bit\nvoid(fifo_A._.empty());\nvoid(fifo_A._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_B_in\n#pragma HLS array_partition variable = fifo_B_in complete\n#pragma HLS interface ap_fifo port = fifo_B_in[0]._\n#pragma HLS aggregate variable = fifo_B_in[0]._ bit\n#pragma HLS interface ap_fifo port = fifo_B_in[0]._peek\n#pragma HLS aggregate variable = fifo_B_in[0]._peek bit\nvoid(fifo_B_in[0]._.empty());\nvoid(fifo_B_in[0]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_B_in[1]._\n#pragma HLS aggregate variable = fifo_B_in[1]._ bit\n#pragma HLS interface ap_fifo port = fifo_B_in[1]._peek\n#pragma HLS aggregate variable = fifo_B_in[1]._peek bit\nvoid(fifo_B_in[1]._.empty());\nvoid(fifo_B_in[1]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_B_in[2]._\n#pragma HLS aggregate variable = fifo_B_in[2]._ bit\n#pragma HLS interface ap_fifo port = fifo_B_in[2]._peek\n#pragma HLS aggregate variable = fifo_B_in[2]._peek bit\nvoid(fifo_B_in[2]._.empty());\nvoid(fifo_B_in[2]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_B_in[3]._\n#pragma HLS aggregate variable = fifo_B_in[3]._ bit\n#pragma HLS interface ap_fifo port = fifo_B_in[3]._peek\n#pragma HLS aggregate variable = fifo_B_in[3]._peek bit\nvoid(fifo_B_in[3]._.empty());\nvoid(fifo_B_in[3]._peek.empty());\n\n#pragma HLS disaggregate variable = PE_inst_out\n#pragma HLS interface ap_fifo port = PE_inst_out._\n#pragma HLS aggregate variable = PE_inst_out._ bit\nvoid(PE_inst_out._.full());\n\n#pragma HLS disaggregate variable = fifo_inst_out\n#pragma HLS interface ap_fifo port = fifo_inst_out._\n#pragma HLS aggregate variable = fifo_inst_out._ bit\nvoid(fifo_inst_out._.full());\n\n#pragma HLS disaggregate variable = fifo_B_out\n#pragma HLS array_partition variable = fifo_B_out complete\n#pragma HLS interface ap_fifo port = fifo_B_out[0]._\n#pragma HLS aggregate variable = fifo_B_out[0]._ bit\nvoid(fifo_B_out[0]._.full());\n#pragma HLS interface ap_fifo port = fifo_B_out[1]._\n#pragma HLS aggregate variable = fifo_B_out[1]._ bit\nvoid(fifo_B_out[1]._.full());\n#pragma HLS interface ap_fifo port = fifo_B_out[2]._\n#pragma HLS aggregate variable = fifo_B_out[2]._ bit\nvoid(fifo_B_out[2]._.full());\n#pragma HLS interface ap_fifo port = fifo_B_out[3]._\n#pragma HLS aggregate variable = fifo_B_out[3]._ bit\nvoid(fifo_B_out[3]._.full());\n\n#pragma HLS disaggregate variable = PE_inst_to_Cmtx\n#pragma HLS interface ap_fifo port = PE_inst_to_Cmtx._\n#pragma HLS aggregate variable = PE_inst_to_Cmtx._ bit\nvoid(PE_inst_to_Cmtx._.full());\n\n#pragma HLS disaggregate variable = fifo_inst_out_to_Cmtx\n#pragma HLS interface ap_fifo port = fifo_inst_out_to_Cmtx._\n#pragma HLS aggregate variable = fifo_inst_out_to_Cmtx._ bit\nvoid(fifo_inst_out_to_Cmtx._.full());\n\n#pragma HLS disaggregate variable = fifo_aBvec\n#pragma HLS array_partition variable = fifo_aBvec complete\n#pragma HLS interface ap_fifo port = fifo_aBvec[0]._\n#pragma HLS aggregate variable = fifo_aBvec[0]._ bit\nvoid(fifo_aBvec[0]._.full());\n#pragma HLS interface ap_fifo port = fifo_aBvec[1]._\n#pragma HLS aggregate variable = fifo_aBvec[1]._ bit\nvoid(fifo_aBvec[1]._.full());\n#pragma HLS interface ap_fifo port = fifo_aBvec[2]._\n#pragma HLS aggregate variable = fifo_aBvec[2]._ bit\nvoid(fifo_aBvec[2]._.full());\n#pragma HLS interface ap_fifo port = fifo_aBvec[3]._\n#pragma HLS aggregate variable = fifo_aBvec[3]._ bit\nvoid(fifo_aBvec[3]._.full());\n\n  const int NUM_ITE = PE_inst_in.read();\n  const int M = PE_inst_in.read();\n  const int P_N = PE_inst_in.read();\n  const int K = PE_inst_in.read();\n  PE_inst_out.write(NUM_ITE);\n  PE_inst_out.write(M);\n  PE_inst_out.write(P_N);\n  PE_inst_out.write(K);\n  PE_inst_to_Cmtx.write(NUM_ITE);\n  PE_inst_to_Cmtx.write(M);\n  PE_inst_to_Cmtx.write(P_N);\n  const int N16 = P_N >> 16;\n  const int rp_time = (N16 == 0) ? 1 : N16;\n  const int N = P_N & 0xFFFF;\n  const int rp_time_N = rp_time * ((N + 7) >> 3);\nl_rp:\n  for (int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min = 1 max = 16\n    // float local_B[8/2][8][WINDOW_SIZE];\n    // float local_B[8][WINDOW_SIZE];\n    float local_B[4 / 2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable = local_B latency = 2\n#pragma HLS array_partition variable = local_B complete dim = 1\n#pragma HLS array_partition variable = local_B complete dim = 2\n#pragma HLS array_partition variable = local_B cyclic factor =                 \\\n    B_PARTITION_FACTOR dim = 3\n    //#pragma HLS array_partition variable=local_B cyclic\n    //factor=B_PARTITION_FACTOR dim=2\n    auto start_32 = fifo_inst_in.read();\n    fifo_inst_out.write(start_32);\n    fifo_inst_out_to_Cmtx.write(start_32);\n  main:\n    for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min = 1 max = 49\n      // fill onchip B\n    read_B:\n      for (int j = 0; (j < (WINDOW_SIZE >> 3)) &&\n                      (j < ((K + 7) >> 3) - i * (WINDOW_SIZE >> 3));) {\n#pragma HLS loop_tripcount min = 1 max = 512\n#pragma HLS pipeline style = stp II = 1\n        bool b_2048_ready = true;\n        bool b_2048_out_not_full = true;\n        for (int k = 0; k < NUM_CH_B; ++k) {\n          b_2048_ready &= !fifo_B_in[k].empty();\n          b_2048_out_not_full &= !fifo_B_out[k].full();\n        }\n        if (b_2048_ready & b_2048_out_not_full) {\n          float_v16 b_512_x[NUM_CH_B];\n          for (int k = 0; k < NUM_CH_B; ++k) {\n            fifo_B_in[k].try_read(b_512_x[k]);\n            fifo_B_out[k].try_write(b_512_x[k]);\n          }\n          for (int k = 0; k < 8; ++k) {\n            for (int m = 0; m < 8; ++m) {\n              for (int l = 0; l < 2; ++l) {\n                local_B[l][m][j * 8 + k] = b_512_x[m / 2][k + m % 2 * 8];\n              }\n            }\n          }\n          ++j;\n        }\n      }\n      // computation\n      const auto end_32 = fifo_inst_in.read();\n      fifo_inst_out.write(end_32);\n      fifo_inst_out_to_Cmtx.write(end_32);\n    computation:\n      for (int j = start_32; j < end_32;) {\n#pragma HLS loop_tripcount min = 1 max = 200\n#pragma HLS pipeline style = stp II = 1\n        // ap_uint<128> a_pes;\n        ap_uint<256> a_pes;\n        bool a_pes_ready = fifo_A.try_read(a_pes);\n        if (a_pes_ready) {\n          for (int p = 0; p < 4; ++p) {\n            ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n            ap_uint<14> a_col = a(63, 50);\n            ap_uint<18> a_row = a(49, 32);\n            ap_uint<32> a_val = a(31, 0);\n            MultBVec rabv;\n            rabv.row = a_row;\n            if (a_row[17] == 0) {\n              // PE process\n              PEcore_Bmtx(a_col, a_val, local_B[p / 2], rabv.abvec);\n            }\n            fifo_aBvec[p].write(rabv);\n          }\n          ++j;\n        }\n      }\n      start_32 = end_32;\n    }\n  }\n}\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "PEG_Cmtx": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) {\n#pragma HLS disaggregate variable = PE_inst_in\n#pragma HLS interface ap_fifo port = PE_inst_in._\n#pragma HLS aggregate variable = PE_inst_in._ bit\n#pragma HLS interface ap_fifo port = PE_inst_in._peek\n#pragma HLS aggregate variable = PE_inst_in._peek bit\nvoid(PE_inst_in._.empty());\nvoid(PE_inst_in._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_inst_in\n#pragma HLS interface ap_fifo port = fifo_inst_in._\n#pragma HLS aggregate variable = fifo_inst_in._ bit\n#pragma HLS interface ap_fifo port = fifo_inst_in._peek\n#pragma HLS aggregate variable = fifo_inst_in._peek bit\nvoid(fifo_inst_in._.empty());\nvoid(fifo_inst_in._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_aBvec\n#pragma HLS array_partition variable = fifo_aBvec complete\n#pragma HLS interface ap_fifo port = fifo_aBvec[0]._\n#pragma HLS aggregate variable = fifo_aBvec[0]._ bit\n#pragma HLS interface ap_fifo port = fifo_aBvec[0]._peek\n#pragma HLS aggregate variable = fifo_aBvec[0]._peek bit\nvoid(fifo_aBvec[0]._.empty());\nvoid(fifo_aBvec[0]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_aBvec[1]._\n#pragma HLS aggregate variable = fifo_aBvec[1]._ bit\n#pragma HLS interface ap_fifo port = fifo_aBvec[1]._peek\n#pragma HLS aggregate variable = fifo_aBvec[1]._peek bit\nvoid(fifo_aBvec[1]._.empty());\nvoid(fifo_aBvec[1]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_aBvec[2]._\n#pragma HLS aggregate variable = fifo_aBvec[2]._ bit\n#pragma HLS interface ap_fifo port = fifo_aBvec[2]._peek\n#pragma HLS aggregate variable = fifo_aBvec[2]._peek bit\nvoid(fifo_aBvec[2]._.empty());\nvoid(fifo_aBvec[2]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_aBvec[3]._\n#pragma HLS aggregate variable = fifo_aBvec[3]._ bit\n#pragma HLS interface ap_fifo port = fifo_aBvec[3]._peek\n#pragma HLS aggregate variable = fifo_aBvec[3]._peek bit\nvoid(fifo_aBvec[3]._.empty());\nvoid(fifo_aBvec[3]._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_C_out\n#pragma HLS interface ap_fifo port = fifo_C_out._\n#pragma HLS aggregate variable = fifo_C_out._ bit\nvoid(fifo_C_out._.full());\n\n  const int NUM_ITE = PE_inst_in.read();\n  const int M = PE_inst_in.read();\n  const int P_N = PE_inst_in.read();\n  const int N16 = P_N >> 16;\n  const int rp_time = (N16 == 0) ? 1 : N16;\n  const int N = P_N & 0xFFFF;\n  const int rp_time_N = rp_time * ((N + 7) >> 3);\n  const int num_v_init = (M + 63) >> 6;\n  // const int num_v_out = (M + 31) >> 5;\n  const int num_v_out = (M + 15) >> 4;\n  // define local C buffer and pragma to URAM\n  // ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n  ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable = local_C type = RAM_2P impl =               \\\n    URAM latency = 1\n#pragma HLS array_partition complete variable = local_C dim = 1\n#pragma HLS array_partition complete variable = local_C dim = 2\nl_rp:\n  for (int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min = 1 max = 16\n    // init local C\n  init_C:\n    for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min = 1 max = 800\n#pragma HLS pipeline style = stp II = 1\n      // for (int j = 0; j < 2; ++j) {\n      for (int j = 0; j < 4; ++j) {\n        for (int k = 0; k < 8 / 2; ++k) {\n          local_C[j][k][i] = 0;\n        }\n      }\n    }\n    auto start_32 = fifo_inst_in.read();\n  main:\n    for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min = 1 max = 49\n      // computation\n      const auto end_32 = fifo_inst_in.read();\n    computation:\n      for (int j = start_32; j < end_32;) {\n#pragma HLS loop_tripcount min = 1 max = 200\n#pragma HLS pipeline style = stp II = 1\n#pragma HLS dependence true variable = local_C distance = DEP_DIST_LOAD_STORE\n        bool nop_flag = false;\n        for (int p = 0; p < 4; ++p) {\n          nop_flag |= fifo_aBvec[p].empty();\n        }\n        if (!nop_flag) {\n          for (int p = 0; p < 4; ++p) {\n            MultBVec rabv;\n            fifo_aBvec[p].try_read(rabv);\n            ap_uint<18> a_row = rabv.row;\n            if (a_row[17] == 0) {\n              PEcore_Cmtx(a_row, rabv.abvec, local_C[p]);\n            }\n          }\n          ++j;\n        }\n      }\n      start_32 = end_32;\n    }\n    // cout << \"PE = \" << pe_idx << endl;\n  write_C_outer:\n    for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min = 1 max = 1800\n#pragma HLS pipeline style = stp II = 1\n      ap_uint<32> u_32_d[8];\n      for (int d = 0; d < 4; ++d) {\n        ap_uint<64> u_64 = local_C[c_idx][d][i >> 2];\n        u_32_d[2 * d] = u_64(31, 0);\n        u_32_d[2 * d + 1] = u_64(63, 32);\n      }\n      switch (c_idx) { // 0,2,1,3\n      case 0:\n        c_idx = 2;\n        break;\n      case 1:\n        c_idx = 3;\n        break;\n      case 2:\n        c_idx = 1;\n        break;\n      case 3:\n        c_idx = 0;\n        break;\n      }\n      float_v8 out_v;\n      for (int d = 0; d < 8; ++d) {\n        out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n      }\n      fifo_C_out.write(out_v);\n      // for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\n      // endl;\n    }\n  }\n}\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "Scatter_1_2": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) {\n#pragma HLS disaggregate variable = fifo_in\n#pragma HLS interface ap_fifo port = fifo_in._\n#pragma HLS aggregate variable = fifo_in._ bit\n#pragma HLS interface ap_fifo port = fifo_in._peek\n#pragma HLS aggregate variable = fifo_in._peek bit\nvoid(fifo_in._.empty());\nvoid(fifo_in._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_out\n#pragma HLS array_partition variable = fifo_out complete\n#pragma HLS interface ap_fifo port = fifo_out[0]._\n#pragma HLS aggregate variable = fifo_out[0]._ bit\nvoid(fifo_out[0]._.full());\n#pragma HLS interface ap_fifo port = fifo_out[1]._\n#pragma HLS aggregate variable = fifo_out[1]._ bit\nvoid(fifo_out[1]._.full());\n\n  for (;;) {\n#pragma HLS pipeline style = stp II = 1\n    bool flag_nop = fifo_in.empty();\n    for (int i = 0; i < 2; ++i) {\n      flag_nop |= fifo_out[i].full();\n    }\n    if (!flag_nop) {\n      ap_uint<512> tmp;\n      fifo_in.try_read(tmp);\n      for (int i = 0; i < 2; ++i) {\n        fifo_out[i].try_write(tmp(255 + i * 256, i * 256));\n      }\n    }\n  }\n}\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "Sextans": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nextern \"C\" {\n\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) {\n\n#pragma HLS interface s_axilite port = edge_list_ptr bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ptr); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ptr); }\n\n#pragma HLS interface s_axilite port = edge_list_ch_0 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_1 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_2 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_3 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_4 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_5 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_6 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_7 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_0); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_1); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_2); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_3); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_4); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_5); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_6); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_7); }\n\n#pragma HLS interface s_axilite port = mat_B_ch_0 bundle = control\n#pragma HLS interface s_axilite port = mat_B_ch_1 bundle = control\n#pragma HLS interface s_axilite port = mat_B_ch_2 bundle = control\n#pragma HLS interface s_axilite port = mat_B_ch_3 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_B_ch_0); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_B_ch_1); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_B_ch_2); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_B_ch_3); }\n\n#pragma HLS interface s_axilite port = mat_C_ch_in_0 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_in_1 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_in_2 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_in_3 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_in_4 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_in_5 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_in_6 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_in_7 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_in_0); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_in_1); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_in_2); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_in_3); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_in_4); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_in_5); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_in_6); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_in_7); }\n\n#pragma HLS interface s_axilite port = mat_C_ch_0 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_1 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_2 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_3 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_4 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_5 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_6 bundle = control\n#pragma HLS interface s_axilite port = mat_C_ch_7 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_0); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_1); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_2); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_3); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_4); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_5); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_6); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(mat_C_ch_7); }\n\n#pragma HLS interface s_axilite port = NUM_ITE bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(NUM_ITE); }\n\n#pragma HLS interface s_axilite port = NUM_A_LEN bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(NUM_A_LEN); }\n\n#pragma HLS interface s_axilite port = M bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(M); }\n\n#pragma HLS interface s_axilite port = K bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(K); }\n\n#pragma HLS interface s_axilite port = P_N bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(P_N); }\n\n#pragma HLS interface s_axilite port = alpha_u bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(alpha_u); }\n\n#pragma HLS interface s_axilite port = beta_u bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(beta_u); }\n\n\n#pragma HLS interface s_axilite port = return bundle = control\n}\n\n\n}  // extern \"C\"\n\n",
            "fifos": {
                "PE_inst_Sextans[0]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_edge_list_ptr",
                        0
                    ]
                },
                "PE_inst_Sextans[10]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        9
                    ]
                },
                "PE_inst_Sextans[11]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        10
                    ]
                },
                "PE_inst_Sextans[12]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        11
                    ]
                },
                "PE_inst_Sextans[13]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        12
                    ]
                },
                "PE_inst_Sextans[14]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        13
                    ]
                },
                "PE_inst_Sextans[15]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        14
                    ]
                },
                "PE_inst_Sextans[16]": {
                    "consumed_by": [
                        "black_hole_int",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        15
                    ]
                },
                "PE_inst_Sextans[1]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        0
                    ]
                },
                "PE_inst_Sextans[2]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        1
                    ]
                },
                "PE_inst_Sextans[3]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        2
                    ]
                },
                "PE_inst_Sextans[4]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        3
                    ]
                },
                "PE_inst_Sextans[5]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        4
                    ]
                },
                "PE_inst_Sextans[6]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        5
                    ]
                },
                "PE_inst_Sextans[7]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        6
                    ]
                },
                "PE_inst_Sextans[8]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        7
                    ]
                },
                "PE_inst_Sextans[9]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        8
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[0]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        0
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[10]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        10
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[11]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        11
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[12]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        12
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[13]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        13
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[14]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        14
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[15]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        15
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[1]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        1
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[2]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        2
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[3]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        3
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[4]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        4
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[5]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        5
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[6]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        6
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[7]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        7
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[8]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        8
                    ]
                },
                "PE_inst_to_Cmtx_Sextans[9]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        9
                    ]
                },
                "fifo_A_Sextans[0]": {
                    "consumed_by": [
                        "Scatter_1_2",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        0
                    ]
                },
                "fifo_A_Sextans[1]": {
                    "consumed_by": [
                        "Scatter_1_2",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        1
                    ]
                },
                "fifo_A_Sextans[2]": {
                    "consumed_by": [
                        "Scatter_1_2",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        2
                    ]
                },
                "fifo_A_Sextans[3]": {
                    "consumed_by": [
                        "Scatter_1_2",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        3
                    ]
                },
                "fifo_A_Sextans[4]": {
                    "consumed_by": [
                        "Scatter_1_2",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        4
                    ]
                },
                "fifo_A_Sextans[5]": {
                    "consumed_by": [
                        "Scatter_1_2",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        5
                    ]
                },
                "fifo_A_Sextans[6]": {
                    "consumed_by": [
                        "Scatter_1_2",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        6
                    ]
                },
                "fifo_A_Sextans[7]": {
                    "consumed_by": [
                        "Scatter_1_2",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        7
                    ]
                },
                "fifo_A_pe_Sextans[0]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        0
                    ]
                },
                "fifo_A_pe_Sextans[10]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        5
                    ]
                },
                "fifo_A_pe_Sextans[11]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        5
                    ]
                },
                "fifo_A_pe_Sextans[12]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        6
                    ]
                },
                "fifo_A_pe_Sextans[13]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        6
                    ]
                },
                "fifo_A_pe_Sextans[14]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        7
                    ]
                },
                "fifo_A_pe_Sextans[15]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        7
                    ]
                },
                "fifo_A_pe_Sextans[1]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        0
                    ]
                },
                "fifo_A_pe_Sextans[2]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        1
                    ]
                },
                "fifo_A_pe_Sextans[3]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        1
                    ]
                },
                "fifo_A_pe_Sextans[4]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        2
                    ]
                },
                "fifo_A_pe_Sextans[5]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        2
                    ]
                },
                "fifo_A_pe_Sextans[6]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        3
                    ]
                },
                "fifo_A_pe_Sextans[7]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        3
                    ]
                },
                "fifo_A_pe_Sextans[8]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        4
                    ]
                },
                "fifo_A_pe_Sextans[9]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Scatter_1_2",
                        4
                    ]
                },
                "fifo_B_pe_Sextans[0]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_B",
                        0
                    ]
                },
                "fifo_B_pe_Sextans[10]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        1
                    ]
                },
                "fifo_B_pe_Sextans[11]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        1
                    ]
                },
                "fifo_B_pe_Sextans[12]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        2
                    ]
                },
                "fifo_B_pe_Sextans[13]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        2
                    ]
                },
                "fifo_B_pe_Sextans[14]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        2
                    ]
                },
                "fifo_B_pe_Sextans[15]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        2
                    ]
                },
                "fifo_B_pe_Sextans[16]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        3
                    ]
                },
                "fifo_B_pe_Sextans[17]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        3
                    ]
                },
                "fifo_B_pe_Sextans[18]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        3
                    ]
                },
                "fifo_B_pe_Sextans[19]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        3
                    ]
                },
                "fifo_B_pe_Sextans[1]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_B",
                        1
                    ]
                },
                "fifo_B_pe_Sextans[20]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        4
                    ]
                },
                "fifo_B_pe_Sextans[21]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        4
                    ]
                },
                "fifo_B_pe_Sextans[22]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        4
                    ]
                },
                "fifo_B_pe_Sextans[23]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        4
                    ]
                },
                "fifo_B_pe_Sextans[24]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        5
                    ]
                },
                "fifo_B_pe_Sextans[25]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        5
                    ]
                },
                "fifo_B_pe_Sextans[26]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        5
                    ]
                },
                "fifo_B_pe_Sextans[27]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        5
                    ]
                },
                "fifo_B_pe_Sextans[28]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        6
                    ]
                },
                "fifo_B_pe_Sextans[29]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        6
                    ]
                },
                "fifo_B_pe_Sextans[2]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_B",
                        2
                    ]
                },
                "fifo_B_pe_Sextans[30]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        6
                    ]
                },
                "fifo_B_pe_Sextans[31]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        6
                    ]
                },
                "fifo_B_pe_Sextans[32]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        7
                    ]
                },
                "fifo_B_pe_Sextans[33]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        7
                    ]
                },
                "fifo_B_pe_Sextans[34]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        7
                    ]
                },
                "fifo_B_pe_Sextans[35]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        7
                    ]
                },
                "fifo_B_pe_Sextans[36]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        8
                    ]
                },
                "fifo_B_pe_Sextans[37]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        8
                    ]
                },
                "fifo_B_pe_Sextans[38]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        8
                    ]
                },
                "fifo_B_pe_Sextans[39]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        8
                    ]
                },
                "fifo_B_pe_Sextans[3]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_B",
                        3
                    ]
                },
                "fifo_B_pe_Sextans[40]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        9
                    ]
                },
                "fifo_B_pe_Sextans[41]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        9
                    ]
                },
                "fifo_B_pe_Sextans[42]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        9
                    ]
                },
                "fifo_B_pe_Sextans[43]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        9
                    ]
                },
                "fifo_B_pe_Sextans[44]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        10
                    ]
                },
                "fifo_B_pe_Sextans[45]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        10
                    ]
                },
                "fifo_B_pe_Sextans[46]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        10
                    ]
                },
                "fifo_B_pe_Sextans[47]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        10
                    ]
                },
                "fifo_B_pe_Sextans[48]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        11
                    ]
                },
                "fifo_B_pe_Sextans[49]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        11
                    ]
                },
                "fifo_B_pe_Sextans[4]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        0
                    ]
                },
                "fifo_B_pe_Sextans[50]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        11
                    ]
                },
                "fifo_B_pe_Sextans[51]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        11
                    ]
                },
                "fifo_B_pe_Sextans[52]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        12
                    ]
                },
                "fifo_B_pe_Sextans[53]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        12
                    ]
                },
                "fifo_B_pe_Sextans[54]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        12
                    ]
                },
                "fifo_B_pe_Sextans[55]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        12
                    ]
                },
                "fifo_B_pe_Sextans[56]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        13
                    ]
                },
                "fifo_B_pe_Sextans[57]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        13
                    ]
                },
                "fifo_B_pe_Sextans[58]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        13
                    ]
                },
                "fifo_B_pe_Sextans[59]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        13
                    ]
                },
                "fifo_B_pe_Sextans[5]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        0
                    ]
                },
                "fifo_B_pe_Sextans[60]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        14
                    ]
                },
                "fifo_B_pe_Sextans[61]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        14
                    ]
                },
                "fifo_B_pe_Sextans[62]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        14
                    ]
                },
                "fifo_B_pe_Sextans[63]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        14
                    ]
                },
                "fifo_B_pe_Sextans[64]": {
                    "consumed_by": [
                        "black_hole_float_v16",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        15
                    ]
                },
                "fifo_B_pe_Sextans[65]": {
                    "consumed_by": [
                        "black_hole_float_v16",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        15
                    ]
                },
                "fifo_B_pe_Sextans[66]": {
                    "consumed_by": [
                        "black_hole_float_v16",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        15
                    ]
                },
                "fifo_B_pe_Sextans[67]": {
                    "consumed_by": [
                        "black_hole_float_v16",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        15
                    ]
                },
                "fifo_B_pe_Sextans[6]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        0
                    ]
                },
                "fifo_B_pe_Sextans[7]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        0
                    ]
                },
                "fifo_B_pe_Sextans[8]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        1
                    ]
                },
                "fifo_B_pe_Sextans[9]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        1
                    ]
                },
                "fifo_C_ch_Sextans[0]": {
                    "consumed_by": [
                        "write_C",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvAddFloatv",
                        0
                    ]
                },
                "fifo_C_ch_Sextans[1]": {
                    "consumed_by": [
                        "write_C",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvAddFloatv",
                        1
                    ]
                },
                "fifo_C_ch_Sextans[2]": {
                    "consumed_by": [
                        "write_C",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvAddFloatv",
                        2
                    ]
                },
                "fifo_C_ch_Sextans[3]": {
                    "consumed_by": [
                        "write_C",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvAddFloatv",
                        3
                    ]
                },
                "fifo_C_ch_Sextans[4]": {
                    "consumed_by": [
                        "write_C",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvAddFloatv",
                        4
                    ]
                },
                "fifo_C_ch_Sextans[5]": {
                    "consumed_by": [
                        "write_C",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvAddFloatv",
                        5
                    ]
                },
                "fifo_C_ch_Sextans[6]": {
                    "consumed_by": [
                        "write_C",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvAddFloatv",
                        6
                    ]
                },
                "fifo_C_ch_Sextans[7]": {
                    "consumed_by": [
                        "write_C",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvAddFloatv",
                        7
                    ]
                },
                "fifo_C_ch_result_Sextans[0]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Merger",
                        0
                    ]
                },
                "fifo_C_ch_result_Sextans[1]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Merger",
                        1
                    ]
                },
                "fifo_C_ch_result_Sextans[2]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Merger",
                        2
                    ]
                },
                "fifo_C_ch_result_Sextans[3]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Merger",
                        3
                    ]
                },
                "fifo_C_ch_result_Sextans[4]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Merger",
                        4
                    ]
                },
                "fifo_C_ch_result_Sextans[5]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Merger",
                        5
                    ]
                },
                "fifo_C_ch_result_Sextans[6]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Merger",
                        6
                    ]
                },
                "fifo_C_ch_result_Sextans[7]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Merger",
                        7
                    ]
                },
                "fifo_C_ch_result_alpha_Sextans[0]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        8
                    ]
                },
                "fifo_C_ch_result_alpha_Sextans[1]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        9
                    ]
                },
                "fifo_C_ch_result_alpha_Sextans[2]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        10
                    ]
                },
                "fifo_C_ch_result_alpha_Sextans[3]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        11
                    ]
                },
                "fifo_C_ch_result_alpha_Sextans[4]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        12
                    ]
                },
                "fifo_C_ch_result_alpha_Sextans[5]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        13
                    ]
                },
                "fifo_C_ch_result_alpha_Sextans[6]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        14
                    ]
                },
                "fifo_C_ch_result_alpha_Sextans[7]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        15
                    ]
                },
                "fifo_C_pe_Sextans[0]": {
                    "consumed_by": [
                        "Merger",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        0
                    ]
                },
                "fifo_C_pe_Sextans[10]": {
                    "consumed_by": [
                        "Merger",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        10
                    ]
                },
                "fifo_C_pe_Sextans[11]": {
                    "consumed_by": [
                        "Merger",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        11
                    ]
                },
                "fifo_C_pe_Sextans[12]": {
                    "consumed_by": [
                        "Merger",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        12
                    ]
                },
                "fifo_C_pe_Sextans[13]": {
                    "consumed_by": [
                        "Merger",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        13
                    ]
                },
                "fifo_C_pe_Sextans[14]": {
                    "consumed_by": [
                        "Merger",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        14
                    ]
                },
                "fifo_C_pe_Sextans[15]": {
                    "consumed_by": [
                        "Merger",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        15
                    ]
                },
                "fifo_C_pe_Sextans[1]": {
                    "consumed_by": [
                        "Merger",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        1
                    ]
                },
                "fifo_C_pe_Sextans[2]": {
                    "consumed_by": [
                        "Merger",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        2
                    ]
                },
                "fifo_C_pe_Sextans[3]": {
                    "consumed_by": [
                        "Merger",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        3
                    ]
                },
                "fifo_C_pe_Sextans[4]": {
                    "consumed_by": [
                        "Merger",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        4
                    ]
                },
                "fifo_C_pe_Sextans[5]": {
                    "consumed_by": [
                        "Merger",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        5
                    ]
                },
                "fifo_C_pe_Sextans[6]": {
                    "consumed_by": [
                        "Merger",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        6
                    ]
                },
                "fifo_C_pe_Sextans[7]": {
                    "consumed_by": [
                        "Merger",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        7
                    ]
                },
                "fifo_C_pe_Sextans[8]": {
                    "consumed_by": [
                        "Merger",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        8
                    ]
                },
                "fifo_C_pe_Sextans[9]": {
                    "consumed_by": [
                        "Merger",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Cmtx",
                        9
                    ]
                },
                "fifo_C_read_in_Sextans[0]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        0
                    ]
                },
                "fifo_C_read_in_Sextans[1]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        1
                    ]
                },
                "fifo_C_read_in_Sextans[2]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        2
                    ]
                },
                "fifo_C_read_in_Sextans[3]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        3
                    ]
                },
                "fifo_C_read_in_Sextans[4]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        4
                    ]
                },
                "fifo_C_read_in_Sextans[5]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        5
                    ]
                },
                "fifo_C_read_in_Sextans[6]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        6
                    ]
                },
                "fifo_C_read_in_Sextans[7]": {
                    "consumed_by": [
                        "FloatvMultConst",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        7
                    ]
                },
                "fifo_C_read_in_beta_Sextans[0]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        0
                    ]
                },
                "fifo_C_read_in_beta_Sextans[1]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        1
                    ]
                },
                "fifo_C_read_in_beta_Sextans[2]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        2
                    ]
                },
                "fifo_C_read_in_beta_Sextans[3]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        3
                    ]
                },
                "fifo_C_read_in_beta_Sextans[4]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        4
                    ]
                },
                "fifo_C_read_in_beta_Sextans[5]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        5
                    ]
                },
                "fifo_C_read_in_beta_Sextans[6]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        6
                    ]
                },
                "fifo_C_read_in_beta_Sextans[7]": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        7
                    ]
                },
                "fifo_aBvec_Sextans[0]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        0
                    ]
                },
                "fifo_aBvec_Sextans[10]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        2
                    ]
                },
                "fifo_aBvec_Sextans[11]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        2
                    ]
                },
                "fifo_aBvec_Sextans[12]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        3
                    ]
                },
                "fifo_aBvec_Sextans[13]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        3
                    ]
                },
                "fifo_aBvec_Sextans[14]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        3
                    ]
                },
                "fifo_aBvec_Sextans[15]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        3
                    ]
                },
                "fifo_aBvec_Sextans[16]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        4
                    ]
                },
                "fifo_aBvec_Sextans[17]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        4
                    ]
                },
                "fifo_aBvec_Sextans[18]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        4
                    ]
                },
                "fifo_aBvec_Sextans[19]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        4
                    ]
                },
                "fifo_aBvec_Sextans[1]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        0
                    ]
                },
                "fifo_aBvec_Sextans[20]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        5
                    ]
                },
                "fifo_aBvec_Sextans[21]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        5
                    ]
                },
                "fifo_aBvec_Sextans[22]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        5
                    ]
                },
                "fifo_aBvec_Sextans[23]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        5
                    ]
                },
                "fifo_aBvec_Sextans[24]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        6
                    ]
                },
                "fifo_aBvec_Sextans[25]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        6
                    ]
                },
                "fifo_aBvec_Sextans[26]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        6
                    ]
                },
                "fifo_aBvec_Sextans[27]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        6
                    ]
                },
                "fifo_aBvec_Sextans[28]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        7
                    ]
                },
                "fifo_aBvec_Sextans[29]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        7
                    ]
                },
                "fifo_aBvec_Sextans[2]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        0
                    ]
                },
                "fifo_aBvec_Sextans[30]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        7
                    ]
                },
                "fifo_aBvec_Sextans[31]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        7
                    ]
                },
                "fifo_aBvec_Sextans[32]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        8
                    ]
                },
                "fifo_aBvec_Sextans[33]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        8
                    ]
                },
                "fifo_aBvec_Sextans[34]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        8
                    ]
                },
                "fifo_aBvec_Sextans[35]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        8
                    ]
                },
                "fifo_aBvec_Sextans[36]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        9
                    ]
                },
                "fifo_aBvec_Sextans[37]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        9
                    ]
                },
                "fifo_aBvec_Sextans[38]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        9
                    ]
                },
                "fifo_aBvec_Sextans[39]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        9
                    ]
                },
                "fifo_aBvec_Sextans[3]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        0
                    ]
                },
                "fifo_aBvec_Sextans[40]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        10
                    ]
                },
                "fifo_aBvec_Sextans[41]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        10
                    ]
                },
                "fifo_aBvec_Sextans[42]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        10
                    ]
                },
                "fifo_aBvec_Sextans[43]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        10
                    ]
                },
                "fifo_aBvec_Sextans[44]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        11
                    ]
                },
                "fifo_aBvec_Sextans[45]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        11
                    ]
                },
                "fifo_aBvec_Sextans[46]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        11
                    ]
                },
                "fifo_aBvec_Sextans[47]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        11
                    ]
                },
                "fifo_aBvec_Sextans[48]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        12
                    ]
                },
                "fifo_aBvec_Sextans[49]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        12
                    ]
                },
                "fifo_aBvec_Sextans[4]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        1
                    ]
                },
                "fifo_aBvec_Sextans[50]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        12
                    ]
                },
                "fifo_aBvec_Sextans[51]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        12
                    ]
                },
                "fifo_aBvec_Sextans[52]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        13
                    ]
                },
                "fifo_aBvec_Sextans[53]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        13
                    ]
                },
                "fifo_aBvec_Sextans[54]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        13
                    ]
                },
                "fifo_aBvec_Sextans[55]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        13
                    ]
                },
                "fifo_aBvec_Sextans[56]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        14
                    ]
                },
                "fifo_aBvec_Sextans[57]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        14
                    ]
                },
                "fifo_aBvec_Sextans[58]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        14
                    ]
                },
                "fifo_aBvec_Sextans[59]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        14
                    ]
                },
                "fifo_aBvec_Sextans[5]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        1
                    ]
                },
                "fifo_aBvec_Sextans[60]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        15
                    ]
                },
                "fifo_aBvec_Sextans[61]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        15
                    ]
                },
                "fifo_aBvec_Sextans[62]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        15
                    ]
                },
                "fifo_aBvec_Sextans[63]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        15
                    ]
                },
                "fifo_aBvec_Sextans[6]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        1
                    ]
                },
                "fifo_aBvec_Sextans[7]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        1
                    ]
                },
                "fifo_aBvec_Sextans[8]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        2
                    ]
                },
                "fifo_aBvec_Sextans[9]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        2
                    ]
                },
                "fifo_edge_list_ptr_Sextans[0]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_edge_list_ptr",
                        0
                    ]
                },
                "fifo_edge_list_ptr_Sextans[10]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        9
                    ]
                },
                "fifo_edge_list_ptr_Sextans[11]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        10
                    ]
                },
                "fifo_edge_list_ptr_Sextans[12]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        11
                    ]
                },
                "fifo_edge_list_ptr_Sextans[13]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        12
                    ]
                },
                "fifo_edge_list_ptr_Sextans[14]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        13
                    ]
                },
                "fifo_edge_list_ptr_Sextans[15]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        14
                    ]
                },
                "fifo_edge_list_ptr_Sextans[16]": {
                    "consumed_by": [
                        "black_hole_int",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        15
                    ]
                },
                "fifo_edge_list_ptr_Sextans[1]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        0
                    ]
                },
                "fifo_edge_list_ptr_Sextans[2]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        1
                    ]
                },
                "fifo_edge_list_ptr_Sextans[3]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        2
                    ]
                },
                "fifo_edge_list_ptr_Sextans[4]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        3
                    ]
                },
                "fifo_edge_list_ptr_Sextans[5]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        4
                    ]
                },
                "fifo_edge_list_ptr_Sextans[6]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        5
                    ]
                },
                "fifo_edge_list_ptr_Sextans[7]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        6
                    ]
                },
                "fifo_edge_list_ptr_Sextans[8]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        7
                    ]
                },
                "fifo_edge_list_ptr_Sextans[9]": {
                    "consumed_by": [
                        "PEG_Bmtx",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        8
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[0]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        0
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[10]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        10
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[11]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        11
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[12]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        12
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[13]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        13
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[14]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        14
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[15]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        15
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[1]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        1
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[2]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        2
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[3]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        3
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[4]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        4
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[5]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        5
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[6]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        6
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[7]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        7
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[8]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        8
                    ]
                },
                "fifo_edge_list_ptr_to_Cmtx_Sextans[9]": {
                    "consumed_by": [
                        "PEG_Cmtx",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Bmtx",
                        9
                    ]
                },
                "wrC_inst_Sextans[0]": {
                    "consumed_by": [
                        "write_C",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        0
                    ]
                },
                "wrC_inst_Sextans[1]": {
                    "consumed_by": [
                        "write_C",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        1
                    ]
                },
                "wrC_inst_Sextans[2]": {
                    "consumed_by": [
                        "write_C",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        2
                    ]
                },
                "wrC_inst_Sextans[3]": {
                    "consumed_by": [
                        "write_C",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        3
                    ]
                },
                "wrC_inst_Sextans[4]": {
                    "consumed_by": [
                        "write_C",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        4
                    ]
                },
                "wrC_inst_Sextans[5]": {
                    "consumed_by": [
                        "write_C",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        5
                    ]
                },
                "wrC_inst_Sextans[6]": {
                    "consumed_by": [
                        "write_C",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        6
                    ]
                },
                "wrC_inst_Sextans[7]": {
                    "consumed_by": [
                        "write_C",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_C",
                        7
                    ]
                }
            },
            "frt_interface": "#include <sstream>\n#include <stdexcept>\n#include <frt.h>\n\n\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) {\n#define TAPAB_APP \"TAPAB_Sextans\"\n#define TAPAB \"TAPAB\"\n  const char* _tapa_bitstream = nullptr;\n  if ((_tapa_bitstream = getenv(TAPAB_APP)) ||\n      (_tapa_bitstream = getenv(TAPAB))) {\n    fpga::Instance _tapa_instance(_tapa_bitstream);\n    int _tapa_arg_index = 0;\n    for (const auto& _tapa_arg_info : _tapa_instance.GetArgsInfo()) {\n      if (false) {\n      } else if (_tapa_arg_info.name == \"edge_list_ptr\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ptr.get(), edge_list_ptr.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_0\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[0].get(), edge_list_ch[0].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_1\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[1].get(), edge_list_ch[1].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_2\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[2].get(), edge_list_ch[2].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_3\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[3].get(), edge_list_ch[3].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_4\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[4].get(), edge_list_ch[4].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_5\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[5].get(), edge_list_ch[5].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_6\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[6].get(), edge_list_ch[6].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_7\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[7].get(), edge_list_ch[7].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_B_ch_0\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_B_ch[0].get(), mat_B_ch[0].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_B_ch_1\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_B_ch[1].get(), mat_B_ch[1].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_B_ch_2\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_B_ch[2].get(), mat_B_ch[2].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_B_ch_3\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_B_ch[3].get(), mat_B_ch[3].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_in_0\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch_in[0].get(), mat_C_ch_in[0].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_in_1\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch_in[1].get(), mat_C_ch_in[1].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_in_2\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch_in[2].get(), mat_C_ch_in[2].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_in_3\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch_in[3].get(), mat_C_ch_in[3].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_in_4\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch_in[4].get(), mat_C_ch_in[4].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_in_5\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch_in[5].get(), mat_C_ch_in[5].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_in_6\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch_in[6].get(), mat_C_ch_in[6].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_in_7\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch_in[7].get(), mat_C_ch_in[7].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_0\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch[0].get(), mat_C_ch[0].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_1\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch[1].get(), mat_C_ch[1].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_2\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch[2].get(), mat_C_ch[2].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_3\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch[3].get(), mat_C_ch[3].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_4\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch[4].get(), mat_C_ch[4].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_5\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch[5].get(), mat_C_ch[5].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_6\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch[6].get(), mat_C_ch[6].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"mat_C_ch_7\") {\n        auto _tapa_arg = fpga::ReadWrite(mat_C_ch[7].get(), mat_C_ch[7].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"NUM_ITE\") {\n        _tapa_instance.SetArg(_tapa_arg_index, NUM_ITE);\n      } else if (_tapa_arg_info.name == \"NUM_A_LEN\") {\n        _tapa_instance.SetArg(_tapa_arg_index, NUM_A_LEN);\n      } else if (_tapa_arg_info.name == \"M\") {\n        _tapa_instance.SetArg(_tapa_arg_index, M);\n      } else if (_tapa_arg_info.name == \"K\") {\n        _tapa_instance.SetArg(_tapa_arg_index, K);\n      } else if (_tapa_arg_info.name == \"P_N\") {\n        _tapa_instance.SetArg(_tapa_arg_index, P_N);\n      } else if (_tapa_arg_info.name == \"alpha_u\") {\n        _tapa_instance.SetArg(_tapa_arg_index, alpha_u);\n      } else if (_tapa_arg_info.name == \"beta_u\") {\n        _tapa_instance.SetArg(_tapa_arg_index, beta_u);\n      } else {\n        std::stringstream ss;\n        ss << \"unknown argument: \" << _tapa_arg_info;\n        throw std::runtime_error(ss.str());\n      }\n      ++_tapa_arg_index;\n    }\n    _tapa_instance.WriteToDevice();\n    _tapa_instance.Exec();\n    _tapa_instance.ReadFromDevice();\n    _tapa_instance.Finish();\n  } else {\n    throw std::runtime_error(\"no bitstream found; please set `\" TAPAB_APP\n                             \"` or `\" TAPAB \"`\");\n  }\n}\n",
            "level": "upper",
            "ports": [
                {
                    "cat": "mmap",
                    "name": "edge_list_ptr",
                    "type": "int*",
                    "width": 32
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[0]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[1]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[2]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[3]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[4]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[5]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[6]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[7]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_B_ch[0]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_B_ch[1]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_B_ch[2]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_B_ch[3]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch_in[0]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch_in[1]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch_in[2]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch_in[3]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch_in[4]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch_in[5]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch_in[6]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch_in[7]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch[0]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch[1]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch[2]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch[3]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch[4]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch[5]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch[6]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "mat_C_ch[7]",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "scalar",
                    "name": "NUM_ITE",
                    "type": "const int",
                    "width": 32
                },
                {
                    "cat": "scalar",
                    "name": "NUM_A_LEN",
                    "type": "const int",
                    "width": 32
                },
                {
                    "cat": "scalar",
                    "name": "M",
                    "type": "const int",
                    "width": 32
                },
                {
                    "cat": "scalar",
                    "name": "K",
                    "type": "const int",
                    "width": 32
                },
                {
                    "cat": "scalar",
                    "name": "P_N",
                    "type": "const int",
                    "width": 32
                },
                {
                    "cat": "scalar",
                    "name": "alpha_u",
                    "type": "const int",
                    "width": 32
                },
                {
                    "cat": "scalar",
                    "name": "beta_u",
                    "type": "const int",
                    "width": 32
                }
            ],
            "target": "hls",
            "tasks": {
                "FloatvAddFloatv": [
                    {
                        "args": {
                            "fifo_in0": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[0]",
                                "cat": "istream"
                            },
                            "fifo_in1": {
                                "arg": "fifo_C_read_in_beta_Sextans[0]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_Sextans[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in0": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[1]",
                                "cat": "istream"
                            },
                            "fifo_in1": {
                                "arg": "fifo_C_read_in_beta_Sextans[1]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_Sextans[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in0": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[2]",
                                "cat": "istream"
                            },
                            "fifo_in1": {
                                "arg": "fifo_C_read_in_beta_Sextans[2]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_Sextans[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in0": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[3]",
                                "cat": "istream"
                            },
                            "fifo_in1": {
                                "arg": "fifo_C_read_in_beta_Sextans[3]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_Sextans[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in0": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[4]",
                                "cat": "istream"
                            },
                            "fifo_in1": {
                                "arg": "fifo_C_read_in_beta_Sextans[4]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_Sextans[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in0": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[5]",
                                "cat": "istream"
                            },
                            "fifo_in1": {
                                "arg": "fifo_C_read_in_beta_Sextans[5]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_Sextans[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in0": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[6]",
                                "cat": "istream"
                            },
                            "fifo_in1": {
                                "arg": "fifo_C_read_in_beta_Sextans[6]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_Sextans[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in0": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[7]",
                                "cat": "istream"
                            },
                            "fifo_in1": {
                                "arg": "fifo_C_read_in_beta_Sextans[7]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_Sextans[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    }
                ],
                "FloatvMultConst": [
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "beta_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_read_in_Sextans[0]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_read_in_beta_Sextans[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "beta_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_read_in_Sextans[1]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_read_in_beta_Sextans[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "beta_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_read_in_Sextans[2]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_read_in_beta_Sextans[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "beta_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_read_in_Sextans[3]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_read_in_beta_Sextans[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "beta_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_read_in_Sextans[4]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_read_in_beta_Sextans[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "beta_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_read_in_Sextans[5]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_read_in_beta_Sextans[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "beta_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_read_in_Sextans[6]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_read_in_beta_Sextans[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "beta_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_read_in_Sextans[7]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_read_in_beta_Sextans[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "alpha_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_ch_result_Sextans[0]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "alpha_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_ch_result_Sextans[1]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "alpha_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_ch_result_Sextans[2]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "alpha_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_ch_result_Sextans[3]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "alpha_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_ch_result_Sextans[4]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "alpha_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_ch_result_Sextans[5]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "alpha_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_ch_result_Sextans[6]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "alpha_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_C_ch_result_Sextans[7]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_alpha_Sextans[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ],
                "Merger": [
                    {
                        "args": {
                            "fifo_in[0]": {
                                "arg": "fifo_C_pe_Sextans[0]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_C_pe_Sextans[1]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_Sextans[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in[0]": {
                                "arg": "fifo_C_pe_Sextans[2]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_C_pe_Sextans[3]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_Sextans[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in[0]": {
                                "arg": "fifo_C_pe_Sextans[4]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_C_pe_Sextans[5]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_Sextans[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in[0]": {
                                "arg": "fifo_C_pe_Sextans[6]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_C_pe_Sextans[7]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_Sextans[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in[0]": {
                                "arg": "fifo_C_pe_Sextans[8]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_C_pe_Sextans[9]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_Sextans[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in[0]": {
                                "arg": "fifo_C_pe_Sextans[10]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_C_pe_Sextans[11]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_Sextans[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in[0]": {
                                "arg": "fifo_C_pe_Sextans[12]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_C_pe_Sextans[13]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_Sextans[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in[0]": {
                                "arg": "fifo_C_pe_Sextans[14]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_C_pe_Sextans[15]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_C_ch_result_Sextans[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    }
                ],
                "PEG_Bmtx": [
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[0]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[1]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[0]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[0]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[0]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[1]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[2]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[3]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[4]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[5]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[6]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[7]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[0]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[1]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[2]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[3]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[0]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[1]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[1]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[2]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[1]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[1]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[4]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[5]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[6]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[7]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[8]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[9]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[10]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[11]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[4]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[5]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[6]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[7]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[1]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[2]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[2]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[3]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[2]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[2]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[8]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[9]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[10]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[11]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[12]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[13]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[14]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[15]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[8]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[9]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[10]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[11]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[2]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[3]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[3]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[4]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[3]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[3]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[12]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[13]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[14]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[15]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[16]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[17]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[18]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[19]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[12]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[13]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[14]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[15]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[3]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[4]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[4]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[5]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[4]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[4]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[16]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[17]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[18]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[19]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[20]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[21]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[22]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[23]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[16]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[17]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[18]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[19]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[4]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[5]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[5]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[6]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[5]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[5]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[20]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[21]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[22]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[23]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[24]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[25]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[26]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[27]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[20]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[21]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[22]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[23]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[5]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[6]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[6]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[7]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[6]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[6]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[24]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[25]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[26]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[27]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[28]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[29]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[30]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[31]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[24]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[25]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[26]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[27]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[6]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[7]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[7]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[8]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[7]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[7]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[28]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[29]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[30]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[31]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[32]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[33]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[34]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[35]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[28]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[29]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[30]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[31]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[7]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[8]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[8]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[9]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[8]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[8]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[32]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[33]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[34]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[35]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[36]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[37]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[38]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[39]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[32]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[33]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[34]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[35]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[8]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[9]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[8]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[9]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[10]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[9]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[9]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[36]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[37]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[38]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[39]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[40]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[41]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[42]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[43]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[36]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[37]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[38]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[39]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[9]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[10]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[9]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[10]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[11]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[10]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[10]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[40]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[41]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[42]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[43]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[44]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[45]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[46]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[47]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[40]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[41]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[42]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[43]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[10]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[11]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[10]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[11]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[12]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[11]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[11]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[44]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[45]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[46]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[47]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[48]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[49]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[50]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[51]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[44]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[45]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[46]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[47]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[11]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[12]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[11]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[12]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[13]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[12]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[12]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[48]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[49]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[50]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[51]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[52]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[53]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[54]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[55]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[48]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[49]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[50]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[51]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[12]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[13]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[12]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[13]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[14]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[13]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[13]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[52]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[53]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[54]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[55]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[56]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[57]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[58]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[59]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[52]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[53]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[54]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[55]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[13]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[14]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[13]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[14]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[15]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[14]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[14]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[56]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[57]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[58]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[59]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[60]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[61]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[62]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[63]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[56]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[57]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[58]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[59]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[14]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[15]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[14]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_Sextans[15]",
                                "cat": "istream"
                            },
                            "PE_inst_out": {
                                "arg": "PE_inst_Sextans[16]",
                                "cat": "ostream"
                            },
                            "PE_inst_to_Cmtx": {
                                "arg": "PE_inst_to_Cmtx_Sextans[15]",
                                "cat": "ostream"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_pe_Sextans[15]",
                                "cat": "istream"
                            },
                            "fifo_B_in[0]": {
                                "arg": "fifo_B_pe_Sextans[60]",
                                "cat": "istream"
                            },
                            "fifo_B_in[1]": {
                                "arg": "fifo_B_pe_Sextans[61]",
                                "cat": "istream"
                            },
                            "fifo_B_in[2]": {
                                "arg": "fifo_B_pe_Sextans[62]",
                                "cat": "istream"
                            },
                            "fifo_B_in[3]": {
                                "arg": "fifo_B_pe_Sextans[63]",
                                "cat": "istream"
                            },
                            "fifo_B_out[0]": {
                                "arg": "fifo_B_pe_Sextans[64]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[1]": {
                                "arg": "fifo_B_pe_Sextans[65]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[2]": {
                                "arg": "fifo_B_pe_Sextans[66]",
                                "cat": "ostream"
                            },
                            "fifo_B_out[3]": {
                                "arg": "fifo_B_pe_Sextans[67]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[60]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[61]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[62]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[63]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[15]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "fifo_edge_list_ptr_Sextans[16]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Cmtx": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[15]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ],
                "PEG_Cmtx": [
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[0]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[0]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[0]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[1]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[2]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[3]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[0]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[1]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[1]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[4]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[5]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[6]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[7]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[1]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[2]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[2]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[8]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[9]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[10]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[11]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[2]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[3]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[3]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[12]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[13]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[14]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[15]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[3]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[4]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[4]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[16]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[17]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[18]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[19]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[4]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[5]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[5]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[20]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[21]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[22]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[23]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[5]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[6]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[6]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[24]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[25]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[26]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[27]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[6]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[7]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[7]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[28]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[29]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[30]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[31]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[7]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[8]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[8]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[32]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[33]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[34]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[35]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[8]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[9]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[9]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[36]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[37]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[38]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[39]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[9]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[10]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[10]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[40]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[41]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[42]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[43]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[10]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[11]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[11]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[44]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[45]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[46]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[47]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[11]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[12]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[12]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[48]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[49]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[50]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[51]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[12]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[13]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[13]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[52]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[53]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[54]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[55]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[13]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[14]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[14]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[56]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[57]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[58]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[59]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[14]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_inst_in": {
                                "arg": "PE_inst_to_Cmtx_Sextans[15]",
                                "cat": "istream"
                            },
                            "fifo_C_out": {
                                "arg": "fifo_C_pe_Sextans[15]",
                                "cat": "ostream"
                            },
                            "fifo_aBvec[0]": {
                                "arg": "fifo_aBvec_Sextans[60]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[1]": {
                                "arg": "fifo_aBvec_Sextans[61]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[2]": {
                                "arg": "fifo_aBvec_Sextans[62]",
                                "cat": "istream"
                            },
                            "fifo_aBvec[3]": {
                                "arg": "fifo_aBvec_Sextans[63]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "fifo_edge_list_ptr_to_Cmtx_Sextans[15]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    }
                ],
                "Scatter_1_2": [
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_A_Sextans[0]",
                                "cat": "istream"
                            },
                            "fifo_out[0]": {
                                "arg": "fifo_A_pe_Sextans[0]",
                                "cat": "ostream"
                            },
                            "fifo_out[1]": {
                                "arg": "fifo_A_pe_Sextans[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_A_Sextans[1]",
                                "cat": "istream"
                            },
                            "fifo_out[0]": {
                                "arg": "fifo_A_pe_Sextans[2]",
                                "cat": "ostream"
                            },
                            "fifo_out[1]": {
                                "arg": "fifo_A_pe_Sextans[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_A_Sextans[2]",
                                "cat": "istream"
                            },
                            "fifo_out[0]": {
                                "arg": "fifo_A_pe_Sextans[4]",
                                "cat": "ostream"
                            },
                            "fifo_out[1]": {
                                "arg": "fifo_A_pe_Sextans[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_A_Sextans[3]",
                                "cat": "istream"
                            },
                            "fifo_out[0]": {
                                "arg": "fifo_A_pe_Sextans[6]",
                                "cat": "ostream"
                            },
                            "fifo_out[1]": {
                                "arg": "fifo_A_pe_Sextans[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_A_Sextans[4]",
                                "cat": "istream"
                            },
                            "fifo_out[0]": {
                                "arg": "fifo_A_pe_Sextans[8]",
                                "cat": "ostream"
                            },
                            "fifo_out[1]": {
                                "arg": "fifo_A_pe_Sextans[9]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_A_Sextans[5]",
                                "cat": "istream"
                            },
                            "fifo_out[0]": {
                                "arg": "fifo_A_pe_Sextans[10]",
                                "cat": "ostream"
                            },
                            "fifo_out[1]": {
                                "arg": "fifo_A_pe_Sextans[11]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_A_Sextans[6]",
                                "cat": "istream"
                            },
                            "fifo_out[0]": {
                                "arg": "fifo_A_pe_Sextans[12]",
                                "cat": "ostream"
                            },
                            "fifo_out[1]": {
                                "arg": "fifo_A_pe_Sextans[13]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_A_Sextans[7]",
                                "cat": "istream"
                            },
                            "fifo_out[0]": {
                                "arg": "fifo_A_pe_Sextans[14]",
                                "cat": "ostream"
                            },
                            "fifo_out[1]": {
                                "arg": "fifo_A_pe_Sextans[15]",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    }
                ],
                "black_hole_float_v16": [
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_B_pe_Sextans[64]",
                                "cat": "istream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_B_pe_Sextans[65]",
                                "cat": "istream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_B_pe_Sextans[66]",
                                "cat": "istream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_B_pe_Sextans[67]",
                                "cat": "istream"
                            }
                        },
                        "step": -1
                    }
                ],
                "black_hole_int": [
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "PE_inst_Sextans[16]",
                                "cat": "istream"
                            }
                        },
                        "step": -1
                    },
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_edge_list_ptr_Sextans[16]",
                                "cat": "istream"
                            }
                        },
                        "step": -1
                    }
                ],
                "read_A": [
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[0]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Sextans[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[1]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Sextans[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[2]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Sextans[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[3]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Sextans[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[4]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Sextans[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[5]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Sextans[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[6]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Sextans[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[7]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Sextans[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ],
                "read_B": [
                    {
                        "args": {
                            "B": {
                                "arg": "mat_B_ch[0]",
                                "cat": "async_mmap"
                            },
                            "K": {
                                "arg": "K",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_B": {
                                "arg": "fifo_B_pe_Sextans[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "B": {
                                "arg": "mat_B_ch[1]",
                                "cat": "async_mmap"
                            },
                            "K": {
                                "arg": "K",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_B": {
                                "arg": "fifo_B_pe_Sextans[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "B": {
                                "arg": "mat_B_ch[2]",
                                "cat": "async_mmap"
                            },
                            "K": {
                                "arg": "K",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_B": {
                                "arg": "fifo_B_pe_Sextans[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "B": {
                                "arg": "mat_B_ch[3]",
                                "cat": "async_mmap"
                            },
                            "K": {
                                "arg": "K",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_B": {
                                "arg": "fifo_B_pe_Sextans[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ],
                "read_C": [
                    {
                        "args": {
                            "C": {
                                "arg": "mat_C_ch_in[0]",
                                "cat": "async_mmap"
                            },
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_read_in_Sextans[0]",
                                "cat": "ostream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C": {
                                "arg": "mat_C_ch_in[1]",
                                "cat": "async_mmap"
                            },
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_read_in_Sextans[1]",
                                "cat": "ostream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C": {
                                "arg": "mat_C_ch_in[2]",
                                "cat": "async_mmap"
                            },
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_read_in_Sextans[2]",
                                "cat": "ostream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C": {
                                "arg": "mat_C_ch_in[3]",
                                "cat": "async_mmap"
                            },
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_read_in_Sextans[3]",
                                "cat": "ostream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C": {
                                "arg": "mat_C_ch_in[4]",
                                "cat": "async_mmap"
                            },
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_read_in_Sextans[4]",
                                "cat": "ostream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C": {
                                "arg": "mat_C_ch_in[5]",
                                "cat": "async_mmap"
                            },
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_read_in_Sextans[5]",
                                "cat": "ostream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C": {
                                "arg": "mat_C_ch_in[6]",
                                "cat": "async_mmap"
                            },
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_read_in_Sextans[6]",
                                "cat": "ostream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C": {
                                "arg": "mat_C_ch_in[7]",
                                "cat": "async_mmap"
                            },
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_read_in_Sextans[7]",
                                "cat": "ostream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ],
                "read_edge_list_ptr": [
                    {
                        "args": {
                            "K": {
                                "arg": "K",
                                "cat": "scalar"
                            },
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "PE_inst": {
                                "arg": "PE_inst_Sextans[0]",
                                "cat": "ostream"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "edge_list_ptr": {
                                "arg": "edge_list_ptr",
                                "cat": "async_mmap"
                            },
                            "fifo_edge_list_ptr": {
                                "arg": "fifo_edge_list_ptr_Sextans[0]",
                                "cat": "ostream"
                            },
                            "num_ite": {
                                "arg": "NUM_ITE",
                                "cat": "scalar"
                            }
                        },
                        "step": 0
                    }
                ],
                "write_C": [
                    {
                        "args": {
                            "C_out": {
                                "arg": "mat_C_ch[0]",
                                "cat": "async_mmap"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_ch_Sextans[0]",
                                "cat": "istream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[0]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C_out": {
                                "arg": "mat_C_ch[1]",
                                "cat": "async_mmap"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_ch_Sextans[1]",
                                "cat": "istream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[1]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C_out": {
                                "arg": "mat_C_ch[2]",
                                "cat": "async_mmap"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_ch_Sextans[2]",
                                "cat": "istream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[2]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C_out": {
                                "arg": "mat_C_ch[3]",
                                "cat": "async_mmap"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_ch_Sextans[3]",
                                "cat": "istream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[3]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C_out": {
                                "arg": "mat_C_ch[4]",
                                "cat": "async_mmap"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_ch_Sextans[4]",
                                "cat": "istream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[4]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C_out": {
                                "arg": "mat_C_ch[5]",
                                "cat": "async_mmap"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_ch_Sextans[5]",
                                "cat": "istream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[5]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C_out": {
                                "arg": "mat_C_ch[6]",
                                "cat": "async_mmap"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_ch_Sextans[6]",
                                "cat": "istream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[6]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "C_out": {
                                "arg": "mat_C_ch[7]",
                                "cat": "async_mmap"
                            },
                            "fifo_C": {
                                "arg": "fifo_C_ch_Sextans[7]",
                                "cat": "istream"
                            },
                            "wrC_inst": {
                                "arg": "wrC_inst_Sextans[7]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    }
                ]
            },
            "vendor": "xilinx"
        },
        "black_hole_float_v16": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) {\n#pragma HLS disaggregate variable = fifo_in\n#pragma HLS interface ap_fifo port = fifo_in._\n#pragma HLS aggregate variable = fifo_in._ bit\n#pragma HLS interface ap_fifo port = fifo_in._peek\n#pragma HLS aggregate variable = fifo_in._peek bit\nvoid(fifo_in._.empty());\nvoid(fifo_in._peek.empty());\n\n  for (;;) {\n#pragma HLS pipeline style = stp II = 1\n    fifo_in.read(nullptr);\n  }\n}\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "black_hole_int": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) {\n#pragma HLS disaggregate variable = fifo_in\n#pragma HLS interface ap_fifo port = fifo_in._\n#pragma HLS aggregate variable = fifo_in._ bit\n#pragma HLS interface ap_fifo port = fifo_in._peek\n#pragma HLS aggregate variable = fifo_in._peek bit\nvoid(fifo_in._.empty());\nvoid(fifo_in._peek.empty());\n\n  for (;;) {\n#pragma HLS pipeline style = stp II = 1\n    fifo_in.read(nullptr);\n  }\n}\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "read_A": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(tapa::async_mmap<ap_uint<512>> &A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) {\n#pragma HLS disaggregate variable = A\n#pragma HLS interface ap_fifo port = A.read_addr._\n#pragma HLS aggregate variable = A.read_addr._  bit\n#pragma HLS interface ap_fifo port = A.read_data._\n#pragma HLS aggregate variable = A.read_data._  bit\n#pragma HLS interface ap_fifo port = A.write_addr._\n#pragma HLS aggregate variable = A.write_addr._  bit\n#pragma HLS interface ap_fifo port = A.write_data._\n#pragma HLS aggregate variable = A.write_data._  bit\n#pragma HLS interface ap_fifo port = A.write_resp._\n#pragma HLS aggregate variable = A.write_resp._  bit\n#pragma HLS disaggregate variable = A .read_data\n#pragma HLS interface ap_fifo port = A.read_data._peek\n#pragma HLS aggregate variable = A.read_data._peek bit\n#pragma HLS disaggregate variable = A .write_resp\n#pragma HLS interface ap_fifo port = A.write_resp._peek\n#pragma HLS aggregate variable = A.write_resp._peek bit\nvoid(A.read_addr._.full());\nvoid(A.read_data._.empty());\nvoid(A.read_data._peek.empty());\nvoid(A.write_addr._.full());\nvoid(A.write_data._.full());\nvoid(A.write_resp._.empty());\nvoid(A.write_resp._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_A\n#pragma HLS interface ap_fifo port = fifo_A._\n#pragma HLS aggregate variable = fifo_A._ bit\nvoid(fifo_A._.full());\n\n\n\n  const int N16 = P_N >> 16;\n  const int rp_time = (N16 == 0) ? 1 : N16;\n  const int N = P_N & 0xFFFF;\n  const int rp_time_N = rp_time * ((N + 7) >> 3);\nl_rp:\n  for (int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min = 1 max = 16\n  rd_A:\n    for (int i_req = 0, i_resp = 0; i_resp < A_len;) {\n#pragma HLS loop_tripcount min = 1 max = 10000\n#pragma HLS pipeline style = stp II = 1\n      async_read(A, fifo_A, A_len, i_req, i_resp);\n    }\n  }\n}\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "read_B": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(tapa::async_mmap<float_v16> &B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) {\n#pragma HLS disaggregate variable = B\n#pragma HLS interface ap_fifo port = B.read_addr._\n#pragma HLS aggregate variable = B.read_addr._  bit\n#pragma HLS interface ap_fifo port = B.read_data._\n#pragma HLS aggregate variable = B.read_data._  bit\n#pragma HLS interface ap_fifo port = B.write_addr._\n#pragma HLS aggregate variable = B.write_addr._  bit\n#pragma HLS interface ap_fifo port = B.write_data._\n#pragma HLS aggregate variable = B.write_data._  bit\n#pragma HLS interface ap_fifo port = B.write_resp._\n#pragma HLS aggregate variable = B.write_resp._  bit\n#pragma HLS disaggregate variable = B .read_data\n#pragma HLS interface ap_fifo port = B.read_data._peek\n#pragma HLS aggregate variable = B.read_data._peek bit\n#pragma HLS disaggregate variable = B .write_resp\n#pragma HLS interface ap_fifo port = B.write_resp._peek\n#pragma HLS aggregate variable = B.write_resp._peek bit\nvoid(B.read_addr._.full());\nvoid(B.read_data._.empty());\nvoid(B.read_data._peek.empty());\nvoid(B.write_addr._.full());\nvoid(B.write_data._.full());\nvoid(B.write_resp._.empty());\nvoid(B.write_resp._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_B\n#pragma HLS interface ap_fifo port = fifo_B._\n#pragma HLS aggregate variable = fifo_B._ bit\nvoid(fifo_B._.full());\n\n\n\n  const int N16 = P_N >> 16;\n  const int rp_time = (N16 == 0) ? 1 : N16;\n  const int N = P_N & 0xFFFF;\n  const int num_ite_B = ((K + 7) >> 3) * ((N + 7) >> 3);\nl_rp:\n  for (int rp = 0; rp < rp_time; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min = 1 max = 16\n  rd_B:\n    for (int i_req = 0, i_resp = 0; i_resp < num_ite_B;) {\n#pragma HLS loop_tripcount min = 1 max = 500000\n#pragma HLS pipeline style = stp II = 1\n      async_read(B, fifo_B, num_ite_B, i_req, i_resp);\n    }\n  }\n}\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "read_C": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(tapa::async_mmap<float_v16> &C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) {\n#pragma HLS disaggregate variable = C\n#pragma HLS interface ap_fifo port = C.read_addr._\n#pragma HLS aggregate variable = C.read_addr._  bit\n#pragma HLS interface ap_fifo port = C.read_data._\n#pragma HLS aggregate variable = C.read_data._  bit\n#pragma HLS interface ap_fifo port = C.write_addr._\n#pragma HLS aggregate variable = C.write_addr._  bit\n#pragma HLS interface ap_fifo port = C.write_data._\n#pragma HLS aggregate variable = C.write_data._  bit\n#pragma HLS interface ap_fifo port = C.write_resp._\n#pragma HLS aggregate variable = C.write_resp._  bit\n#pragma HLS disaggregate variable = C .read_data\n#pragma HLS interface ap_fifo port = C.read_data._peek\n#pragma HLS aggregate variable = C.read_data._peek bit\n#pragma HLS disaggregate variable = C .write_resp\n#pragma HLS interface ap_fifo port = C.write_resp._peek\n#pragma HLS aggregate variable = C.write_resp._peek bit\nvoid(C.read_addr._.full());\nvoid(C.read_data._.empty());\nvoid(C.read_data._peek.empty());\nvoid(C.write_addr._.full());\nvoid(C.write_data._.full());\nvoid(C.write_resp._.empty());\nvoid(C.write_resp._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_C\n#pragma HLS interface ap_fifo port = fifo_C._\n#pragma HLS aggregate variable = fifo_C._ bit\nvoid(fifo_C._.full());\n\n\n\n#pragma HLS disaggregate variable = wrC_inst\n#pragma HLS interface ap_fifo port = wrC_inst._\n#pragma HLS aggregate variable = wrC_inst._ bit\nvoid(wrC_inst._.full());\n\n  wrC_inst.write(M);\n  wrC_inst.write(P_N);\n  const int N16 = P_N >> 16;\n  const int rp_time = (N16 == 0) ? 1 : N16;\n  const int N = P_N & 0xFFFF;\n  const int num_ite_C = ((M + 15) >> 4) * ((N + 7) >> 3);\nl_rp:\n  for (int rp = 0; rp < rp_time; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min = 1 max = 16\n  rd_C:\n    for (int i_req = 0, i_resp = 0; i_resp < num_ite_C;) {\n#pragma HLS loop_tripcount min = 1 max = 500000\n#pragma HLS pipeline style = stp II = 1\n      async_read(C, fifo_C, num_ite_C, i_req, i_resp);\n    }\n  }\n}\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "read_edge_list_ptr": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, tapa::async_mmap<int> &edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) {\n\n\n\n\n#pragma HLS disaggregate variable = edge_list_ptr\n#pragma HLS interface ap_fifo port = edge_list_ptr.read_addr._\n#pragma HLS aggregate variable = edge_list_ptr.read_addr._  bit\n#pragma HLS interface ap_fifo port = edge_list_ptr.read_data._\n#pragma HLS aggregate variable = edge_list_ptr.read_data._  bit\n#pragma HLS interface ap_fifo port = edge_list_ptr.write_addr._\n#pragma HLS aggregate variable = edge_list_ptr.write_addr._  bit\n#pragma HLS interface ap_fifo port = edge_list_ptr.write_data._\n#pragma HLS aggregate variable = edge_list_ptr.write_data._  bit\n#pragma HLS interface ap_fifo port = edge_list_ptr.write_resp._\n#pragma HLS aggregate variable = edge_list_ptr.write_resp._  bit\n#pragma HLS disaggregate variable = edge_list_ptr .read_data\n#pragma HLS interface ap_fifo port = edge_list_ptr.read_data._peek\n#pragma HLS aggregate variable = edge_list_ptr.read_data._peek bit\n#pragma HLS disaggregate variable = edge_list_ptr .write_resp\n#pragma HLS interface ap_fifo port = edge_list_ptr.write_resp._peek\n#pragma HLS aggregate variable = edge_list_ptr.write_resp._peek bit\nvoid(edge_list_ptr.read_addr._.full());\nvoid(edge_list_ptr.read_data._.empty());\nvoid(edge_list_ptr.read_data._peek.empty());\nvoid(edge_list_ptr.write_addr._.full());\nvoid(edge_list_ptr.write_data._.full());\nvoid(edge_list_ptr.write_resp._.empty());\nvoid(edge_list_ptr.write_resp._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_edge_list_ptr\n#pragma HLS interface ap_fifo port = fifo_edge_list_ptr._\n#pragma HLS aggregate variable = fifo_edge_list_ptr._ bit\nvoid(fifo_edge_list_ptr._.full());\n\n#pragma HLS disaggregate variable = PE_inst\n#pragma HLS interface ap_fifo port = PE_inst._\n#pragma HLS aggregate variable = PE_inst._ bit\nvoid(PE_inst._.full());\n\n  PE_inst.write(num_ite);\n  PE_inst.write(M);\n  PE_inst.write(P_N);\n  PE_inst.write(K);\n  const int N = P_N & 0xFFFF;\n  const int N16 = P_N >> 16;\n  const int rp_time = (N16 == 0) ? 1 : N16;\n  const int num_ite_plus1 = num_ite + 1;\n  const int rp_time_N = rp_time * ((N + 7) >> 3);\nl_rp:\n  for (int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min = 1 max = 16\n  rd_ptr:\n    for (int i_req = 0, i_resp = 0; i_resp < num_ite_plus1;) {\n#pragma HLS loop_tripcount min = 1 max = 800\n#pragma HLS pipeline style = stp II = 1\n      async_read(edge_list_ptr, fifo_edge_list_ptr, num_ite_plus1, i_req,\n                 i_resp);\n    }\n  }\n}\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             uint64_t C_out) ;\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "write_C": {
            "code": "\n\n#include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n#include <tapa.h>\n\n#include <ap_int.h>\n\n#include <tapa.h>\nconstexpr int NUM_CH_SPARSE = 8;\nconstexpr int NUM_CH_B = 4;\nconstexpr int NUM_CH_C = 8;\nconst int WINDOW_SIZE = 4096;\nconst int DEP_DIST_LOAD_STORE = 10;\nconst int B_PARTITION_FACTOR = 4;\nconst int URAM_DEPTH = 8192;\nusing float_v16 = tapa::vec_t<float, 16>;\nusing float_v8 = tapa::vec_t<float, 8>;\nvoid Sextans(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmaps<float_v16, NUM_CH_B> mat_B_ch,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch_in,\n             tapa::mmaps<float_v16, NUM_CH_C> mat_C_ch, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, int beta_u);\n//#include \"modules.h\"\nconstexpr int FIFO_DEPTH = 2;\nconstexpr int PEG_PER_A = 512 / 256;\nstruct MultBVec {\n  ap_uint<18> row;\n  float_v8 abvec;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> &A, tapa::ostream<T> &fifo_A,\n                       const R A_len, R &i_req, R &i_resp) {\n#pragma HLS inline\n  if ((i_req < A_len) & !A.read_addr.full()) {\n    A.read_addr.try_write(i_req);\n    ++i_req;\n  }\n  if (!fifo_A.full() & !A.read_data.empty()) {\n    T tmp;\n    A.read_data.try_read(tmp);\n    fifo_A.try_write(tmp);\n    ++i_resp;\n  }\n}\nvoid read_edge_list_ptr(\n    const int num_ite, const int M,\n    const int P_N, // bit 31 - 16: repeat time, bit 15 - 0: N\n    const int K, uint64_t edge_list_ptr,\n    tapa::ostream<int> &fifo_edge_list_ptr, tapa::ostream<int> &PE_inst) ;\nvoid read_A(uint64_t A,\n            tapa::ostream<ap_uint<512>> &fifo_A, const int A_len,\n            const int P_N) ;\nvoid read_B(uint64_t B, tapa::ostream<float_v16> &fifo_B,\n            const int K, const int P_N) ;\nvoid read_C(uint64_t C, tapa::ostream<float_v16> &fifo_C,\n            const int M, const int P_N, tapa::ostream<int> &wrC_inst) ;\nvoid write_C(tapa::istream<int> &wrC_inst, tapa::istream<float_v16> &fifo_C,\n             tapa::async_mmap<float_v16> &C_out) {\n#pragma HLS disaggregate variable = wrC_inst\n#pragma HLS interface ap_fifo port = wrC_inst._\n#pragma HLS aggregate variable = wrC_inst._ bit\n#pragma HLS interface ap_fifo port = wrC_inst._peek\n#pragma HLS aggregate variable = wrC_inst._peek bit\nvoid(wrC_inst._.empty());\nvoid(wrC_inst._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_C\n#pragma HLS interface ap_fifo port = fifo_C._\n#pragma HLS aggregate variable = fifo_C._ bit\n#pragma HLS interface ap_fifo port = fifo_C._peek\n#pragma HLS aggregate variable = fifo_C._peek bit\nvoid(fifo_C._.empty());\nvoid(fifo_C._peek.empty());\n\n#pragma HLS disaggregate variable = C_out\n#pragma HLS interface ap_fifo port = C_out.read_addr._\n#pragma HLS aggregate variable = C_out.read_addr._  bit\n#pragma HLS interface ap_fifo port = C_out.read_data._\n#pragma HLS aggregate variable = C_out.read_data._  bit\n#pragma HLS interface ap_fifo port = C_out.write_addr._\n#pragma HLS aggregate variable = C_out.write_addr._  bit\n#pragma HLS interface ap_fifo port = C_out.write_data._\n#pragma HLS aggregate variable = C_out.write_data._  bit\n#pragma HLS interface ap_fifo port = C_out.write_resp._\n#pragma HLS aggregate variable = C_out.write_resp._  bit\n#pragma HLS disaggregate variable = C_out .read_data\n#pragma HLS interface ap_fifo port = C_out.read_data._peek\n#pragma HLS aggregate variable = C_out.read_data._peek bit\n#pragma HLS disaggregate variable = C_out .write_resp\n#pragma HLS interface ap_fifo port = C_out.write_resp._peek\n#pragma HLS aggregate variable = C_out.write_resp._peek bit\nvoid(C_out.read_addr._.full());\nvoid(C_out.read_data._.empty());\nvoid(C_out.read_data._peek.empty());\nvoid(C_out.write_addr._.full());\nvoid(C_out.write_data._.full());\nvoid(C_out.write_resp._.empty());\nvoid(C_out.write_resp._peek.empty());\n\n  int M = wrC_inst.read();\n  int P_N = wrC_inst.read();\n  const int N16 = P_N >> 16;\n  const int rp_time = (N16 == 0) ? 1 : N16;\n  const int N = P_N & 0xFFFF;\n  const int num_ite_C = ((M + 15) >> 4) * ((N + 7) >> 3);\nl_rp:\n  for (int rp = 0; rp < rp_time; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min = 1 max = 16\n  wr_C:\n    for (int i_req = 0, i_resp = 0; i_resp < num_ite_C;) {\n#pragma HLS loop_tripcount min = 1 max = 500000\n#pragma HLS pipeline style = stp II = 1\n      if ((i_req < num_ite_C) & !fifo_C.empty() & !C_out.write_addr.full() &\n          !C_out.write_data.full()) {\n        C_out.write_addr.try_write(i_req);\n        float_v16 tmpv;\n        fifo_C.try_read(tmpv);\n        C_out.write_data.try_write(tmpv);\n        ++i_req;\n      }\n      uint8_t n_resp;\n      if (C_out.write_resp.try_read(n_resp)) {\n        i_resp += int(n_resp) + 1;\n      }\n    }\n  }\n}\nvoid FloatvMultConst(const int alpha_u, const int M, const int P_N,\n                     tapa::istream<float_v16> &fifo_in,\n                     tapa::ostream<float_v16> &fifo_out) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> &fifo_in0,\n                     tapa::istream<float_v16> &fifo_in1,\n                     tapa::ostream<float_v16> &fifo_out) ;\n/*\nvoid PU2core(ap_uint<18> & addr_c,\n             float a_val_f,\n             float b_val_d0_f,\n             float b_val_d1_f,\n             ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]\n             ) {\n#pragma HLS inline\n    ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n\n    ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31,  0);\n    ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n\n    float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u);\n    float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u);\n\n    c_val_d0_f += tapa::reg(a_val_f) * b_val_d0_f;\n    c_val_d1_f += tapa::reg(a_val_f) * b_val_d1_f;\n\n    c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n    c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n\n    c_val_d0_d1_u64(31,  0) = c_val_d0_u;\n    c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n\n    local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\n\nvoid PEcore(ap_uint<14> & addr_b,\n            ap_uint<18> & addr_c,\n            ap_uint<32> & a_val_u,\n            ap_uint<64> local_C[4][URAM_DEPTH],\n            float local_B[8][WINDOW_SIZE]\n            ) {\n#pragma HLS inline\n    //if (addr_c != ((ap_uint<18>) 0x3FFFF)) {\n    if (addr_c[17] == 0) {\n        float a_val_f = tapa::bit_cast<float>(a_val_u);\n        for (int i = 0; i < 4; ++i) {\n            PU2core(addr_c,\n                    a_val_f,\n                    local_B[i*2+0][addr_b],\n                    local_B[i*2+1][addr_b],\n                    local_C[i]\n                    );\n        }\n    }\n}\n*/\nvoid PEcore_Bmtx(ap_uint<14> addr_b, ap_uint<32> a_val_u,\n                 float local_B[8][WINDOW_SIZE], float_v8 &abv) {\n#pragma HLS inline\n  float a_val_f = tapa::bit_cast<float>(a_val_u);\n  for (int i = 0; i < 8; ++i) {\n    abv[i] = a_val_f * local_B[i][addr_b];\n  }\n}\nvoid PEG_Bmtx(\n    tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n    // tapa::istream<ap_uint<128>> & fifo_A,\n    tapa::istream<ap_uint<256>> &fifo_A,\n    tapa::istreams<float_v16, NUM_CH_B> &fifo_B_in, // [256(16)] * 2, 2: dim d\n    // [64(32bits * 2.0)] * 8 dim\n    tapa::ostream<int> &PE_inst_out, tapa::ostream<int> &fifo_inst_out,\n    tapa::ostreams<float_v16, NUM_CH_B> &fifo_B_out,\n    // to PEG_Cmtx\n    tapa::ostream<int> &PE_inst_to_Cmtx,\n    tapa::ostream<int> &fifo_inst_out_to_Cmtx,\n    tapa::ostreams<MultBVec, 4> &fifo_aBvec) ;\nvoid PU2core_Cmtx(ap_uint<18> addr_c, float val_d0_f, float val_d1_f,\n                  ap_uint<64> local_C_pe0_d0_d1[URAM_DEPTH]) {\n#pragma HLS inline\n  ap_uint<64> c_val_d0_d1_u64 = local_C_pe0_d0_d1[addr_c];\n  ap_uint<32> c_val_d0_u = c_val_d0_d1_u64(31, 0);\n  ap_uint<32> c_val_d1_u = c_val_d0_d1_u64(63, 32);\n  float c_val_d0_f = tapa::bit_cast<float>(c_val_d0_u) + val_d0_f;\n  float c_val_d1_f = tapa::bit_cast<float>(c_val_d1_u) + val_d1_f;\n  c_val_d0_u = tapa::bit_cast<ap_uint<32>>(c_val_d0_f);\n  c_val_d1_u = tapa::bit_cast<ap_uint<32>>(c_val_d1_f);\n  c_val_d0_d1_u64(31, 0) = c_val_d0_u;\n  c_val_d0_d1_u64(63, 32) = c_val_d1_u;\n  local_C_pe0_d0_d1[addr_c] = c_val_d0_d1_u64;\n}\nvoid PEcore_Cmtx(ap_uint<18> addr_c, float_v8 &abvec,\n                 ap_uint<64> local_C[4][URAM_DEPTH]) {\n#pragma HLS inline\n  for (int i = 0; i < 4; ++i) {\n    PU2core_Cmtx(addr_c, abvec[i * 2 + 0], abvec[i * 2 + 1], local_C[i]);\n  }\n}\nvoid PEG_Cmtx(tapa::istream<int> &PE_inst_in, tapa::istream<int> &fifo_inst_in,\n              tapa::istreams<MultBVec, 4> &fifo_aBvec,\n              tapa::ostream<float_v8> &fifo_C_out) ;\n/*\nvoid PEG(tapa::istream<int> & PE_inst_in,\n         tapa::istream<int> & fifo_inst_in,\n         //tapa::istream<ap_uint<128>> & fifo_A,\n         tapa::istream<ap_uint<256>> & fifo_A,\n         tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n         // [64(32bits * 2.0)] * 8 dim\n         tapa::ostream<int> & PE_inst_out,\n         tapa::ostream<int> & fifo_inst_out,\n         tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n         tapa::ostream<float_v8> & fifo_C_out\n         ) {\n    tapa::streams<MultBVec, 4, FIFO_DEPTH> fifo_aBvec(\"fifo_aBvec\");\n    tapa::stream<int, FIFO_DEPTH> PE_inst_to_Cmtx(\"PE_inst_to_Cmtx\");\n    tapa::stream<int, FIFO_DEPTH>\nfifo_inst_out_to_Cmtx(\"fifo_inst_out_to_Cmtx\");\n\n    tapa::task()\n        .invoke(PEG_Bmtx,\n                PE_inst_in,\n                fifo_inst_in,\n                fifo_A,\n                fifo_B_in,\n                PE_inst_out,\n                fifo_inst_out,\n                fifo_B_out,\n                // to PEG_Cmtx\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec)\n\n        .invoke(PEG_Cmtx,\n                PE_inst_to_Cmtx,\n                fifo_inst_out_to_Cmtx,\n                fifo_aBvec,\n                fifo_C_out)\n    ;\n}\n\nvoid PEG_c(tapa::istream<int> & PE_inst_in,\n           tapa::istream<int> & fifo_inst_in,\n           //tapa::istream<ap_uint<128>> & fifo_A,\n           tapa::istream<ap_uint<256>> & fifo_A,\n           tapa::istreams<float_v16, NUM_CH_B> & fifo_B_in, // [256(16)] * 2, 2:\ndim d\n           // [64(32bits * 2.0)] * 8 dim\n           tapa::ostream<int> & PE_inst_out,\n           tapa::ostream<int> & fifo_inst_out,\n           tapa::ostreams<float_v16, NUM_CH_B> & fifo_B_out,\n           tapa::ostream<float_v8> & fifo_C_out\n           ) {\n    const int NUM_ITE = PE_inst_in.read();\n    const int M = PE_inst_in.read();\n    const int P_N = PE_inst_in.read();\n    const int K = PE_inst_in.read();\n\n    PE_inst_out.write(NUM_ITE);\n    PE_inst_out.write(M);\n    PE_inst_out.write(P_N);\n    PE_inst_out.write(K);\n\n    const int N16 = P_N >> 16;\n    const int rp_time = (N16 == 0)? 1 : N16;\n    const int N = P_N & 0xFFFF;\n    const int rp_time_N = rp_time * ((N + 7) >> 3);\n\n    const int num_v_init = (M + 63) >> 6;\n    //const int num_v_out = (M + 31) >> 5;\n    const int num_v_out = (M + 15) >> 4;\n\n    //define local C buffer and pragma to URAM\n    //ap_uint<64> local_C[2][8 / 2][URAM_DEPTH];\n    ap_uint<64> local_C[4][8 / 2][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\n#pragma HLS array_partition complete variable=local_C dim=2\n\nl_rp:\n    for(int rp = 0; rp < rp_time_N; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline style=stp II=1\n            //for (int j = 0; j < 2; ++j) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < 8 / 2; ++k) {\n                    local_C[j][k][i] = 0;\n                }\n            }\n        }\n        //define local B buffer and pragma local B buffer if partition factor >\n1\n\n        //float local_B[8/2][8][WINDOW_SIZE];\n        //float local_B[8][WINDOW_SIZE];\n        float local_B[4/2][8][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_B latency=2\n#pragma HLS array_partition variable=local_B complete dim=1\n#pragma HLS array_partition variable=local_B complete dim=2\n#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=3\n//#pragma HLS array_partition variable=local_B cyclic factor=B_PARTITION_FACTOR\ndim=2\n\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n\n            // fill onchip B\n        read_B:\n            for (int j = 0; (j < (WINDOW_SIZE >> 3)) && (j < ((K + 7) >> 3) - i\n* (WINDOW_SIZE >> 3)); ) { #pragma HLS loop_tripcount min=1 max=512 #pragma HLS\npipeline style=stp II = 1\n\n                bool b_2048_ready = true;\n                bool b_2048_out_not_full = true;\n                for (int k = 0; k < NUM_CH_B; ++k) {\n                    b_2048_ready &= !fifo_B_in[k].empty();\n                    b_2048_out_not_full &= !fifo_B_out[k].full();\n                }\n\n                if (b_2048_ready & b_2048_out_not_full) {\n                    float_v16 b_512_x[NUM_CH_B];\n                    for (int k = 0; k < NUM_CH_B; ++k) {\n                        b_512_x[k] = fifo_B_in[k].read();\n                        fifo_B_out[k].write(b_512_x[k]);\n                    }\n\n                    for (int k = 0; k < 8; ++k) {\n                        for (int m = 0; m < 8; ++m) {\n                            for (int l = 0; l < 2; ++l) {\n                                local_B[l][m][j * 8 + k] = b_512_x[m/2][k + m %\n2 * 8];\n                            }\n                        }\n                    }\n                    ++j;\n                }\n            }\n\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline style=stp II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n\n                //ap_uint<128> a_pes;\n                ap_uint<256> a_pes;\n                bool a_pes_ready = fifo_A.try_read(a_pes);\n\n                if (a_pes_ready) {\n                    //for (int p = 0; p < 2; ++p) {\n                    for (int p = 0; p < 4; ++p) {\n                        ap_uint<14> a_col;\n                        ap_uint<18> a_row;\n                        ap_uint<32> a_val;\n\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        a_col = a(63, 50);\n                        a_row = a(49, 32);\n                        a_val = a(31,  0);\n\n                        // PE process\n                        PEcore(a_col,\n                               a_row,\n                               a_val,\n                               local_C[p],\n                               //local_B\n                               local_B[p/2]\n                               );\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline style=stp II=1\n            ap_uint<32> u_32_d[8];\n\n            for (int d = 0; d < 4; ++d) {\n                ap_uint<64> u_64 = local_C[c_idx][d][i>>2];\n                u_32_d[2 * d    ] = u_64(31,  0);\n                u_32_d[2 * d + 1] = u_64(63, 32);\n            }\n\n            switch (c_idx) { //0,2,1,3\n                case 0: c_idx = 2; break;\n                case 1: c_idx = 3; break;\n                case 2: c_idx = 1; break;\n                case 3: c_idx = 0; break;\n            }\n\n            float_v8 out_v;\n            for (int d = 0; d < 8; ++d) {\n                out_v[d] = tapa::bit_cast<float>(u_32_d[d]);\n            }\n            fifo_C_out.write(out_v);\n            //for (int ii = 0; ii < 8; ++ii) {cout << out_v[ii] << \" \";} cout <<\nendl;\n        }\n    }\n}\n*/\nvoid Scatter_1_2(tapa::istream<ap_uint<512>> &fifo_in,\n                 tapa::ostreams<ap_uint<256>, 2> &fifo_out) ;\nvoid Merger(tapa::istreams<float_v8, 2> &fifo_in,\n            tapa::ostream<float_v16> &fifo_out) ;\nvoid black_hole_int(tapa::istream<int> &fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> &fifo_in) ;\nvoid Sextans(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7,\n             uint64_t mat_B_ch_0, uint64_t mat_B_ch_1, uint64_t mat_B_ch_2, uint64_t mat_B_ch_3,\n             uint64_t mat_C_ch_in_0, uint64_t mat_C_ch_in_1, uint64_t mat_C_ch_in_2, uint64_t mat_C_ch_in_3, uint64_t mat_C_ch_in_4, uint64_t mat_C_ch_in_5, uint64_t mat_C_ch_in_6, uint64_t mat_C_ch_in_7,\n             uint64_t mat_C_ch_0, uint64_t mat_C_ch_1, uint64_t mat_C_ch_2, uint64_t mat_C_ch_3, uint64_t mat_C_ch_4, uint64_t mat_C_ch_5, uint64_t mat_C_ch_6, uint64_t mat_C_ch_7, const int NUM_ITE,\n             const int NUM_A_LEN, const int M, const int K, const int P_N,\n             const int alpha_u, const int beta_u) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        }
    },
    "top": "Sextans"
}
