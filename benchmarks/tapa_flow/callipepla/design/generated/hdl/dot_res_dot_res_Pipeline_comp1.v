// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

module dot_res_dot_res_Pipeline_comp1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln374,
        psum_7_address0,
        psum_7_ce0,
        psum_7_we0,
        psum_7_d0,
        psum_7_address1,
        psum_7_ce1,
        psum_7_q1,
        psum_6_address0,
        psum_6_ce0,
        psum_6_we0,
        psum_6_d0,
        psum_6_address1,
        psum_6_ce1,
        psum_6_q1,
        psum_5_address0,
        psum_5_ce0,
        psum_5_we0,
        psum_5_d0,
        psum_5_address1,
        psum_5_ce1,
        psum_5_q1,
        psum_4_address0,
        psum_4_ce0,
        psum_4_we0,
        psum_4_d0,
        psum_4_address1,
        psum_4_ce1,
        psum_4_q1,
        psum_3_address0,
        psum_3_ce0,
        psum_3_we0,
        psum_3_d0,
        psum_3_address1,
        psum_3_ce1,
        psum_3_q1,
        psum_2_address0,
        psum_2_ce0,
        psum_2_we0,
        psum_2_d0,
        psum_2_address1,
        psum_2_ce1,
        psum_2_q1,
        psum_1_address0,
        psum_1_ce0,
        psum_1_we0,
        psum_1_d0,
        psum_1_address1,
        psum_1_ce1,
        psum_1_q1,
        psum_address0,
        psum_ce0,
        psum_we0,
        psum_d0,
        psum_address1,
        psum_ce1,
        psum_q1,
        q1_s_dout,
        q1_s_empty_n,
        q1_s_read,
        M,
        grp_fu_478_p_din0,
        grp_fu_478_p_din1,
        grp_fu_478_p_opcode,
        grp_fu_478_p_dout0,
        grp_fu_478_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [28:0] sext_ln374;
output  [2:0] psum_7_address0;
output   psum_7_ce0;
output   psum_7_we0;
output  [63:0] psum_7_d0;
output  [2:0] psum_7_address1;
output   psum_7_ce1;
input  [63:0] psum_7_q1;
output  [2:0] psum_6_address0;
output   psum_6_ce0;
output   psum_6_we0;
output  [63:0] psum_6_d0;
output  [2:0] psum_6_address1;
output   psum_6_ce1;
input  [63:0] psum_6_q1;
output  [2:0] psum_5_address0;
output   psum_5_ce0;
output   psum_5_we0;
output  [63:0] psum_5_d0;
output  [2:0] psum_5_address1;
output   psum_5_ce1;
input  [63:0] psum_5_q1;
output  [2:0] psum_4_address0;
output   psum_4_ce0;
output   psum_4_we0;
output  [63:0] psum_4_d0;
output  [2:0] psum_4_address1;
output   psum_4_ce1;
input  [63:0] psum_4_q1;
output  [2:0] psum_3_address0;
output   psum_3_ce0;
output   psum_3_we0;
output  [63:0] psum_3_d0;
output  [2:0] psum_3_address1;
output   psum_3_ce1;
input  [63:0] psum_3_q1;
output  [2:0] psum_2_address0;
output   psum_2_ce0;
output   psum_2_we0;
output  [63:0] psum_2_d0;
output  [2:0] psum_2_address1;
output   psum_2_ce1;
input  [63:0] psum_2_q1;
output  [2:0] psum_1_address0;
output   psum_1_ce0;
output   psum_1_we0;
output  [63:0] psum_1_d0;
output  [2:0] psum_1_address1;
output   psum_1_ce1;
input  [63:0] psum_1_q1;
output  [2:0] psum_address0;
output   psum_ce0;
output   psum_we0;
output  [63:0] psum_d0;
output  [2:0] psum_address1;
output   psum_ce1;
input  [63:0] psum_q1;
input  [512:0] q1_s_dout;
input   q1_s_empty_n;
output   q1_s_read;
input  [31:0] M;
output  [63:0] grp_fu_478_p_din0;
output  [63:0] grp_fu_478_p_din1;
output  [1:0] grp_fu_478_p_opcode;
input  [63:0] grp_fu_478_p_dout0;
output   grp_fu_478_p_ce;

reg ap_idle;
reg psum_7_ce0;
reg psum_7_we0;
reg psum_7_ce1;
reg psum_6_ce0;
reg psum_6_we0;
reg psum_6_ce1;
reg psum_5_ce0;
reg psum_5_we0;
reg psum_5_ce1;
reg psum_4_ce0;
reg psum_4_we0;
reg psum_4_ce1;
reg psum_3_ce0;
reg psum_3_we0;
reg psum_3_ce1;
reg psum_2_ce0;
reg psum_2_we0;
reg psum_2_ce1;
reg psum_1_ce0;
reg psum_1_we0;
reg psum_1_ce1;
reg psum_ce0;
reg psum_we0;
reg psum_ce1;
reg q1_s_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln387_fu_353_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_nbreadreq_fu_114_p3;
reg   [0:0] tmp_reg_698;
reg   [0:0] tmp_reg_698_pp0_iter1_reg;
reg   [0:0] tmp_reg_698_pp0_iter2_reg;
reg   [0:0] tmp_reg_698_pp0_iter3_reg;
reg   [0:0] tmp_reg_698_pp0_iter4_reg;
reg   [0:0] tmp_reg_698_pp0_iter5_reg;
reg   [0:0] tmp_reg_698_pp0_iter6_reg;
reg   [0:0] tmp_reg_698_pp0_iter7_reg;
reg   [0:0] tmp_reg_698_pp0_iter8_reg;
reg   [0:0] tmp_reg_698_pp0_iter9_reg;
reg   [0:0] tmp_reg_698_pp0_iter10_reg;
wire   [63:0] trunc_ln78_fu_363_p1;
reg   [63:0] trunc_ln78_reg_702;
reg   [63:0] tmp_3_reg_707;
reg   [63:0] tmp_4_reg_712;
reg   [63:0] tmp_5_reg_717;
reg   [63:0] tmp_6_reg_722;
reg   [63:0] trunc_ln_reg_727;
reg   [63:0] trunc_ln78_2_reg_732;
reg   [63:0] tmp_2_reg_737;
wire   [0:0] icmp_ln393_fu_443_p2;
reg   [0:0] icmp_ln393_reg_742;
reg   [0:0] icmp_ln393_reg_742_pp0_iter1_reg;
reg   [0:0] icmp_ln393_reg_742_pp0_iter2_reg;
reg   [0:0] icmp_ln393_reg_742_pp0_iter3_reg;
reg   [0:0] icmp_ln393_reg_742_pp0_iter4_reg;
reg   [0:0] icmp_ln393_reg_742_pp0_iter5_reg;
reg   [0:0] icmp_ln393_reg_742_pp0_iter6_reg;
wire   [0:0] icmp_ln393_1_fu_455_p2;
reg   [0:0] icmp_ln393_1_reg_747;
reg   [0:0] icmp_ln393_1_reg_747_pp0_iter1_reg;
reg   [0:0] icmp_ln393_1_reg_747_pp0_iter2_reg;
reg   [0:0] icmp_ln393_1_reg_747_pp0_iter3_reg;
reg   [0:0] icmp_ln393_1_reg_747_pp0_iter4_reg;
reg   [0:0] icmp_ln393_1_reg_747_pp0_iter5_reg;
reg   [0:0] icmp_ln393_1_reg_747_pp0_iter6_reg;
wire   [0:0] icmp_ln393_2_fu_467_p2;
reg   [0:0] icmp_ln393_2_reg_752;
reg   [0:0] icmp_ln393_2_reg_752_pp0_iter1_reg;
reg   [0:0] icmp_ln393_2_reg_752_pp0_iter2_reg;
reg   [0:0] icmp_ln393_2_reg_752_pp0_iter3_reg;
reg   [0:0] icmp_ln393_2_reg_752_pp0_iter4_reg;
reg   [0:0] icmp_ln393_2_reg_752_pp0_iter5_reg;
reg   [0:0] icmp_ln393_2_reg_752_pp0_iter6_reg;
wire   [0:0] icmp_ln393_3_fu_479_p2;
reg   [0:0] icmp_ln393_3_reg_757;
reg   [0:0] icmp_ln393_3_reg_757_pp0_iter1_reg;
reg   [0:0] icmp_ln393_3_reg_757_pp0_iter2_reg;
reg   [0:0] icmp_ln393_3_reg_757_pp0_iter3_reg;
reg   [0:0] icmp_ln393_3_reg_757_pp0_iter4_reg;
reg   [0:0] icmp_ln393_3_reg_757_pp0_iter5_reg;
reg   [0:0] icmp_ln393_3_reg_757_pp0_iter6_reg;
wire   [0:0] icmp_ln393_4_fu_491_p2;
reg   [0:0] icmp_ln393_4_reg_762;
reg   [0:0] icmp_ln393_4_reg_762_pp0_iter1_reg;
reg   [0:0] icmp_ln393_4_reg_762_pp0_iter2_reg;
reg   [0:0] icmp_ln393_4_reg_762_pp0_iter3_reg;
reg   [0:0] icmp_ln393_4_reg_762_pp0_iter4_reg;
reg   [0:0] icmp_ln393_4_reg_762_pp0_iter5_reg;
reg   [0:0] icmp_ln393_4_reg_762_pp0_iter6_reg;
wire   [0:0] icmp_ln393_5_fu_503_p2;
reg   [0:0] icmp_ln393_5_reg_767;
reg   [0:0] icmp_ln393_5_reg_767_pp0_iter1_reg;
reg   [0:0] icmp_ln393_5_reg_767_pp0_iter2_reg;
reg   [0:0] icmp_ln393_5_reg_767_pp0_iter3_reg;
reg   [0:0] icmp_ln393_5_reg_767_pp0_iter4_reg;
reg   [0:0] icmp_ln393_5_reg_767_pp0_iter5_reg;
reg   [0:0] icmp_ln393_5_reg_767_pp0_iter6_reg;
wire   [0:0] icmp_ln393_6_fu_515_p2;
reg   [0:0] icmp_ln393_6_reg_772;
reg   [0:0] icmp_ln393_6_reg_772_pp0_iter1_reg;
reg   [0:0] icmp_ln393_6_reg_772_pp0_iter2_reg;
reg   [0:0] icmp_ln393_6_reg_772_pp0_iter3_reg;
reg   [0:0] icmp_ln393_6_reg_772_pp0_iter4_reg;
reg   [0:0] icmp_ln393_6_reg_772_pp0_iter5_reg;
reg   [0:0] icmp_ln393_6_reg_772_pp0_iter6_reg;
wire   [0:0] icmp_ln393_7_fu_527_p2;
reg   [0:0] icmp_ln393_7_reg_777;
reg   [0:0] icmp_ln393_7_reg_777_pp0_iter1_reg;
reg   [0:0] icmp_ln393_7_reg_777_pp0_iter2_reg;
reg   [0:0] icmp_ln393_7_reg_777_pp0_iter3_reg;
reg   [0:0] icmp_ln393_7_reg_777_pp0_iter4_reg;
reg   [0:0] icmp_ln393_7_reg_777_pp0_iter5_reg;
reg   [0:0] icmp_ln393_7_reg_777_pp0_iter6_reg;
wire   [63:0] elem_val_M_elems_fu_544_p1;
wire   [63:0] bitcast_ln78_fu_549_p1;
wire   [63:0] bitcast_ln78_1_fu_554_p1;
wire   [63:0] bitcast_ln78_2_fu_559_p1;
wire   [63:0] bitcast_ln78_3_fu_564_p1;
wire   [63:0] bitcast_ln78_4_fu_569_p1;
wire   [63:0] bitcast_ln78_5_fu_574_p1;
wire   [63:0] bitcast_ln78_6_fu_579_p1;
reg   [2:0] psum_addr_1_reg_830;
reg   [2:0] psum_addr_1_reg_830_pp0_iter6_reg;
reg   [2:0] psum_addr_1_reg_830_pp0_iter7_reg;
reg   [2:0] psum_addr_1_reg_830_pp0_iter8_reg;
reg   [2:0] psum_addr_1_reg_830_pp0_iter9_reg;
reg   [2:0] psum_addr_1_reg_830_pp0_iter10_reg;
reg   [2:0] psum_1_addr_reg_836;
reg   [2:0] psum_1_addr_reg_836_pp0_iter6_reg;
reg   [2:0] psum_1_addr_reg_836_pp0_iter7_reg;
reg   [2:0] psum_1_addr_reg_836_pp0_iter8_reg;
reg   [2:0] psum_1_addr_reg_836_pp0_iter9_reg;
reg   [2:0] psum_1_addr_reg_836_pp0_iter10_reg;
reg   [2:0] psum_2_addr_reg_842;
reg   [2:0] psum_2_addr_reg_842_pp0_iter6_reg;
reg   [2:0] psum_2_addr_reg_842_pp0_iter7_reg;
reg   [2:0] psum_2_addr_reg_842_pp0_iter8_reg;
reg   [2:0] psum_2_addr_reg_842_pp0_iter9_reg;
reg   [2:0] psum_2_addr_reg_842_pp0_iter10_reg;
reg   [2:0] psum_3_addr_reg_848;
reg   [2:0] psum_3_addr_reg_848_pp0_iter6_reg;
reg   [2:0] psum_3_addr_reg_848_pp0_iter7_reg;
reg   [2:0] psum_3_addr_reg_848_pp0_iter8_reg;
reg   [2:0] psum_3_addr_reg_848_pp0_iter9_reg;
reg   [2:0] psum_3_addr_reg_848_pp0_iter10_reg;
reg   [2:0] psum_4_addr_reg_854;
reg   [2:0] psum_4_addr_reg_854_pp0_iter6_reg;
reg   [2:0] psum_4_addr_reg_854_pp0_iter7_reg;
reg   [2:0] psum_4_addr_reg_854_pp0_iter8_reg;
reg   [2:0] psum_4_addr_reg_854_pp0_iter9_reg;
reg   [2:0] psum_4_addr_reg_854_pp0_iter10_reg;
reg   [2:0] psum_5_addr_reg_860;
reg   [2:0] psum_5_addr_reg_860_pp0_iter6_reg;
reg   [2:0] psum_5_addr_reg_860_pp0_iter7_reg;
reg   [2:0] psum_5_addr_reg_860_pp0_iter8_reg;
reg   [2:0] psum_5_addr_reg_860_pp0_iter9_reg;
reg   [2:0] psum_5_addr_reg_860_pp0_iter10_reg;
reg   [2:0] psum_6_addr_reg_866;
reg   [2:0] psum_6_addr_reg_866_pp0_iter6_reg;
reg   [2:0] psum_6_addr_reg_866_pp0_iter7_reg;
reg   [2:0] psum_6_addr_reg_866_pp0_iter8_reg;
reg   [2:0] psum_6_addr_reg_866_pp0_iter9_reg;
reg   [2:0] psum_6_addr_reg_866_pp0_iter10_reg;
reg   [2:0] psum_7_addr_reg_872;
reg   [2:0] psum_7_addr_reg_872_pp0_iter6_reg;
reg   [2:0] psum_7_addr_reg_872_pp0_iter7_reg;
reg   [2:0] psum_7_addr_reg_872_pp0_iter8_reg;
reg   [2:0] psum_7_addr_reg_872_pp0_iter9_reg;
reg   [2:0] psum_7_addr_reg_872_pp0_iter10_reg;
wire   [63:0] grp_fu_304_p2;
reg   [63:0] mul1_reg_878;
reg   [63:0] psum_load_reg_883;
wire   [63:0] grp_fu_308_p2;
reg   [63:0] mul37_1_reg_888;
wire   [63:0] grp_fu_312_p2;
reg   [63:0] mul37_2_reg_893;
wire   [63:0] grp_fu_316_p2;
reg   [63:0] mul37_3_reg_898;
wire   [63:0] grp_fu_320_p2;
reg   [63:0] mul37_4_reg_903;
wire   [63:0] grp_fu_324_p2;
reg   [63:0] mul37_5_reg_908;
wire   [63:0] grp_fu_328_p2;
reg   [63:0] mul37_6_reg_913;
wire   [63:0] grp_fu_332_p2;
reg   [63:0] mul37_7_reg_918;
wire   [63:0] select_ln393_fu_624_p3;
wire   [63:0] idxprom40_fu_587_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] idx_fu_94;
wire   [31:0] idx_2_fu_611_p3;
wire    ap_loop_init;
reg   [31:0] i_1_fu_98;
wire   [31:0] i_5_fu_533_p2;
reg   [31:0] ap_sig_allocacmp_i;
wire   [63:0] grp_fu_262_p2;
wire   [63:0] grp_fu_268_p2;
wire   [63:0] grp_fu_274_p2;
wire   [63:0] grp_fu_280_p2;
wire   [63:0] grp_fu_286_p2;
wire   [63:0] grp_fu_292_p2;
wire   [63:0] grp_fu_298_p2;
wire   [63:0] grp_fu_262_p1;
wire   [63:0] grp_fu_268_p1;
wire   [63:0] grp_fu_274_p1;
wire   [63:0] grp_fu_280_p1;
wire   [63:0] grp_fu_286_p1;
wire   [63:0] grp_fu_292_p1;
wire   [63:0] grp_fu_298_p1;
wire  signed [31:0] sext_ln374_cast_fu_336_p1;
wire   [31:0] empty_fu_437_p2;
wire   [31:0] or_ln393_fu_449_p2;
wire   [31:0] or_ln393_1_fu_461_p2;
wire   [31:0] or_ln393_2_fu_473_p2;
wire   [31:0] or_ln393_3_fu_485_p2;
wire   [31:0] or_ln393_4_fu_497_p2;
wire   [31:0] or_ln393_5_fu_509_p2;
wire   [31:0] or_ln393_6_fu_521_p2;
wire   [31:0] idx_1_fu_599_p2;
wire   [0:0] icmp_ln397_fu_605_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_104;
reg    ap_enable_state6_pp0_iter5_stage0;
reg    ap_enable_operation_124;
reg    ap_enable_state7_pp0_iter6_stage0;
reg    ap_enable_operation_187;
reg    ap_enable_state12_pp0_iter11_stage0;
reg    ap_enable_operation_126;
reg    ap_enable_operation_142;
reg    ap_enable_state8_pp0_iter7_stage0;
reg    ap_enable_operation_189;
reg    ap_enable_operation_128;
reg    ap_enable_operation_145;
reg    ap_enable_operation_191;
reg    ap_enable_operation_130;
reg    ap_enable_operation_148;
reg    ap_enable_operation_193;
reg    ap_enable_operation_132;
reg    ap_enable_operation_151;
reg    ap_enable_operation_195;
reg    ap_enable_operation_134;
reg    ap_enable_operation_154;
reg    ap_enable_operation_197;
reg    ap_enable_operation_136;
reg    ap_enable_operation_157;
reg    ap_enable_operation_199;
reg    ap_enable_operation_138;
reg    ap_enable_operation_160;
reg    ap_enable_operation_201;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
reg    ap_condition_999;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dot_res_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_1_q1),
    .din1(grp_fu_262_p1),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

dot_res_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_2_q1),
    .din1(grp_fu_268_p1),
    .ce(1'b1),
    .dout(grp_fu_268_p2)
);

dot_res_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_3_q1),
    .din1(grp_fu_274_p1),
    .ce(1'b1),
    .dout(grp_fu_274_p2)
);

dot_res_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_4_q1),
    .din1(grp_fu_280_p1),
    .ce(1'b1),
    .dout(grp_fu_280_p2)
);

dot_res_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_5_q1),
    .din1(grp_fu_286_p1),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

dot_res_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_6_q1),
    .din1(grp_fu_292_p1),
    .ce(1'b1),
    .dout(grp_fu_292_p2)
);

dot_res_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_7_q1),
    .din1(grp_fu_298_p1),
    .ce(1'b1),
    .dout(grp_fu_298_p2)
);

dot_res_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(elem_val_M_elems_fu_544_p1),
    .din1(elem_val_M_elems_fu_544_p1),
    .ce(1'b1),
    .dout(grp_fu_304_p2)
);

dot_res_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln78_fu_549_p1),
    .din1(bitcast_ln78_fu_549_p1),
    .ce(1'b1),
    .dout(grp_fu_308_p2)
);

dot_res_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln78_1_fu_554_p1),
    .din1(bitcast_ln78_1_fu_554_p1),
    .ce(1'b1),
    .dout(grp_fu_312_p2)
);

dot_res_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln78_2_fu_559_p1),
    .din1(bitcast_ln78_2_fu_559_p1),
    .ce(1'b1),
    .dout(grp_fu_316_p2)
);

dot_res_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln78_3_fu_564_p1),
    .din1(bitcast_ln78_3_fu_564_p1),
    .ce(1'b1),
    .dout(grp_fu_320_p2)
);

dot_res_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln78_4_fu_569_p1),
    .din1(bitcast_ln78_4_fu_569_p1),
    .ce(1'b1),
    .dout(grp_fu_324_p2)
);

dot_res_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln78_5_fu_574_p1),
    .din1(bitcast_ln78_5_fu_574_p1),
    .ce(1'b1),
    .dout(grp_fu_328_p2)
);

dot_res_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bitcast_ln78_6_fu_579_p1),
    .din1(bitcast_ln78_6_fu_579_p1),
    .ce(1'b1),
    .dout(grp_fu_332_p2)
);

dot_res_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_999)) begin
            i_1_fu_98 <= i_5_fu_533_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_98 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            idx_fu_94 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (tmp_reg_698_pp0_iter4_reg == 1'd1))) begin
            idx_fu_94 <= idx_2_fu_611_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln393_1_reg_747_pp0_iter2_reg <= icmp_ln393_1_reg_747_pp0_iter1_reg;
        icmp_ln393_1_reg_747_pp0_iter3_reg <= icmp_ln393_1_reg_747_pp0_iter2_reg;
        icmp_ln393_1_reg_747_pp0_iter4_reg <= icmp_ln393_1_reg_747_pp0_iter3_reg;
        icmp_ln393_1_reg_747_pp0_iter5_reg <= icmp_ln393_1_reg_747_pp0_iter4_reg;
        icmp_ln393_1_reg_747_pp0_iter6_reg <= icmp_ln393_1_reg_747_pp0_iter5_reg;
        icmp_ln393_2_reg_752_pp0_iter2_reg <= icmp_ln393_2_reg_752_pp0_iter1_reg;
        icmp_ln393_2_reg_752_pp0_iter3_reg <= icmp_ln393_2_reg_752_pp0_iter2_reg;
        icmp_ln393_2_reg_752_pp0_iter4_reg <= icmp_ln393_2_reg_752_pp0_iter3_reg;
        icmp_ln393_2_reg_752_pp0_iter5_reg <= icmp_ln393_2_reg_752_pp0_iter4_reg;
        icmp_ln393_2_reg_752_pp0_iter6_reg <= icmp_ln393_2_reg_752_pp0_iter5_reg;
        icmp_ln393_3_reg_757_pp0_iter2_reg <= icmp_ln393_3_reg_757_pp0_iter1_reg;
        icmp_ln393_3_reg_757_pp0_iter3_reg <= icmp_ln393_3_reg_757_pp0_iter2_reg;
        icmp_ln393_3_reg_757_pp0_iter4_reg <= icmp_ln393_3_reg_757_pp0_iter3_reg;
        icmp_ln393_3_reg_757_pp0_iter5_reg <= icmp_ln393_3_reg_757_pp0_iter4_reg;
        icmp_ln393_3_reg_757_pp0_iter6_reg <= icmp_ln393_3_reg_757_pp0_iter5_reg;
        icmp_ln393_4_reg_762_pp0_iter2_reg <= icmp_ln393_4_reg_762_pp0_iter1_reg;
        icmp_ln393_4_reg_762_pp0_iter3_reg <= icmp_ln393_4_reg_762_pp0_iter2_reg;
        icmp_ln393_4_reg_762_pp0_iter4_reg <= icmp_ln393_4_reg_762_pp0_iter3_reg;
        icmp_ln393_4_reg_762_pp0_iter5_reg <= icmp_ln393_4_reg_762_pp0_iter4_reg;
        icmp_ln393_4_reg_762_pp0_iter6_reg <= icmp_ln393_4_reg_762_pp0_iter5_reg;
        icmp_ln393_5_reg_767_pp0_iter2_reg <= icmp_ln393_5_reg_767_pp0_iter1_reg;
        icmp_ln393_5_reg_767_pp0_iter3_reg <= icmp_ln393_5_reg_767_pp0_iter2_reg;
        icmp_ln393_5_reg_767_pp0_iter4_reg <= icmp_ln393_5_reg_767_pp0_iter3_reg;
        icmp_ln393_5_reg_767_pp0_iter5_reg <= icmp_ln393_5_reg_767_pp0_iter4_reg;
        icmp_ln393_5_reg_767_pp0_iter6_reg <= icmp_ln393_5_reg_767_pp0_iter5_reg;
        icmp_ln393_6_reg_772_pp0_iter2_reg <= icmp_ln393_6_reg_772_pp0_iter1_reg;
        icmp_ln393_6_reg_772_pp0_iter3_reg <= icmp_ln393_6_reg_772_pp0_iter2_reg;
        icmp_ln393_6_reg_772_pp0_iter4_reg <= icmp_ln393_6_reg_772_pp0_iter3_reg;
        icmp_ln393_6_reg_772_pp0_iter5_reg <= icmp_ln393_6_reg_772_pp0_iter4_reg;
        icmp_ln393_6_reg_772_pp0_iter6_reg <= icmp_ln393_6_reg_772_pp0_iter5_reg;
        icmp_ln393_7_reg_777_pp0_iter2_reg <= icmp_ln393_7_reg_777_pp0_iter1_reg;
        icmp_ln393_7_reg_777_pp0_iter3_reg <= icmp_ln393_7_reg_777_pp0_iter2_reg;
        icmp_ln393_7_reg_777_pp0_iter4_reg <= icmp_ln393_7_reg_777_pp0_iter3_reg;
        icmp_ln393_7_reg_777_pp0_iter5_reg <= icmp_ln393_7_reg_777_pp0_iter4_reg;
        icmp_ln393_7_reg_777_pp0_iter6_reg <= icmp_ln393_7_reg_777_pp0_iter5_reg;
        icmp_ln393_reg_742_pp0_iter2_reg <= icmp_ln393_reg_742_pp0_iter1_reg;
        icmp_ln393_reg_742_pp0_iter3_reg <= icmp_ln393_reg_742_pp0_iter2_reg;
        icmp_ln393_reg_742_pp0_iter4_reg <= icmp_ln393_reg_742_pp0_iter3_reg;
        icmp_ln393_reg_742_pp0_iter5_reg <= icmp_ln393_reg_742_pp0_iter4_reg;
        icmp_ln393_reg_742_pp0_iter6_reg <= icmp_ln393_reg_742_pp0_iter5_reg;
        psum_1_addr_reg_836_pp0_iter10_reg <= psum_1_addr_reg_836_pp0_iter9_reg;
        psum_1_addr_reg_836_pp0_iter6_reg <= psum_1_addr_reg_836;
        psum_1_addr_reg_836_pp0_iter7_reg <= psum_1_addr_reg_836_pp0_iter6_reg;
        psum_1_addr_reg_836_pp0_iter8_reg <= psum_1_addr_reg_836_pp0_iter7_reg;
        psum_1_addr_reg_836_pp0_iter9_reg <= psum_1_addr_reg_836_pp0_iter8_reg;
        psum_2_addr_reg_842_pp0_iter10_reg <= psum_2_addr_reg_842_pp0_iter9_reg;
        psum_2_addr_reg_842_pp0_iter6_reg <= psum_2_addr_reg_842;
        psum_2_addr_reg_842_pp0_iter7_reg <= psum_2_addr_reg_842_pp0_iter6_reg;
        psum_2_addr_reg_842_pp0_iter8_reg <= psum_2_addr_reg_842_pp0_iter7_reg;
        psum_2_addr_reg_842_pp0_iter9_reg <= psum_2_addr_reg_842_pp0_iter8_reg;
        psum_3_addr_reg_848_pp0_iter10_reg <= psum_3_addr_reg_848_pp0_iter9_reg;
        psum_3_addr_reg_848_pp0_iter6_reg <= psum_3_addr_reg_848;
        psum_3_addr_reg_848_pp0_iter7_reg <= psum_3_addr_reg_848_pp0_iter6_reg;
        psum_3_addr_reg_848_pp0_iter8_reg <= psum_3_addr_reg_848_pp0_iter7_reg;
        psum_3_addr_reg_848_pp0_iter9_reg <= psum_3_addr_reg_848_pp0_iter8_reg;
        psum_4_addr_reg_854_pp0_iter10_reg <= psum_4_addr_reg_854_pp0_iter9_reg;
        psum_4_addr_reg_854_pp0_iter6_reg <= psum_4_addr_reg_854;
        psum_4_addr_reg_854_pp0_iter7_reg <= psum_4_addr_reg_854_pp0_iter6_reg;
        psum_4_addr_reg_854_pp0_iter8_reg <= psum_4_addr_reg_854_pp0_iter7_reg;
        psum_4_addr_reg_854_pp0_iter9_reg <= psum_4_addr_reg_854_pp0_iter8_reg;
        psum_5_addr_reg_860_pp0_iter10_reg <= psum_5_addr_reg_860_pp0_iter9_reg;
        psum_5_addr_reg_860_pp0_iter6_reg <= psum_5_addr_reg_860;
        psum_5_addr_reg_860_pp0_iter7_reg <= psum_5_addr_reg_860_pp0_iter6_reg;
        psum_5_addr_reg_860_pp0_iter8_reg <= psum_5_addr_reg_860_pp0_iter7_reg;
        psum_5_addr_reg_860_pp0_iter9_reg <= psum_5_addr_reg_860_pp0_iter8_reg;
        psum_6_addr_reg_866_pp0_iter10_reg <= psum_6_addr_reg_866_pp0_iter9_reg;
        psum_6_addr_reg_866_pp0_iter6_reg <= psum_6_addr_reg_866;
        psum_6_addr_reg_866_pp0_iter7_reg <= psum_6_addr_reg_866_pp0_iter6_reg;
        psum_6_addr_reg_866_pp0_iter8_reg <= psum_6_addr_reg_866_pp0_iter7_reg;
        psum_6_addr_reg_866_pp0_iter9_reg <= psum_6_addr_reg_866_pp0_iter8_reg;
        psum_7_addr_reg_872_pp0_iter10_reg <= psum_7_addr_reg_872_pp0_iter9_reg;
        psum_7_addr_reg_872_pp0_iter6_reg <= psum_7_addr_reg_872;
        psum_7_addr_reg_872_pp0_iter7_reg <= psum_7_addr_reg_872_pp0_iter6_reg;
        psum_7_addr_reg_872_pp0_iter8_reg <= psum_7_addr_reg_872_pp0_iter7_reg;
        psum_7_addr_reg_872_pp0_iter9_reg <= psum_7_addr_reg_872_pp0_iter8_reg;
        psum_addr_1_reg_830_pp0_iter10_reg <= psum_addr_1_reg_830_pp0_iter9_reg;
        psum_addr_1_reg_830_pp0_iter6_reg <= psum_addr_1_reg_830;
        psum_addr_1_reg_830_pp0_iter7_reg <= psum_addr_1_reg_830_pp0_iter6_reg;
        psum_addr_1_reg_830_pp0_iter8_reg <= psum_addr_1_reg_830_pp0_iter7_reg;
        psum_addr_1_reg_830_pp0_iter9_reg <= psum_addr_1_reg_830_pp0_iter8_reg;
        tmp_reg_698_pp0_iter10_reg <= tmp_reg_698_pp0_iter9_reg;
        tmp_reg_698_pp0_iter2_reg <= tmp_reg_698_pp0_iter1_reg;
        tmp_reg_698_pp0_iter3_reg <= tmp_reg_698_pp0_iter2_reg;
        tmp_reg_698_pp0_iter4_reg <= tmp_reg_698_pp0_iter3_reg;
        tmp_reg_698_pp0_iter5_reg <= tmp_reg_698_pp0_iter4_reg;
        tmp_reg_698_pp0_iter6_reg <= tmp_reg_698_pp0_iter5_reg;
        tmp_reg_698_pp0_iter7_reg <= tmp_reg_698_pp0_iter6_reg;
        tmp_reg_698_pp0_iter8_reg <= tmp_reg_698_pp0_iter7_reg;
        tmp_reg_698_pp0_iter9_reg <= tmp_reg_698_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln393_1_reg_747_pp0_iter1_reg <= icmp_ln393_1_reg_747;
        icmp_ln393_2_reg_752_pp0_iter1_reg <= icmp_ln393_2_reg_752;
        icmp_ln393_3_reg_757_pp0_iter1_reg <= icmp_ln393_3_reg_757;
        icmp_ln393_4_reg_762_pp0_iter1_reg <= icmp_ln393_4_reg_762;
        icmp_ln393_5_reg_767_pp0_iter1_reg <= icmp_ln393_5_reg_767;
        icmp_ln393_6_reg_772_pp0_iter1_reg <= icmp_ln393_6_reg_772;
        icmp_ln393_7_reg_777_pp0_iter1_reg <= icmp_ln393_7_reg_777;
        icmp_ln393_reg_742_pp0_iter1_reg <= icmp_ln393_reg_742;
        tmp_reg_698_pp0_iter1_reg <= tmp_reg_698;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln387_fu_353_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_114_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln393_1_reg_747 <= icmp_ln393_1_fu_455_p2;
        icmp_ln393_2_reg_752 <= icmp_ln393_2_fu_467_p2;
        icmp_ln393_3_reg_757 <= icmp_ln393_3_fu_479_p2;
        icmp_ln393_4_reg_762 <= icmp_ln393_4_fu_491_p2;
        icmp_ln393_5_reg_767 <= icmp_ln393_5_fu_503_p2;
        icmp_ln393_6_reg_772 <= icmp_ln393_6_fu_515_p2;
        icmp_ln393_7_reg_777 <= icmp_ln393_7_fu_527_p2;
        icmp_ln393_reg_742 <= icmp_ln393_fu_443_p2;
        tmp_2_reg_737 <= {{q1_s_dout[127:64]}};
        tmp_3_reg_707 <= {{q1_s_dout[191:128]}};
        tmp_4_reg_712 <= {{q1_s_dout[255:192]}};
        tmp_5_reg_717 <= {{q1_s_dout[319:256]}};
        tmp_6_reg_722 <= {{q1_s_dout[383:320]}};
        trunc_ln78_2_reg_732 <= {{q1_s_dout[511:448]}};
        trunc_ln78_reg_702 <= trunc_ln78_fu_363_p1;
        trunc_ln_reg_727 <= {{q1_s_dout[447:384]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln393_reg_742_pp0_iter5_reg == 1'd1) & (tmp_reg_698_pp0_iter5_reg == 1'd1))) begin
        mul1_reg_878 <= grp_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln393_1_reg_747_pp0_iter5_reg == 1'd1) & (tmp_reg_698_pp0_iter5_reg == 1'd1))) begin
        mul37_1_reg_888 <= grp_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln393_2_reg_752_pp0_iter5_reg == 1'd1) & (tmp_reg_698_pp0_iter5_reg == 1'd1))) begin
        mul37_2_reg_893 <= grp_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln393_3_reg_757_pp0_iter5_reg == 1'd1) & (tmp_reg_698_pp0_iter5_reg == 1'd1))) begin
        mul37_3_reg_898 <= grp_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln393_4_reg_762_pp0_iter5_reg == 1'd1) & (tmp_reg_698_pp0_iter5_reg == 1'd1))) begin
        mul37_4_reg_903 <= grp_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln393_5_reg_767_pp0_iter5_reg == 1'd1) & (tmp_reg_698_pp0_iter5_reg == 1'd1))) begin
        mul37_5_reg_908 <= grp_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln393_6_reg_772_pp0_iter5_reg == 1'd1) & (tmp_reg_698_pp0_iter5_reg == 1'd1))) begin
        mul37_6_reg_913 <= grp_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln393_7_reg_777_pp0_iter5_reg == 1'd1) & (tmp_reg_698_pp0_iter5_reg == 1'd1))) begin
        mul37_7_reg_918 <= grp_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_698_pp0_iter4_reg == 1'd1))) begin
        psum_1_addr_reg_836 <= idxprom40_fu_587_p1;
        psum_2_addr_reg_842 <= idxprom40_fu_587_p1;
        psum_3_addr_reg_848 <= idxprom40_fu_587_p1;
        psum_4_addr_reg_854 <= idxprom40_fu_587_p1;
        psum_5_addr_reg_860 <= idxprom40_fu_587_p1;
        psum_6_addr_reg_866 <= idxprom40_fu_587_p1;
        psum_7_addr_reg_872 <= idxprom40_fu_587_p1;
        psum_addr_1_reg_830 <= idxprom40_fu_587_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (tmp_reg_698_pp0_iter5_reg == 1'd1))) begin
        psum_load_reg_883 <= psum_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln387_fu_353_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_698 <= tmp_nbreadreq_fu_114_p3;
    end
end

always @ (*) begin
    if (((icmp_ln387_fu_353_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 32'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_1_ce0 = 1'b1;
    end else begin
        psum_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_1_ce1 = 1'b1;
    end else begin
        psum_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (tmp_reg_698_pp0_iter10_reg == 1'd1))) begin
        psum_1_we0 = 1'b1;
    end else begin
        psum_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_2_ce0 = 1'b1;
    end else begin
        psum_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_2_ce1 = 1'b1;
    end else begin
        psum_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (tmp_reg_698_pp0_iter10_reg == 1'd1))) begin
        psum_2_we0 = 1'b1;
    end else begin
        psum_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_3_ce0 = 1'b1;
    end else begin
        psum_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_3_ce1 = 1'b1;
    end else begin
        psum_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (tmp_reg_698_pp0_iter10_reg == 1'd1))) begin
        psum_3_we0 = 1'b1;
    end else begin
        psum_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_4_ce0 = 1'b1;
    end else begin
        psum_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_4_ce1 = 1'b1;
    end else begin
        psum_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (tmp_reg_698_pp0_iter10_reg == 1'd1))) begin
        psum_4_we0 = 1'b1;
    end else begin
        psum_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_5_ce0 = 1'b1;
    end else begin
        psum_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_5_ce1 = 1'b1;
    end else begin
        psum_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (tmp_reg_698_pp0_iter10_reg == 1'd1))) begin
        psum_5_we0 = 1'b1;
    end else begin
        psum_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_6_ce0 = 1'b1;
    end else begin
        psum_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_6_ce1 = 1'b1;
    end else begin
        psum_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (tmp_reg_698_pp0_iter10_reg == 1'd1))) begin
        psum_6_we0 = 1'b1;
    end else begin
        psum_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_7_ce0 = 1'b1;
    end else begin
        psum_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_7_ce1 = 1'b1;
    end else begin
        psum_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (tmp_reg_698_pp0_iter10_reg == 1'd1))) begin
        psum_7_we0 = 1'b1;
    end else begin
        psum_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_ce0 = 1'b1;
    end else begin
        psum_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        psum_ce1 = 1'b1;
    end else begin
        psum_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (tmp_reg_698_pp0_iter10_reg == 1'd1))) begin
        psum_we0 = 1'b1;
    end else begin
        psum_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln387_fu_353_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_nbreadreq_fu_114_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (q1_s_empty_n == 1'b1))) begin
        q1_s_read = 1'b1;
    end else begin
        q1_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_999 = ((icmp_ln387_fu_353_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_nbreadreq_fu_114_p3 == 1'd1));
end

always @ (*) begin
    ap_enable_operation_104 = (tmp_reg_698_pp0_iter4_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_124 = (tmp_reg_698_pp0_iter5_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_126 = (tmp_reg_698_pp0_iter5_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_128 = (tmp_reg_698_pp0_iter5_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_130 = (tmp_reg_698_pp0_iter5_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_132 = (tmp_reg_698_pp0_iter5_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_134 = (tmp_reg_698_pp0_iter5_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_136 = (tmp_reg_698_pp0_iter5_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_138 = (tmp_reg_698_pp0_iter5_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_142 = (tmp_reg_698_pp0_iter6_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_145 = (tmp_reg_698_pp0_iter6_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_148 = (tmp_reg_698_pp0_iter6_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_151 = (tmp_reg_698_pp0_iter6_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_154 = (tmp_reg_698_pp0_iter6_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_157 = (tmp_reg_698_pp0_iter6_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_160 = (tmp_reg_698_pp0_iter6_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_187 = (tmp_reg_698_pp0_iter10_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_189 = (tmp_reg_698_pp0_iter10_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_191 = (tmp_reg_698_pp0_iter10_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_193 = (tmp_reg_698_pp0_iter10_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_195 = (tmp_reg_698_pp0_iter10_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_197 = (tmp_reg_698_pp0_iter10_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_199 = (tmp_reg_698_pp0_iter10_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_201 = (tmp_reg_698_pp0_iter10_reg == 1'd1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

always @ (*) begin
    ap_enable_state12_pp0_iter11_stage0 = ((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state6_pp0_iter5_stage0 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state7_pp0_iter6_stage0 = ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state8_pp0_iter7_stage0 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln78_1_fu_554_p1 = tmp_3_reg_707;

assign bitcast_ln78_2_fu_559_p1 = tmp_4_reg_712;

assign bitcast_ln78_3_fu_564_p1 = tmp_5_reg_717;

assign bitcast_ln78_4_fu_569_p1 = tmp_6_reg_722;

assign bitcast_ln78_5_fu_574_p1 = trunc_ln_reg_727;

assign bitcast_ln78_6_fu_579_p1 = trunc_ln78_2_reg_732;

assign bitcast_ln78_fu_549_p1 = tmp_2_reg_737;

assign elem_val_M_elems_fu_544_p1 = trunc_ln78_reg_702;

assign empty_fu_437_p2 = ap_sig_allocacmp_i << 32'd3;

assign grp_fu_262_p1 = ((icmp_ln393_1_reg_747_pp0_iter6_reg[0:0] == 1'b1) ? mul37_1_reg_888 : 64'd0);

assign grp_fu_268_p1 = ((icmp_ln393_2_reg_752_pp0_iter6_reg[0:0] == 1'b1) ? mul37_2_reg_893 : 64'd0);

assign grp_fu_274_p1 = ((icmp_ln393_3_reg_757_pp0_iter6_reg[0:0] == 1'b1) ? mul37_3_reg_898 : 64'd0);

assign grp_fu_280_p1 = ((icmp_ln393_4_reg_762_pp0_iter6_reg[0:0] == 1'b1) ? mul37_4_reg_903 : 64'd0);

assign grp_fu_286_p1 = ((icmp_ln393_5_reg_767_pp0_iter6_reg[0:0] == 1'b1) ? mul37_5_reg_908 : 64'd0);

assign grp_fu_292_p1 = ((icmp_ln393_6_reg_772_pp0_iter6_reg[0:0] == 1'b1) ? mul37_6_reg_913 : 64'd0);

assign grp_fu_298_p1 = ((icmp_ln393_7_reg_777_pp0_iter6_reg[0:0] == 1'b1) ? mul37_7_reg_918 : 64'd0);

assign grp_fu_478_p_ce = 1'b1;

assign grp_fu_478_p_din0 = psum_load_reg_883;

assign grp_fu_478_p_din1 = select_ln393_fu_624_p3;

assign grp_fu_478_p_opcode = 2'd0;

assign i_5_fu_533_p2 = (ap_sig_allocacmp_i + 32'd1);

assign icmp_ln387_fu_353_p2 = (($signed(ap_sig_allocacmp_i) < $signed(sext_ln374_cast_fu_336_p1)) ? 1'b1 : 1'b0);

assign icmp_ln393_1_fu_455_p2 = (($signed(or_ln393_fu_449_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln393_2_fu_467_p2 = (($signed(or_ln393_1_fu_461_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln393_3_fu_479_p2 = (($signed(or_ln393_2_fu_473_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln393_4_fu_491_p2 = (($signed(or_ln393_3_fu_485_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln393_5_fu_503_p2 = (($signed(or_ln393_4_fu_497_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln393_6_fu_515_p2 = (($signed(or_ln393_5_fu_509_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln393_7_fu_527_p2 = (($signed(or_ln393_6_fu_521_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln393_fu_443_p2 = (($signed(empty_fu_437_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln397_fu_605_p2 = ((idx_1_fu_599_p2 == 32'd7) ? 1'b1 : 1'b0);

assign idx_1_fu_599_p2 = (idx_fu_94 + 32'd1);

assign idx_2_fu_611_p3 = ((icmp_ln397_fu_605_p2[0:0] == 1'b1) ? 32'd0 : idx_1_fu_599_p2);

assign idxprom40_fu_587_p1 = idx_fu_94;

assign or_ln393_1_fu_461_p2 = (empty_fu_437_p2 | 32'd2);

assign or_ln393_2_fu_473_p2 = (empty_fu_437_p2 | 32'd3);

assign or_ln393_3_fu_485_p2 = (empty_fu_437_p2 | 32'd4);

assign or_ln393_4_fu_497_p2 = (empty_fu_437_p2 | 32'd5);

assign or_ln393_5_fu_509_p2 = (empty_fu_437_p2 | 32'd6);

assign or_ln393_6_fu_521_p2 = (empty_fu_437_p2 | 32'd7);

assign or_ln393_fu_449_p2 = (empty_fu_437_p2 | 32'd1);

assign psum_1_address0 = psum_1_addr_reg_836_pp0_iter10_reg;

assign psum_1_address1 = psum_1_addr_reg_836;

assign psum_1_d0 = grp_fu_262_p2;

assign psum_2_address0 = psum_2_addr_reg_842_pp0_iter10_reg;

assign psum_2_address1 = psum_2_addr_reg_842;

assign psum_2_d0 = grp_fu_268_p2;

assign psum_3_address0 = psum_3_addr_reg_848_pp0_iter10_reg;

assign psum_3_address1 = psum_3_addr_reg_848;

assign psum_3_d0 = grp_fu_274_p2;

assign psum_4_address0 = psum_4_addr_reg_854_pp0_iter10_reg;

assign psum_4_address1 = psum_4_addr_reg_854;

assign psum_4_d0 = grp_fu_280_p2;

assign psum_5_address0 = psum_5_addr_reg_860_pp0_iter10_reg;

assign psum_5_address1 = psum_5_addr_reg_860;

assign psum_5_d0 = grp_fu_286_p2;

assign psum_6_address0 = psum_6_addr_reg_866_pp0_iter10_reg;

assign psum_6_address1 = psum_6_addr_reg_866;

assign psum_6_d0 = grp_fu_292_p2;

assign psum_7_address0 = psum_7_addr_reg_872_pp0_iter10_reg;

assign psum_7_address1 = psum_7_addr_reg_872;

assign psum_7_d0 = grp_fu_298_p2;

assign psum_address0 = psum_addr_1_reg_830_pp0_iter10_reg;

assign psum_address1 = idxprom40_fu_587_p1;

assign psum_d0 = grp_fu_478_p_dout0;

assign select_ln393_fu_624_p3 = ((icmp_ln393_reg_742_pp0_iter6_reg[0:0] == 1'b1) ? mul1_reg_878 : 64'd0);

assign sext_ln374_cast_fu_336_p1 = $signed(sext_ln374);

assign tmp_nbreadreq_fu_114_p3 = q1_s_empty_n;

assign trunc_ln78_fu_363_p1 = q1_s_dout[63:0];

endmodule //dot_res_dot_res_Pipeline_comp1
