// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="vecp_mux_vecp_mux,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.837000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=208,HLS_SYN_LUT=551,HLS_VERSION=2022_2}" *)

module vecp_mux (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rp_time,
        M,
        q_gbc_s_dout,
        q_gbc_s_empty_n,
        q_gbc_s_read,
        q_gbc_peek_dout,
        q_gbc_peek_empty_n,
        q_gbc_peek_read,
        q_in1_s_dout,
        q_in1_s_empty_n,
        q_in1_s_read,
        q_in1_peek_dout,
        q_in1_peek_empty_n,
        q_in1_peek_read,
        q_in2_s_dout,
        q_in2_s_empty_n,
        q_in2_s_read,
        q_in2_peek_dout,
        q_in2_peek_empty_n,
        q_in2_peek_read,
        q_out_din,
        q_out_full_n,
        q_out_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] rp_time;
input  [31:0] M;
input  [1:0] q_gbc_s_dout;
input   q_gbc_s_empty_n;
output   q_gbc_s_read;
input  [1:0] q_gbc_peek_dout;
input   q_gbc_peek_empty_n;
output   q_gbc_peek_read;
input  [512:0] q_in1_s_dout;
input   q_in1_s_empty_n;
output   q_in1_s_read;
input  [512:0] q_in1_peek_dout;
input   q_in1_peek_empty_n;
output   q_in1_peek_read;
input  [512:0] q_in2_s_dout;
input   q_in2_s_empty_n;
output   q_in2_s_read;
input  [512:0] q_in2_peek_dout;
input   q_in2_peek_empty_n;
output   q_in2_peek_read;
output  [512:0] q_out_din;
input   q_out_full_n;
output   q_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg q_gbc_s_read;
reg q_in1_s_read;
reg q_in2_s_read;
reg[512:0] q_out_din;
reg q_out_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    q_gbc_s_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] and_ln457_fu_218_p2;
reg   [28:0] num_ite_reg_267;
wire   [31:0] sub_fu_205_p2;
reg   [31:0] sub_reg_274;
wire    ap_CS_fsm_state4;
wire   [0:0] term_flag_fu_224_p1;
reg   [0:0] term_flag_reg_285;
wire   [0:0] or_ln460_fu_233_p2;
reg   [0:0] or_ln460_reg_290;
wire   [0:0] xor_ln457_fu_244_p2;
wire    ap_CS_fsm_state7;
wire    grp_vecp_mux_Pipeline_q_fu_159_ap_start;
wire    grp_vecp_mux_Pipeline_q_fu_159_ap_done;
wire    grp_vecp_mux_Pipeline_q_fu_159_ap_idle;
wire    grp_vecp_mux_Pipeline_q_fu_159_ap_ready;
wire    grp_vecp_mux_Pipeline_q_fu_159_q_in1_s_read;
wire   [512:0] grp_vecp_mux_Pipeline_q_fu_159_q_out_din;
wire    grp_vecp_mux_Pipeline_q_fu_159_q_out_write;
wire    grp_vecp_mux_Pipeline_q2_fu_168_ap_start;
wire    grp_vecp_mux_Pipeline_q2_fu_168_ap_done;
wire    grp_vecp_mux_Pipeline_q2_fu_168_ap_idle;
wire    grp_vecp_mux_Pipeline_q2_fu_168_ap_ready;
wire    grp_vecp_mux_Pipeline_q2_fu_168_q_in2_s_read;
wire   [512:0] grp_vecp_mux_Pipeline_q2_fu_168_q_out_din;
wire    grp_vecp_mux_Pipeline_q2_fu_168_q_out_write;
wire    grp_vecp_mux_Pipeline_q1_fu_177_ap_start;
wire    grp_vecp_mux_Pipeline_q1_fu_177_ap_done;
wire    grp_vecp_mux_Pipeline_q1_fu_177_ap_idle;
wire    grp_vecp_mux_Pipeline_q1_fu_177_ap_ready;
wire    grp_vecp_mux_Pipeline_q1_fu_177_q_in2_s_read;
reg   [0:0] phi_ln457_reg_148;
reg    ap_block_state7_on_subcall_done;
reg    grp_vecp_mux_Pipeline_q_fu_159_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_vecp_mux_Pipeline_q2_fu_168_ap_start_reg;
wire    ap_CS_fsm_state6;
reg    grp_vecp_mux_Pipeline_q1_fu_177_ap_start_reg;
reg   [31:0] rp_fu_70;
wire   [31:0] rp_3_fu_239_p2;
reg    ap_block_state5;
wire   [31:0] add_ln451_fu_184_p2;
wire   [0:0] icmp_ln457_fu_213_p2;
wire   [0:0] icmp_ln460_fu_228_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_vecp_mux_Pipeline_q_fu_159_ap_start_reg = 1'b0;
#0 grp_vecp_mux_Pipeline_q2_fu_168_ap_start_reg = 1'b0;
#0 grp_vecp_mux_Pipeline_q1_fu_177_ap_start_reg = 1'b0;
end

vecp_mux_vecp_mux_Pipeline_q grp_vecp_mux_Pipeline_q_fu_159(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_vecp_mux_Pipeline_q_fu_159_ap_start),
    .ap_done(grp_vecp_mux_Pipeline_q_fu_159_ap_done),
    .ap_idle(grp_vecp_mux_Pipeline_q_fu_159_ap_idle),
    .ap_ready(grp_vecp_mux_Pipeline_q_fu_159_ap_ready),
    .sext_ln451(num_ite_reg_267),
    .q_in1_s_dout(q_in1_s_dout),
    .q_in1_s_empty_n(q_in1_s_empty_n),
    .q_in1_s_read(grp_vecp_mux_Pipeline_q_fu_159_q_in1_s_read),
    .q_out_din(grp_vecp_mux_Pipeline_q_fu_159_q_out_din),
    .q_out_full_n(q_out_full_n),
    .q_out_write(grp_vecp_mux_Pipeline_q_fu_159_q_out_write)
);

vecp_mux_vecp_mux_Pipeline_q2 grp_vecp_mux_Pipeline_q2_fu_168(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_vecp_mux_Pipeline_q2_fu_168_ap_start),
    .ap_done(grp_vecp_mux_Pipeline_q2_fu_168_ap_done),
    .ap_idle(grp_vecp_mux_Pipeline_q2_fu_168_ap_idle),
    .ap_ready(grp_vecp_mux_Pipeline_q2_fu_168_ap_ready),
    .sext_ln451(num_ite_reg_267),
    .q_in2_s_dout(q_in2_s_dout),
    .q_in2_s_empty_n(q_in2_s_empty_n),
    .q_in2_s_read(grp_vecp_mux_Pipeline_q2_fu_168_q_in2_s_read),
    .q_out_din(grp_vecp_mux_Pipeline_q2_fu_168_q_out_din),
    .q_out_full_n(q_out_full_n),
    .q_out_write(grp_vecp_mux_Pipeline_q2_fu_168_q_out_write)
);

vecp_mux_vecp_mux_Pipeline_q1 grp_vecp_mux_Pipeline_q1_fu_177(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_vecp_mux_Pipeline_q1_fu_177_ap_start),
    .ap_done(grp_vecp_mux_Pipeline_q1_fu_177_ap_done),
    .ap_idle(grp_vecp_mux_Pipeline_q1_fu_177_ap_idle),
    .ap_ready(grp_vecp_mux_Pipeline_q1_fu_177_ap_ready),
    .sext_ln451(num_ite_reg_267),
    .q_in2_s_dout(q_in2_s_dout),
    .q_in2_s_empty_n(q_in2_s_empty_n),
    .q_in2_s_read(grp_vecp_mux_Pipeline_q1_fu_177_q_in2_s_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_vecp_mux_Pipeline_q1_fu_177_ap_start_reg <= 1'b0;
    end else begin
        if (((or_ln460_reg_290 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            grp_vecp_mux_Pipeline_q1_fu_177_ap_start_reg <= 1'b1;
        end else if ((grp_vecp_mux_Pipeline_q1_fu_177_ap_ready == 1'b1)) begin
            grp_vecp_mux_Pipeline_q1_fu_177_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_vecp_mux_Pipeline_q2_fu_168_ap_start_reg <= 1'b0;
    end else begin
        if (((or_ln460_reg_290 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
            grp_vecp_mux_Pipeline_q2_fu_168_ap_start_reg <= 1'b1;
        end else if ((grp_vecp_mux_Pipeline_q2_fu_168_ap_ready == 1'b1)) begin
            grp_vecp_mux_Pipeline_q2_fu_168_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_vecp_mux_Pipeline_q_fu_159_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_vecp_mux_Pipeline_q_fu_159_ap_start_reg <= 1'b1;
        end else if ((grp_vecp_mux_Pipeline_q_fu_159_ap_ready == 1'b1)) begin
            grp_vecp_mux_Pipeline_q_fu_159_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done))) begin
        phi_ln457_reg_148 <= xor_ln457_fu_244_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        phi_ln457_reg_148 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rp_fu_70 <= 32'd4294967295;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done))) begin
        rp_fu_70 <= rp_3_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        num_ite_reg_267 <= {{add_ln451_fu_184_p2[31:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln457_fu_218_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        or_ln460_reg_290 <= or_ln460_fu_233_p2;
        term_flag_reg_285 <= term_flag_fu_224_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sub_reg_274 <= sub_fu_205_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_vecp_mux_Pipeline_q_fu_159_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((1'd1 == and_ln457_fu_218_p2) & (q_gbc_s_empty_n == 1'b0))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state7_on_subcall_done)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'd1 == and_ln457_fu_218_p2) & (q_gbc_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln457_fu_218_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'd1 == and_ln457_fu_218_p2) & (q_gbc_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln457_fu_218_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln457_fu_218_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        q_gbc_s_blk_n = q_gbc_s_empty_n;
    end else begin
        q_gbc_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'd1 == and_ln457_fu_218_p2) & (q_gbc_s_empty_n == 1'b0)) & (1'd1 == and_ln457_fu_218_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        q_gbc_s_read = 1'b1;
    end else begin
        q_gbc_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        q_in1_s_read = grp_vecp_mux_Pipeline_q_fu_159_q_in1_s_read;
    end else begin
        q_in1_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        if ((or_ln460_reg_290 == 1'd1)) begin
            q_in2_s_read = grp_vecp_mux_Pipeline_q1_fu_177_q_in2_s_read;
        end else if ((or_ln460_reg_290 == 1'd0)) begin
            q_in2_s_read = grp_vecp_mux_Pipeline_q2_fu_168_q_in2_s_read;
        end else begin
            q_in2_s_read = 1'b0;
        end
    end else begin
        q_in2_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln460_reg_290 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        q_out_din = grp_vecp_mux_Pipeline_q2_fu_168_q_out_din;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        q_out_din = grp_vecp_mux_Pipeline_q_fu_159_q_out_din;
    end else begin
        q_out_din = grp_vecp_mux_Pipeline_q2_fu_168_q_out_din;
    end
end

always @ (*) begin
    if (((or_ln460_reg_290 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        q_out_write = grp_vecp_mux_Pipeline_q2_fu_168_q_out_write;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        q_out_write = grp_vecp_mux_Pipeline_q_fu_159_q_out_write;
    end else begin
        q_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_vecp_mux_Pipeline_q_fu_159_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if ((~((1'd1 == and_ln457_fu_218_p2) & (q_gbc_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5) & (1'd0 == and_ln457_fu_218_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'd1 == and_ln457_fu_218_p2) & (q_gbc_s_empty_n == 1'b0)) & (1'd1 == and_ln457_fu_218_p2) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln451_fu_184_p2 = (M + 32'd7);

assign and_ln457_fu_218_p2 = (phi_ln457_reg_148 & icmp_ln457_fu_213_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state5 = ((1'd1 == and_ln457_fu_218_p2) & (q_gbc_s_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_on_subcall_done = (((or_ln460_reg_290 == 1'd1) & (grp_vecp_mux_Pipeline_q1_fu_177_ap_done == 1'b0)) | ((or_ln460_reg_290 == 1'd0) & (grp_vecp_mux_Pipeline_q2_fu_168_ap_done == 1'b0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_vecp_mux_Pipeline_q1_fu_177_ap_start = grp_vecp_mux_Pipeline_q1_fu_177_ap_start_reg;

assign grp_vecp_mux_Pipeline_q2_fu_168_ap_start = grp_vecp_mux_Pipeline_q2_fu_168_ap_start_reg;

assign grp_vecp_mux_Pipeline_q_fu_159_ap_start = grp_vecp_mux_Pipeline_q_fu_159_ap_start_reg;

assign icmp_ln457_fu_213_p2 = (($signed(rp_fu_70) < $signed(rp_time)) ? 1'b1 : 1'b0);

assign icmp_ln460_fu_228_p2 = ((rp_fu_70 == sub_reg_274) ? 1'b1 : 1'b0);

assign or_ln460_fu_233_p2 = (term_flag_fu_224_p1 | icmp_ln460_fu_228_p2);

assign q_gbc_peek_read = 1'b0;

assign q_in1_peek_read = 1'b0;

assign q_in2_peek_read = 1'b0;

assign rp_3_fu_239_p2 = (rp_fu_70 + 32'd1);

assign sub_fu_205_p2 = ($signed(rp_time) + $signed(32'd4294967295));

assign term_flag_fu_224_p1 = q_gbc_s_dout[0:0];

assign xor_ln457_fu_244_p2 = (term_flag_reg_285 ^ 1'd1);

endmodule //vecp_mux
