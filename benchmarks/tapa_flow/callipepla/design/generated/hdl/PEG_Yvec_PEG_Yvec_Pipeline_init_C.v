// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

module PEG_Yvec_PEG_Yvec_Pipeline_init_C (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_v_init,
        local_C_7_address1,
        local_C_7_ce1,
        local_C_7_we1,
        local_C_7_d1,
        local_C_6_address1,
        local_C_6_ce1,
        local_C_6_we1,
        local_C_6_d1,
        local_C_5_address1,
        local_C_5_ce1,
        local_C_5_we1,
        local_C_5_d1,
        local_C_4_address1,
        local_C_4_ce1,
        local_C_4_we1,
        local_C_4_d1,
        local_C_3_address1,
        local_C_3_ce1,
        local_C_3_we1,
        local_C_3_d1,
        local_C_2_address1,
        local_C_2_ce1,
        local_C_2_we1,
        local_C_2_d1,
        local_C_1_address1,
        local_C_1_ce1,
        local_C_1_we1,
        local_C_1_d1,
        local_C_address1,
        local_C_ce1,
        local_C_we1,
        local_C_d1
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [25:0] num_v_init;
output  [13:0] local_C_7_address1;
output   local_C_7_ce1;
output   local_C_7_we1;
output  [63:0] local_C_7_d1;
output  [13:0] local_C_6_address1;
output   local_C_6_ce1;
output   local_C_6_we1;
output  [63:0] local_C_6_d1;
output  [13:0] local_C_5_address1;
output   local_C_5_ce1;
output   local_C_5_we1;
output  [63:0] local_C_5_d1;
output  [13:0] local_C_4_address1;
output   local_C_4_ce1;
output   local_C_4_we1;
output  [63:0] local_C_4_d1;
output  [13:0] local_C_3_address1;
output   local_C_3_ce1;
output   local_C_3_we1;
output  [63:0] local_C_3_d1;
output  [13:0] local_C_2_address1;
output   local_C_2_ce1;
output   local_C_2_we1;
output  [63:0] local_C_2_d1;
output  [13:0] local_C_1_address1;
output   local_C_1_ce1;
output   local_C_1_we1;
output  [63:0] local_C_1_d1;
output  [13:0] local_C_address1;
output   local_C_ce1;
output   local_C_we1;
output  [63:0] local_C_d1;

reg ap_idle;
reg local_C_7_ce1;
reg local_C_7_we1;
reg local_C_6_ce1;
reg local_C_6_we1;
reg local_C_5_ce1;
reg local_C_5_we1;
reg local_C_4_ce1;
reg local_C_4_we1;
reg local_C_3_ce1;
reg local_C_3_we1;
reg local_C_2_ce1;
reg local_C_2_we1;
reg local_C_1_ce1;
reg local_C_1_we1;
reg local_C_ce1;
reg local_C_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln302_fu_220_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln302_fu_232_p1;
reg   [13:0] i_fu_54;
wire   [13:0] add_ln302_fu_226_p2;
wire    ap_loop_init;
reg   [13:0] ap_sig_allocacmp_i_3;
wire   [25:0] zext_ln302_1_fu_216_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

PEG_Yvec_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln302_fu_220_p2 == 1'd1)) begin
            i_fu_54 <= add_ln302_fu_226_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 14'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln302_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 14'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_54;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_1_ce1 = 1'b1;
    end else begin
        local_C_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln302_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_1_we1 = 1'b1;
    end else begin
        local_C_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_2_ce1 = 1'b1;
    end else begin
        local_C_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln302_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_2_we1 = 1'b1;
    end else begin
        local_C_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_3_ce1 = 1'b1;
    end else begin
        local_C_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln302_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_3_we1 = 1'b1;
    end else begin
        local_C_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_4_ce1 = 1'b1;
    end else begin
        local_C_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln302_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_4_we1 = 1'b1;
    end else begin
        local_C_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_5_ce1 = 1'b1;
    end else begin
        local_C_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln302_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_5_we1 = 1'b1;
    end else begin
        local_C_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_6_ce1 = 1'b1;
    end else begin
        local_C_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln302_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_6_we1 = 1'b1;
    end else begin
        local_C_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_7_ce1 = 1'b1;
    end else begin
        local_C_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln302_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_7_we1 = 1'b1;
    end else begin
        local_C_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_ce1 = 1'b1;
    end else begin
        local_C_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln302_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        local_C_we1 = 1'b1;
    end else begin
        local_C_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln302_fu_226_p2 = (ap_sig_allocacmp_i_3 + 14'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln302_fu_220_p2 = (($signed(zext_ln302_1_fu_216_p1) < $signed(num_v_init)) ? 1'b1 : 1'b0);

assign local_C_1_address1 = zext_ln302_fu_232_p1;

assign local_C_1_d1 = 64'd0;

assign local_C_2_address1 = zext_ln302_fu_232_p1;

assign local_C_2_d1 = 64'd0;

assign local_C_3_address1 = zext_ln302_fu_232_p1;

assign local_C_3_d1 = 64'd0;

assign local_C_4_address1 = zext_ln302_fu_232_p1;

assign local_C_4_d1 = 64'd0;

assign local_C_5_address1 = zext_ln302_fu_232_p1;

assign local_C_5_d1 = 64'd0;

assign local_C_6_address1 = zext_ln302_fu_232_p1;

assign local_C_6_d1 = 64'd0;

assign local_C_7_address1 = zext_ln302_fu_232_p1;

assign local_C_7_d1 = 64'd0;

assign local_C_address1 = zext_ln302_fu_232_p1;

assign local_C_d1 = 64'd0;

assign zext_ln302_1_fu_216_p1 = ap_sig_allocacmp_i_3;

assign zext_ln302_fu_232_p1 = ap_sig_allocacmp_i_3;

endmodule //PEG_Yvec_PEG_Yvec_Pipeline_init_C
