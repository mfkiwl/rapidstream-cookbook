// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="Arbiter_Y_Arbiter_Y,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.243000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=228,HLS_SYN_LUT=585,HLS_VERSION=2022_2}" *)

module Arbiter_Y (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rp_time,
        M,
        fifo_in_0_dout,
        fifo_in_0_empty_n,
        fifo_in_0_read,
        fifo_in_1_dout,
        fifo_in_1_empty_n,
        fifo_in_1_read,
        fifo_in_peek_0_dout,
        fifo_in_peek_0_empty_n,
        fifo_in_peek_0_read,
        fifo_in_peek_1_dout,
        fifo_in_peek_1_empty_n,
        fifo_in_peek_1_read,
        fifo_out_din,
        fifo_out_full_n,
        fifo_out_write,
        q_gbc_s_dout,
        q_gbc_s_empty_n,
        q_gbc_s_read,
        q_gbc_peek_dout,
        q_gbc_peek_empty_n,
        q_gbc_peek_read,
        q_gbc_out_din,
        q_gbc_out_full_n,
        q_gbc_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] rp_time;
input  [31:0] M;
input  [64:0] fifo_in_0_dout;
input   fifo_in_0_empty_n;
output   fifo_in_0_read;
input  [64:0] fifo_in_1_dout;
input   fifo_in_1_empty_n;
output   fifo_in_1_read;
input  [64:0] fifo_in_peek_0_dout;
input   fifo_in_peek_0_empty_n;
output   fifo_in_peek_0_read;
input  [64:0] fifo_in_peek_1_dout;
input   fifo_in_peek_1_empty_n;
output   fifo_in_peek_1_read;
output  [64:0] fifo_out_din;
input   fifo_out_full_n;
output   fifo_out_write;
input  [1:0] q_gbc_s_dout;
input   q_gbc_s_empty_n;
output   q_gbc_s_read;
input  [1:0] q_gbc_peek_dout;
input   q_gbc_peek_empty_n;
output   q_gbc_peek_read;
output  [1:0] q_gbc_out_din;
input   q_gbc_out_full_n;
output   q_gbc_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_in_0_read;
reg fifo_in_1_read;
reg fifo_out_write;
reg q_gbc_s_read;
reg q_gbc_out_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    q_gbc_s_blk_n;
wire    ap_CS_fsm_state5;
reg    q_gbc_out_blk_n;
wire   [29:0] num_pe_output_fu_268_p3;
reg   [29:0] num_pe_output_reg_353;
reg   [28:0] num_out_reg_358;
wire   [0:0] xor_ln306_fu_335_p2;
wire    grp_Arbiter_Y_Pipeline_aby_fu_194_ap_start;
wire    grp_Arbiter_Y_Pipeline_aby_fu_194_ap_done;
wire    grp_Arbiter_Y_Pipeline_aby_fu_194_ap_idle;
wire    grp_Arbiter_Y_Pipeline_aby_fu_194_ap_ready;
wire   [64:0] grp_Arbiter_Y_Pipeline_aby_fu_194_fifo_out_din;
wire    grp_Arbiter_Y_Pipeline_aby_fu_194_fifo_out_write;
wire    grp_Arbiter_Y_Pipeline_aby_fu_194_fifo_in_0_read;
wire    grp_Arbiter_Y_Pipeline_aby_fu_194_fifo_in_1_read;
reg   [0:0] phi_ln306_reg_183;
reg    ap_block_state5;
reg    grp_Arbiter_Y_Pipeline_aby_fu_194_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln306_fu_305_p2;
wire    ap_CS_fsm_state3;
reg   [31:0] rp_fu_90;
wire   [31:0] rp_3_fu_311_p2;
wire   [31:0] add_ln301_fu_206_p2;
wire   [31:0] sub_ln301_fu_220_p2;
wire   [27:0] tmp_6_fu_226_p4;
wire   [28:0] zext_ln301_fu_236_p1;
wire   [27:0] tmp_8_fu_246_p4;
wire   [0:0] tmp_fu_212_p3;
wire   [28:0] sub_ln301_1_fu_240_p2;
wire   [28:0] zext_ln301_1_fu_256_p1;
wire   [28:0] select_ln301_fu_260_p3;
wire   [31:0] add_ln302_fu_276_p2;
wire   [0:0] icmp_ln306_fu_300_p2;
wire   [0:0] term_flag_fu_322_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_Arbiter_Y_Pipeline_aby_fu_194_ap_start_reg = 1'b0;
end

Arbiter_Y_Arbiter_Y_Pipeline_aby grp_Arbiter_Y_Pipeline_aby_fu_194(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Arbiter_Y_Pipeline_aby_fu_194_ap_start),
    .ap_done(grp_Arbiter_Y_Pipeline_aby_fu_194_ap_done),
    .ap_idle(grp_Arbiter_Y_Pipeline_aby_fu_194_ap_idle),
    .ap_ready(grp_Arbiter_Y_Pipeline_aby_fu_194_ap_ready),
    .num_pe_output(num_pe_output_reg_353),
    .fifo_out_din(grp_Arbiter_Y_Pipeline_aby_fu_194_fifo_out_din),
    .fifo_out_full_n(fifo_out_full_n),
    .fifo_out_write(grp_Arbiter_Y_Pipeline_aby_fu_194_fifo_out_write),
    .fifo_in_0_dout(fifo_in_0_dout),
    .fifo_in_0_empty_n(fifo_in_0_empty_n),
    .fifo_in_0_read(grp_Arbiter_Y_Pipeline_aby_fu_194_fifo_in_0_read),
    .fifo_in_1_dout(fifo_in_1_dout),
    .fifo_in_1_empty_n(fifo_in_1_empty_n),
    .fifo_in_1_read(grp_Arbiter_Y_Pipeline_aby_fu_194_fifo_in_1_read),
    .sext_ln302(num_out_reg_358)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Arbiter_Y_Pipeline_aby_fu_194_ap_start_reg <= 1'b0;
    end else begin
        if (((1'd1 == and_ln306_fu_305_p2) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_Arbiter_Y_Pipeline_aby_fu_194_ap_start_reg <= 1'b1;
        end else if ((grp_Arbiter_Y_Pipeline_aby_fu_194_ap_ready == 1'b1)) begin
            grp_Arbiter_Y_Pipeline_aby_fu_194_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((q_gbc_out_full_n == 1'b0) | (q_gbc_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_ln306_reg_183 <= xor_ln306_fu_335_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln306_reg_183 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rp_fu_90 <= 32'd4294967295;
    end else if (((1'd1 == and_ln306_fu_305_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        rp_fu_90 <= rp_3_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        num_out_reg_358 <= {{add_ln302_fu_276_p2[31:3]}};
        num_pe_output_reg_353[29 : 1] <= num_pe_output_fu_268_p3[29 : 1];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_Arbiter_Y_Pipeline_aby_fu_194_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((q_gbc_out_full_n == 1'b0) | (q_gbc_s_empty_n == 1'b0))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == and_ln306_fu_305_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == and_ln306_fu_305_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fifo_in_0_read = grp_Arbiter_Y_Pipeline_aby_fu_194_fifo_in_0_read;
    end else begin
        fifo_in_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fifo_in_1_read = grp_Arbiter_Y_Pipeline_aby_fu_194_fifo_in_1_read;
    end else begin
        fifo_in_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fifo_out_write = grp_Arbiter_Y_Pipeline_aby_fu_194_fifo_out_write;
    end else begin
        fifo_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        q_gbc_out_blk_n = q_gbc_out_full_n;
    end else begin
        q_gbc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((q_gbc_out_full_n == 1'b0) | (q_gbc_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        q_gbc_out_write = 1'b1;
    end else begin
        q_gbc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        q_gbc_s_blk_n = q_gbc_s_empty_n;
    end else begin
        q_gbc_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((q_gbc_out_full_n == 1'b0) | (q_gbc_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        q_gbc_s_read = 1'b1;
    end else begin
        q_gbc_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == and_ln306_fu_305_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_Arbiter_Y_Pipeline_aby_fu_194_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if ((~((q_gbc_out_full_n == 1'b0) | (q_gbc_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln301_fu_206_p2 = (M + 32'd15);

assign add_ln302_fu_276_p2 = (M + 32'd7);

assign and_ln306_fu_305_p2 = (phi_ln306_reg_183 & icmp_ln306_fu_300_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state5 = ((q_gbc_out_full_n == 1'b0) | (q_gbc_s_empty_n == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign fifo_in_peek_0_read = 1'b0;

assign fifo_in_peek_1_read = 1'b0;

assign fifo_out_din = grp_Arbiter_Y_Pipeline_aby_fu_194_fifo_out_din;

assign grp_Arbiter_Y_Pipeline_aby_fu_194_ap_start = grp_Arbiter_Y_Pipeline_aby_fu_194_ap_start_reg;

assign icmp_ln306_fu_300_p2 = (($signed(rp_fu_90) < $signed(rp_time)) ? 1'b1 : 1'b0);

assign num_pe_output_fu_268_p3 = {{select_ln301_fu_260_p3}, {1'd0}};

assign q_gbc_out_din = {{1'd0}, {term_flag_fu_322_p1}};

assign q_gbc_peek_read = 1'b0;

assign rp_3_fu_311_p2 = (rp_fu_90 + 32'd1);

assign select_ln301_fu_260_p3 = ((tmp_fu_212_p3[0:0] == 1'b1) ? sub_ln301_1_fu_240_p2 : zext_ln301_1_fu_256_p1);

assign sub_ln301_1_fu_240_p2 = (29'd0 - zext_ln301_fu_236_p1);

assign sub_ln301_fu_220_p2 = ($signed(32'd4294967281) - $signed(M));

assign term_flag_fu_322_p1 = q_gbc_s_dout[0:0];

assign tmp_6_fu_226_p4 = {{sub_ln301_fu_220_p2[31:4]}};

assign tmp_8_fu_246_p4 = {{add_ln301_fu_206_p2[31:4]}};

assign tmp_fu_212_p3 = add_ln301_fu_206_p2[32'd31];

assign xor_ln306_fu_335_p2 = (term_flag_fu_322_p1 ^ 1'd1);

assign zext_ln301_1_fu_256_p1 = tmp_8_fu_246_p4;

assign zext_ln301_fu_236_p1 = tmp_6_fu_226_p4;

always @ (posedge ap_clk) begin
    num_pe_output_reg_353[0] <= 1'b0;
end

endmodule //Arbiter_Y
