// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

module updt_x_updt_x_Pipeline_cc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        qout_din,
        qout_full_n,
        qout_write,
        sext_ln412,
        qx_s_dout,
        qx_s_empty_n,
        qx_s_read,
        qp_s_dout,
        qp_s_empty_n,
        qp_s_read,
        alpha
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [512:0] qout_din;
input   qout_full_n;
output   qout_write;
input  [28:0] sext_ln412;
input  [512:0] qx_s_dout;
input   qx_s_empty_n;
output   qx_s_read;
input  [512:0] qp_s_dout;
input   qp_s_empty_n;
output   qp_s_read;
input  [63:0] alpha;

reg ap_idle;
reg qout_write;
reg qx_s_read;
reg qp_s_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
reg   [0:0] and_ln422_reg_512;
reg   [0:0] and_ln422_reg_512_pp0_iter11_reg;
reg    ap_block_state13_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln420_fu_199_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    qout_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] and_ln422_fu_205_p2;
reg   [0:0] and_ln422_reg_512_pp0_iter1_reg;
reg   [0:0] and_ln422_reg_512_pp0_iter2_reg;
reg   [0:0] and_ln422_reg_512_pp0_iter3_reg;
reg   [0:0] and_ln422_reg_512_pp0_iter4_reg;
reg   [0:0] and_ln422_reg_512_pp0_iter5_reg;
reg   [0:0] and_ln422_reg_512_pp0_iter6_reg;
reg   [0:0] and_ln422_reg_512_pp0_iter7_reg;
reg   [0:0] and_ln422_reg_512_pp0_iter8_reg;
reg   [0:0] and_ln422_reg_512_pp0_iter9_reg;
reg   [0:0] and_ln422_reg_512_pp0_iter10_reg;
wire   [63:0] trunc_ln78_fu_215_p1;
reg   [63:0] trunc_ln78_reg_516;
reg   [63:0] trunc_ln78_reg_516_pp0_iter1_reg;
reg   [63:0] trunc_ln78_reg_516_pp0_iter2_reg;
reg   [63:0] trunc_ln78_reg_516_pp0_iter3_reg;
reg   [63:0] trunc_ln78_reg_516_pp0_iter4_reg;
reg   [63:0] trunc_ln78_reg_516_pp0_iter5_reg;
reg   [63:0] trunc_ln78_reg_516_pp0_iter6_reg;
reg   [63:0] tmp_2_reg_521;
reg   [63:0] tmp_2_reg_521_pp0_iter1_reg;
reg   [63:0] tmp_2_reg_521_pp0_iter2_reg;
reg   [63:0] tmp_2_reg_521_pp0_iter3_reg;
reg   [63:0] tmp_2_reg_521_pp0_iter4_reg;
reg   [63:0] tmp_2_reg_521_pp0_iter5_reg;
reg   [63:0] tmp_2_reg_521_pp0_iter6_reg;
reg   [63:0] tmp_4_reg_526;
reg   [63:0] tmp_4_reg_526_pp0_iter1_reg;
reg   [63:0] tmp_4_reg_526_pp0_iter2_reg;
reg   [63:0] tmp_4_reg_526_pp0_iter3_reg;
reg   [63:0] tmp_4_reg_526_pp0_iter4_reg;
reg   [63:0] tmp_4_reg_526_pp0_iter5_reg;
reg   [63:0] tmp_4_reg_526_pp0_iter6_reg;
reg   [63:0] tmp_5_reg_531;
reg   [63:0] tmp_5_reg_531_pp0_iter1_reg;
reg   [63:0] tmp_5_reg_531_pp0_iter2_reg;
reg   [63:0] tmp_5_reg_531_pp0_iter3_reg;
reg   [63:0] tmp_5_reg_531_pp0_iter4_reg;
reg   [63:0] tmp_5_reg_531_pp0_iter5_reg;
reg   [63:0] tmp_5_reg_531_pp0_iter6_reg;
reg   [63:0] tmp_6_reg_536;
reg   [63:0] tmp_6_reg_536_pp0_iter1_reg;
reg   [63:0] tmp_6_reg_536_pp0_iter2_reg;
reg   [63:0] tmp_6_reg_536_pp0_iter3_reg;
reg   [63:0] tmp_6_reg_536_pp0_iter4_reg;
reg   [63:0] tmp_6_reg_536_pp0_iter5_reg;
reg   [63:0] tmp_6_reg_536_pp0_iter6_reg;
reg   [63:0] trunc_ln1_reg_541;
reg   [63:0] trunc_ln1_reg_541_pp0_iter1_reg;
reg   [63:0] trunc_ln1_reg_541_pp0_iter2_reg;
reg   [63:0] trunc_ln1_reg_541_pp0_iter3_reg;
reg   [63:0] trunc_ln1_reg_541_pp0_iter4_reg;
reg   [63:0] trunc_ln1_reg_541_pp0_iter5_reg;
reg   [63:0] trunc_ln1_reg_541_pp0_iter6_reg;
reg   [63:0] trunc_ln78_2_reg_546;
reg   [63:0] trunc_ln78_2_reg_546_pp0_iter1_reg;
reg   [63:0] trunc_ln78_2_reg_546_pp0_iter2_reg;
reg   [63:0] trunc_ln78_2_reg_546_pp0_iter3_reg;
reg   [63:0] trunc_ln78_2_reg_546_pp0_iter4_reg;
reg   [63:0] trunc_ln78_2_reg_546_pp0_iter5_reg;
reg   [63:0] trunc_ln78_2_reg_546_pp0_iter6_reg;
reg   [63:0] tmp_3_reg_551;
reg   [63:0] tmp_3_reg_551_pp0_iter1_reg;
reg   [63:0] tmp_3_reg_551_pp0_iter2_reg;
reg   [63:0] tmp_3_reg_551_pp0_iter3_reg;
reg   [63:0] tmp_3_reg_551_pp0_iter4_reg;
reg   [63:0] tmp_3_reg_551_pp0_iter5_reg;
reg   [63:0] tmp_3_reg_551_pp0_iter6_reg;
wire   [63:0] trunc_ln78_1_fu_293_p1;
reg   [63:0] trunc_ln78_1_reg_556;
reg   [63:0] tmp_7_reg_561;
reg   [63:0] tmp_8_reg_566;
reg   [63:0] tmp_9_reg_571;
reg   [63:0] tmp_10_reg_576;
reg   [63:0] trunc_ln78_3_reg_581;
reg   [63:0] trunc_ln78_4_reg_586;
reg   [63:0] tmp_s_reg_591;
wire   [63:0] grp_fu_155_p2;
reg   [63:0] mul_i_reg_636;
wire   [63:0] grp_fu_159_p2;
reg   [63:0] mul_i_1_reg_641;
wire   [63:0] grp_fu_163_p2;
reg   [63:0] mul_i_2_reg_646;
wire   [63:0] grp_fu_167_p2;
reg   [63:0] mul_i_3_reg_651;
wire   [63:0] grp_fu_171_p2;
reg   [63:0] mul_i_4_reg_656;
wire   [63:0] grp_fu_175_p2;
reg   [63:0] mul_i_5_reg_661;
wire   [63:0] grp_fu_179_p2;
reg   [63:0] mul_i_6_reg_666;
wire   [63:0] grp_fu_183_p2;
reg   [63:0] mul_i_7_reg_671;
wire   [63:0] grp_fu_123_p2;
reg   [63:0] add_i_reg_716;
wire   [63:0] grp_fu_127_p2;
reg   [63:0] add_i_1_reg_721;
wire   [63:0] grp_fu_131_p2;
reg   [63:0] add_i_2_reg_726;
wire   [63:0] grp_fu_135_p2;
reg   [63:0] add_i_3_reg_731;
wire   [63:0] grp_fu_139_p2;
reg   [63:0] add_i_4_reg_736;
wire   [63:0] grp_fu_143_p2;
reg   [63:0] add_i_5_reg_741;
wire   [63:0] grp_fu_147_p2;
reg   [63:0] add_i_6_reg_746;
wire   [63:0] grp_fu_151_p2;
reg   [63:0] add_i_7_reg_751;
reg   [31:0] i_fu_72;
wire   [31:0] i_2_fu_367_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_i_1;
wire   [0:0] tmp_nbreadreq_fu_88_p3;
wire   [0:0] tmp_1_nbreadreq_fu_96_p3;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] grp_fu_123_p0;
wire   [63:0] grp_fu_127_p0;
wire   [63:0] grp_fu_131_p0;
wire   [63:0] grp_fu_135_p0;
wire   [63:0] grp_fu_139_p0;
wire   [63:0] grp_fu_143_p0;
wire   [63:0] grp_fu_147_p0;
wire   [63:0] grp_fu_151_p0;
wire   [63:0] grp_fu_155_p1;
wire   [63:0] grp_fu_159_p1;
wire   [63:0] grp_fu_163_p1;
wire   [63:0] grp_fu_167_p1;
wire   [63:0] grp_fu_171_p1;
wire   [63:0] grp_fu_175_p1;
wire   [63:0] grp_fu_179_p1;
wire   [63:0] grp_fu_183_p1;
wire  signed [31:0] sext_ln412_cast_fu_187_p1;
wire   [63:0] bitcast_ln151_7_fu_463_p1;
wire   [63:0] bitcast_ln151_6_fu_460_p1;
wire   [63:0] bitcast_ln151_5_fu_457_p1;
wire   [63:0] bitcast_ln151_4_fu_454_p1;
wire   [63:0] bitcast_ln151_3_fu_451_p1;
wire   [63:0] bitcast_ln151_2_fu_448_p1;
wire   [63:0] bitcast_ln151_1_fu_445_p1;
wire   [63:0] bitcast_ln151_fu_442_p1;
reg    grp_fu_123_ce;
reg    grp_fu_127_ce;
reg    grp_fu_131_ce;
reg    grp_fu_135_ce;
reg    grp_fu_139_ce;
reg    grp_fu_143_ce;
reg    grp_fu_147_ce;
reg    grp_fu_151_ce;
reg    grp_fu_155_ce;
reg    grp_fu_159_ce;
reg    grp_fu_163_ce;
reg    grp_fu_167_ce;
reg    grp_fu_171_ce;
reg    grp_fu_175_ce;
reg    grp_fu_179_ce;
reg    grp_fu_183_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_777;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_done_reg = 1'b0;
end

updt_x_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_123_p0),
    .din1(mul_i_reg_636),
    .ce(grp_fu_123_ce),
    .dout(grp_fu_123_p2)
);

updt_x_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_127_p0),
    .din1(mul_i_1_reg_641),
    .ce(grp_fu_127_ce),
    .dout(grp_fu_127_p2)
);

updt_x_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_131_p0),
    .din1(mul_i_2_reg_646),
    .ce(grp_fu_131_ce),
    .dout(grp_fu_131_p2)
);

updt_x_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_135_p0),
    .din1(mul_i_3_reg_651),
    .ce(grp_fu_135_ce),
    .dout(grp_fu_135_p2)
);

updt_x_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_139_p0),
    .din1(mul_i_4_reg_656),
    .ce(grp_fu_139_ce),
    .dout(grp_fu_139_p2)
);

updt_x_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_143_p0),
    .din1(mul_i_5_reg_661),
    .ce(grp_fu_143_ce),
    .dout(grp_fu_143_p2)
);

updt_x_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_147_p0),
    .din1(mul_i_6_reg_666),
    .ce(grp_fu_147_ce),
    .dout(grp_fu_147_p2)
);

updt_x_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_151_p0),
    .din1(mul_i_7_reg_671),
    .ce(grp_fu_151_ce),
    .dout(grp_fu_151_p2)
);

updt_x_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(alpha),
    .din1(grp_fu_155_p1),
    .ce(grp_fu_155_ce),
    .dout(grp_fu_155_p2)
);

updt_x_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(alpha),
    .din1(grp_fu_159_p1),
    .ce(grp_fu_159_ce),
    .dout(grp_fu_159_p2)
);

updt_x_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(alpha),
    .din1(grp_fu_163_p1),
    .ce(grp_fu_163_ce),
    .dout(grp_fu_163_p2)
);

updt_x_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(alpha),
    .din1(grp_fu_167_p1),
    .ce(grp_fu_167_ce),
    .dout(grp_fu_167_p2)
);

updt_x_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(alpha),
    .din1(grp_fu_171_p1),
    .ce(grp_fu_171_ce),
    .dout(grp_fu_171_p2)
);

updt_x_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(alpha),
    .din1(grp_fu_175_p1),
    .ce(grp_fu_175_ce),
    .dout(grp_fu_175_p2)
);

updt_x_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(alpha),
    .din1(grp_fu_179_p1),
    .ce(grp_fu_179_ce),
    .dout(grp_fu_179_p2)
);

updt_x_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(alpha),
    .din1(grp_fu_183_p1),
    .ce(grp_fu_183_ce),
    .dout(grp_fu_183_p2)
);

updt_x_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_777)) begin
            i_fu_72 <= i_2_fu_367_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_72 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln422_reg_512_pp0_iter10_reg))) begin
        add_i_1_reg_721 <= grp_fu_127_p2;
        add_i_2_reg_726 <= grp_fu_131_p2;
        add_i_3_reg_731 <= grp_fu_135_p2;
        add_i_4_reg_736 <= grp_fu_139_p2;
        add_i_5_reg_741 <= grp_fu_143_p2;
        add_i_6_reg_746 <= grp_fu_147_p2;
        add_i_7_reg_751 <= grp_fu_151_p2;
        add_i_reg_716 <= grp_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln420_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln422_reg_512 <= and_ln422_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln422_reg_512_pp0_iter10_reg <= and_ln422_reg_512_pp0_iter9_reg;
        and_ln422_reg_512_pp0_iter11_reg <= and_ln422_reg_512_pp0_iter10_reg;
        and_ln422_reg_512_pp0_iter2_reg <= and_ln422_reg_512_pp0_iter1_reg;
        and_ln422_reg_512_pp0_iter3_reg <= and_ln422_reg_512_pp0_iter2_reg;
        and_ln422_reg_512_pp0_iter4_reg <= and_ln422_reg_512_pp0_iter3_reg;
        and_ln422_reg_512_pp0_iter5_reg <= and_ln422_reg_512_pp0_iter4_reg;
        and_ln422_reg_512_pp0_iter6_reg <= and_ln422_reg_512_pp0_iter5_reg;
        and_ln422_reg_512_pp0_iter7_reg <= and_ln422_reg_512_pp0_iter6_reg;
        and_ln422_reg_512_pp0_iter8_reg <= and_ln422_reg_512_pp0_iter7_reg;
        and_ln422_reg_512_pp0_iter9_reg <= and_ln422_reg_512_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        tmp_2_reg_521_pp0_iter2_reg <= tmp_2_reg_521_pp0_iter1_reg;
        tmp_2_reg_521_pp0_iter3_reg <= tmp_2_reg_521_pp0_iter2_reg;
        tmp_2_reg_521_pp0_iter4_reg <= tmp_2_reg_521_pp0_iter3_reg;
        tmp_2_reg_521_pp0_iter5_reg <= tmp_2_reg_521_pp0_iter4_reg;
        tmp_2_reg_521_pp0_iter6_reg <= tmp_2_reg_521_pp0_iter5_reg;
        tmp_3_reg_551_pp0_iter2_reg <= tmp_3_reg_551_pp0_iter1_reg;
        tmp_3_reg_551_pp0_iter3_reg <= tmp_3_reg_551_pp0_iter2_reg;
        tmp_3_reg_551_pp0_iter4_reg <= tmp_3_reg_551_pp0_iter3_reg;
        tmp_3_reg_551_pp0_iter5_reg <= tmp_3_reg_551_pp0_iter4_reg;
        tmp_3_reg_551_pp0_iter6_reg <= tmp_3_reg_551_pp0_iter5_reg;
        tmp_4_reg_526_pp0_iter2_reg <= tmp_4_reg_526_pp0_iter1_reg;
        tmp_4_reg_526_pp0_iter3_reg <= tmp_4_reg_526_pp0_iter2_reg;
        tmp_4_reg_526_pp0_iter4_reg <= tmp_4_reg_526_pp0_iter3_reg;
        tmp_4_reg_526_pp0_iter5_reg <= tmp_4_reg_526_pp0_iter4_reg;
        tmp_4_reg_526_pp0_iter6_reg <= tmp_4_reg_526_pp0_iter5_reg;
        tmp_5_reg_531_pp0_iter2_reg <= tmp_5_reg_531_pp0_iter1_reg;
        tmp_5_reg_531_pp0_iter3_reg <= tmp_5_reg_531_pp0_iter2_reg;
        tmp_5_reg_531_pp0_iter4_reg <= tmp_5_reg_531_pp0_iter3_reg;
        tmp_5_reg_531_pp0_iter5_reg <= tmp_5_reg_531_pp0_iter4_reg;
        tmp_5_reg_531_pp0_iter6_reg <= tmp_5_reg_531_pp0_iter5_reg;
        tmp_6_reg_536_pp0_iter2_reg <= tmp_6_reg_536_pp0_iter1_reg;
        tmp_6_reg_536_pp0_iter3_reg <= tmp_6_reg_536_pp0_iter2_reg;
        tmp_6_reg_536_pp0_iter4_reg <= tmp_6_reg_536_pp0_iter3_reg;
        tmp_6_reg_536_pp0_iter5_reg <= tmp_6_reg_536_pp0_iter4_reg;
        tmp_6_reg_536_pp0_iter6_reg <= tmp_6_reg_536_pp0_iter5_reg;
        trunc_ln1_reg_541_pp0_iter2_reg <= trunc_ln1_reg_541_pp0_iter1_reg;
        trunc_ln1_reg_541_pp0_iter3_reg <= trunc_ln1_reg_541_pp0_iter2_reg;
        trunc_ln1_reg_541_pp0_iter4_reg <= trunc_ln1_reg_541_pp0_iter3_reg;
        trunc_ln1_reg_541_pp0_iter5_reg <= trunc_ln1_reg_541_pp0_iter4_reg;
        trunc_ln1_reg_541_pp0_iter6_reg <= trunc_ln1_reg_541_pp0_iter5_reg;
        trunc_ln78_2_reg_546_pp0_iter2_reg <= trunc_ln78_2_reg_546_pp0_iter1_reg;
        trunc_ln78_2_reg_546_pp0_iter3_reg <= trunc_ln78_2_reg_546_pp0_iter2_reg;
        trunc_ln78_2_reg_546_pp0_iter4_reg <= trunc_ln78_2_reg_546_pp0_iter3_reg;
        trunc_ln78_2_reg_546_pp0_iter5_reg <= trunc_ln78_2_reg_546_pp0_iter4_reg;
        trunc_ln78_2_reg_546_pp0_iter6_reg <= trunc_ln78_2_reg_546_pp0_iter5_reg;
        trunc_ln78_reg_516_pp0_iter2_reg <= trunc_ln78_reg_516_pp0_iter1_reg;
        trunc_ln78_reg_516_pp0_iter3_reg <= trunc_ln78_reg_516_pp0_iter2_reg;
        trunc_ln78_reg_516_pp0_iter4_reg <= trunc_ln78_reg_516_pp0_iter3_reg;
        trunc_ln78_reg_516_pp0_iter5_reg <= trunc_ln78_reg_516_pp0_iter4_reg;
        trunc_ln78_reg_516_pp0_iter6_reg <= trunc_ln78_reg_516_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln422_reg_512_pp0_iter1_reg <= and_ln422_reg_512;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        tmp_2_reg_521_pp0_iter1_reg <= tmp_2_reg_521;
        tmp_3_reg_551_pp0_iter1_reg <= tmp_3_reg_551;
        tmp_4_reg_526_pp0_iter1_reg <= tmp_4_reg_526;
        tmp_5_reg_531_pp0_iter1_reg <= tmp_5_reg_531;
        tmp_6_reg_536_pp0_iter1_reg <= tmp_6_reg_536;
        trunc_ln1_reg_541_pp0_iter1_reg <= trunc_ln1_reg_541;
        trunc_ln78_2_reg_546_pp0_iter1_reg <= trunc_ln78_2_reg_546;
        trunc_ln78_reg_516_pp0_iter1_reg <= trunc_ln78_reg_516;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln422_reg_512_pp0_iter5_reg))) begin
        mul_i_1_reg_641 <= grp_fu_159_p2;
        mul_i_2_reg_646 <= grp_fu_163_p2;
        mul_i_3_reg_651 <= grp_fu_167_p2;
        mul_i_4_reg_656 <= grp_fu_171_p2;
        mul_i_5_reg_661 <= grp_fu_175_p2;
        mul_i_6_reg_666 <= grp_fu_179_p2;
        mul_i_7_reg_671 <= grp_fu_183_p2;
        mul_i_reg_636 <= grp_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln420_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln422_fu_205_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_10_reg_576 <= {{qp_s_dout[383:320]}};
        tmp_2_reg_521 <= {{qx_s_dout[191:128]}};
        tmp_3_reg_551 <= {{qx_s_dout[127:64]}};
        tmp_4_reg_526 <= {{qx_s_dout[255:192]}};
        tmp_5_reg_531 <= {{qx_s_dout[319:256]}};
        tmp_6_reg_536 <= {{qx_s_dout[383:320]}};
        tmp_7_reg_561 <= {{qp_s_dout[191:128]}};
        tmp_8_reg_566 <= {{qp_s_dout[255:192]}};
        tmp_9_reg_571 <= {{qp_s_dout[319:256]}};
        tmp_s_reg_591 <= {{qp_s_dout[127:64]}};
        trunc_ln1_reg_541 <= {{qx_s_dout[447:384]}};
        trunc_ln78_1_reg_556 <= trunc_ln78_1_fu_293_p1;
        trunc_ln78_2_reg_546 <= {{qx_s_dout[511:448]}};
        trunc_ln78_3_reg_581 <= {{qp_s_dout[447:384]}};
        trunc_ln78_4_reg_586 <= {{qp_s_dout[511:448]}};
        trunc_ln78_reg_516 <= trunc_ln78_fu_215_p1;
    end
end

always @ (*) begin
    if (((icmp_ln420_fu_199_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_123_ce = 1'b1;
    end else begin
        grp_fu_123_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_127_ce = 1'b1;
    end else begin
        grp_fu_127_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_131_ce = 1'b1;
    end else begin
        grp_fu_131_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_135_ce = 1'b1;
    end else begin
        grp_fu_135_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_139_ce = 1'b1;
    end else begin
        grp_fu_139_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_143_ce = 1'b1;
    end else begin
        grp_fu_143_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_147_ce = 1'b1;
    end else begin
        grp_fu_147_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_151_ce = 1'b1;
    end else begin
        grp_fu_151_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_155_ce = 1'b1;
    end else begin
        grp_fu_155_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_159_ce = 1'b1;
    end else begin
        grp_fu_159_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_163_ce = 1'b1;
    end else begin
        grp_fu_163_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_167_ce = 1'b1;
    end else begin
        grp_fu_167_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_171_ce = 1'b1;
    end else begin
        grp_fu_171_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_175_ce = 1'b1;
    end else begin
        grp_fu_175_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_179_ce = 1'b1;
    end else begin
        grp_fu_179_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_183_ce = 1'b1;
    end else begin
        grp_fu_183_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln422_reg_512_pp0_iter11_reg) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        qout_blk_n = qout_full_n;
    end else begin
        qout_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln422_reg_512_pp0_iter11_reg) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        qout_write = 1'b1;
    end else begin
        qout_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln420_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln422_fu_205_p2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (qp_s_empty_n == 1'b1))) begin
        qp_s_read = 1'b1;
    end else begin
        qp_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln420_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln422_fu_205_p2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (qx_s_empty_n == 1'b1))) begin
        qx_s_read = 1'b1;
    end else begin
        qx_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln422_fu_205_p2 = (tmp_nbreadreq_fu_88_p3 & tmp_1_nbreadreq_fu_96_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'd1 == and_ln422_reg_512_pp0_iter11_reg) & (qout_full_n == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'd1 == and_ln422_reg_512_pp0_iter11_reg) & (qout_full_n == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'd1 == and_ln422_reg_512_pp0_iter11_reg) & (qout_full_n == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter12 = ((1'd1 == and_ln422_reg_512_pp0_iter11_reg) & (qout_full_n == 1'b0));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_777 = ((icmp_ln420_fu_199_p2 == 1'd1) & (1'd1 == and_ln422_fu_205_p2) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln151_1_fu_445_p1 = add_i_1_reg_721;

assign bitcast_ln151_2_fu_448_p1 = add_i_2_reg_726;

assign bitcast_ln151_3_fu_451_p1 = add_i_3_reg_731;

assign bitcast_ln151_4_fu_454_p1 = add_i_4_reg_736;

assign bitcast_ln151_5_fu_457_p1 = add_i_5_reg_741;

assign bitcast_ln151_6_fu_460_p1 = add_i_6_reg_746;

assign bitcast_ln151_7_fu_463_p1 = add_i_7_reg_751;

assign bitcast_ln151_fu_442_p1 = add_i_reg_716;

assign grp_fu_123_p0 = trunc_ln78_reg_516_pp0_iter6_reg;

assign grp_fu_127_p0 = tmp_3_reg_551_pp0_iter6_reg;

assign grp_fu_131_p0 = tmp_2_reg_521_pp0_iter6_reg;

assign grp_fu_135_p0 = tmp_4_reg_526_pp0_iter6_reg;

assign grp_fu_139_p0 = tmp_5_reg_531_pp0_iter6_reg;

assign grp_fu_143_p0 = tmp_6_reg_536_pp0_iter6_reg;

assign grp_fu_147_p0 = trunc_ln1_reg_541_pp0_iter6_reg;

assign grp_fu_151_p0 = trunc_ln78_2_reg_546_pp0_iter6_reg;

assign grp_fu_155_p1 = trunc_ln78_1_reg_556;

assign grp_fu_159_p1 = tmp_s_reg_591;

assign grp_fu_163_p1 = tmp_7_reg_561;

assign grp_fu_167_p1 = tmp_8_reg_566;

assign grp_fu_171_p1 = tmp_9_reg_571;

assign grp_fu_175_p1 = tmp_10_reg_576;

assign grp_fu_179_p1 = trunc_ln78_3_reg_581;

assign grp_fu_183_p1 = trunc_ln78_4_reg_586;

assign i_2_fu_367_p2 = (ap_sig_allocacmp_i_1 + 32'd1);

assign icmp_ln420_fu_199_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(sext_ln412_cast_fu_187_p1)) ? 1'b1 : 1'b0);

assign qout_din = {{{{{{{{{{{{{{{{1'd0}, {bitcast_ln151_7_fu_463_p1}}}, {bitcast_ln151_6_fu_460_p1}}}, {bitcast_ln151_5_fu_457_p1}}}, {bitcast_ln151_4_fu_454_p1}}}, {bitcast_ln151_3_fu_451_p1}}}, {bitcast_ln151_2_fu_448_p1}}}, {bitcast_ln151_1_fu_445_p1}}}, {bitcast_ln151_fu_442_p1}};

assign sext_ln412_cast_fu_187_p1 = $signed(sext_ln412);

assign tmp_1_nbreadreq_fu_96_p3 = qp_s_empty_n;

assign tmp_nbreadreq_fu_88_p3 = qx_s_empty_n;

assign trunc_ln78_1_fu_293_p1 = qp_s_dout[63:0];

assign trunc_ln78_fu_215_p1 = qx_s_dout[63:0];

endmodule //updt_x_updt_x_Pipeline_cc
