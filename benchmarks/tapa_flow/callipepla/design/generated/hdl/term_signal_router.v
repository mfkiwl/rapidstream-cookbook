// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="term_signal_router_term_signal_router,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.856000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6,HLS_SYN_LUT=100,HLS_VERSION=2022_2}" *)

module term_signal_router (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        q_gbc_s_dout,
        q_gbc_s_empty_n,
        q_gbc_s_read,
        q_gbc_peek_dout,
        q_gbc_peek_empty_n,
        q_gbc_peek_read,
        q_to_rdA_din,
        q_to_rdA_full_n,
        q_to_rdA_write,
        q_to_edgepointer_din,
        q_to_edgepointer_full_n,
        q_to_edgepointer_write,
        q_to_abiter_din,
        q_to_abiter_full_n,
        q_to_abiter_write,
        q_to_ctrlmem_din,
        q_to_ctrlmem_full_n,
        q_to_ctrlmem_write,
        q_to_mux_din,
        q_to_mux_full_n,
        q_to_mux_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] q_gbc_s_dout;
input   q_gbc_s_empty_n;
output   q_gbc_s_read;
input  [1:0] q_gbc_peek_dout;
input   q_gbc_peek_empty_n;
output   q_gbc_peek_read;
output  [1:0] q_to_rdA_din;
input   q_to_rdA_full_n;
output   q_to_rdA_write;
output  [1:0] q_to_edgepointer_din;
input   q_to_edgepointer_full_n;
output   q_to_edgepointer_write;
output  [1:0] q_to_abiter_din;
input   q_to_abiter_full_n;
output   q_to_abiter_write;
output  [1:0] q_to_ctrlmem_din;
input   q_to_ctrlmem_full_n;
output   q_to_ctrlmem_write;
output  [1:0] q_to_mux_din;
input   q_to_mux_full_n;
output   q_to_mux_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg q_gbc_s_read;
reg q_to_rdA_write;
reg q_to_edgepointer_write;
reg q_to_abiter_write;
reg q_to_ctrlmem_write;
reg q_to_mux_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_term_signal_router_Pipeline_spin_fu_96_ap_start;
wire    grp_term_signal_router_Pipeline_spin_fu_96_ap_done;
wire    grp_term_signal_router_Pipeline_spin_fu_96_ap_idle;
wire    grp_term_signal_router_Pipeline_spin_fu_96_ap_ready;
wire    grp_term_signal_router_Pipeline_spin_fu_96_q_gbc_s_read;
wire   [1:0] grp_term_signal_router_Pipeline_spin_fu_96_q_to_rdA_din;
wire    grp_term_signal_router_Pipeline_spin_fu_96_q_to_rdA_write;
wire   [1:0] grp_term_signal_router_Pipeline_spin_fu_96_q_to_edgepointer_din;
wire    grp_term_signal_router_Pipeline_spin_fu_96_q_to_edgepointer_write;
wire   [1:0] grp_term_signal_router_Pipeline_spin_fu_96_q_to_abiter_din;
wire    grp_term_signal_router_Pipeline_spin_fu_96_q_to_abiter_write;
wire   [1:0] grp_term_signal_router_Pipeline_spin_fu_96_q_to_ctrlmem_din;
wire    grp_term_signal_router_Pipeline_spin_fu_96_q_to_ctrlmem_write;
wire   [1:0] grp_term_signal_router_Pipeline_spin_fu_96_q_to_mux_din;
wire    grp_term_signal_router_Pipeline_spin_fu_96_q_to_mux_write;
reg    grp_term_signal_router_Pipeline_spin_fu_96_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_term_signal_router_Pipeline_spin_fu_96_ap_start_reg = 1'b0;
end

term_signal_router_term_signal_router_Pipeline_spin grp_term_signal_router_Pipeline_spin_fu_96(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_term_signal_router_Pipeline_spin_fu_96_ap_start),
    .ap_done(grp_term_signal_router_Pipeline_spin_fu_96_ap_done),
    .ap_idle(grp_term_signal_router_Pipeline_spin_fu_96_ap_idle),
    .ap_ready(grp_term_signal_router_Pipeline_spin_fu_96_ap_ready),
    .q_gbc_s_dout(q_gbc_s_dout),
    .q_gbc_s_empty_n(q_gbc_s_empty_n),
    .q_gbc_s_read(grp_term_signal_router_Pipeline_spin_fu_96_q_gbc_s_read),
    .q_to_rdA_din(grp_term_signal_router_Pipeline_spin_fu_96_q_to_rdA_din),
    .q_to_rdA_full_n(q_to_rdA_full_n),
    .q_to_rdA_write(grp_term_signal_router_Pipeline_spin_fu_96_q_to_rdA_write),
    .q_to_edgepointer_din(grp_term_signal_router_Pipeline_spin_fu_96_q_to_edgepointer_din),
    .q_to_edgepointer_full_n(q_to_edgepointer_full_n),
    .q_to_edgepointer_write(grp_term_signal_router_Pipeline_spin_fu_96_q_to_edgepointer_write),
    .q_to_abiter_din(grp_term_signal_router_Pipeline_spin_fu_96_q_to_abiter_din),
    .q_to_abiter_full_n(q_to_abiter_full_n),
    .q_to_abiter_write(grp_term_signal_router_Pipeline_spin_fu_96_q_to_abiter_write),
    .q_to_ctrlmem_din(grp_term_signal_router_Pipeline_spin_fu_96_q_to_ctrlmem_din),
    .q_to_ctrlmem_full_n(q_to_ctrlmem_full_n),
    .q_to_ctrlmem_write(grp_term_signal_router_Pipeline_spin_fu_96_q_to_ctrlmem_write),
    .q_to_mux_din(grp_term_signal_router_Pipeline_spin_fu_96_q_to_mux_din),
    .q_to_mux_full_n(q_to_mux_full_n),
    .q_to_mux_write(grp_term_signal_router_Pipeline_spin_fu_96_q_to_mux_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_term_signal_router_Pipeline_spin_fu_96_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_term_signal_router_Pipeline_spin_fu_96_ap_start_reg <= 1'b1;
        end else if ((grp_term_signal_router_Pipeline_spin_fu_96_ap_ready == 1'b1)) begin
            grp_term_signal_router_Pipeline_spin_fu_96_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_term_signal_router_Pipeline_spin_fu_96_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_term_signal_router_Pipeline_spin_fu_96_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_term_signal_router_Pipeline_spin_fu_96_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        q_gbc_s_read = grp_term_signal_router_Pipeline_spin_fu_96_q_gbc_s_read;
    end else begin
        q_gbc_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        q_to_abiter_write = grp_term_signal_router_Pipeline_spin_fu_96_q_to_abiter_write;
    end else begin
        q_to_abiter_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        q_to_ctrlmem_write = grp_term_signal_router_Pipeline_spin_fu_96_q_to_ctrlmem_write;
    end else begin
        q_to_ctrlmem_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        q_to_edgepointer_write = grp_term_signal_router_Pipeline_spin_fu_96_q_to_edgepointer_write;
    end else begin
        q_to_edgepointer_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        q_to_mux_write = grp_term_signal_router_Pipeline_spin_fu_96_q_to_mux_write;
    end else begin
        q_to_mux_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        q_to_rdA_write = grp_term_signal_router_Pipeline_spin_fu_96_q_to_rdA_write;
    end else begin
        q_to_rdA_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_term_signal_router_Pipeline_spin_fu_96_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_term_signal_router_Pipeline_spin_fu_96_ap_start = grp_term_signal_router_Pipeline_spin_fu_96_ap_start_reg;

assign q_gbc_peek_read = 1'b0;

assign q_to_abiter_din = grp_term_signal_router_Pipeline_spin_fu_96_q_to_abiter_din;

assign q_to_ctrlmem_din = grp_term_signal_router_Pipeline_spin_fu_96_q_to_ctrlmem_din;

assign q_to_edgepointer_din = grp_term_signal_router_Pipeline_spin_fu_96_q_to_edgepointer_din;

assign q_to_mux_din = grp_term_signal_router_Pipeline_spin_fu_96_q_to_mux_din;

assign q_to_rdA_din = grp_term_signal_router_Pipeline_spin_fu_96_q_to_rdA_din;

endmodule //term_signal_router
