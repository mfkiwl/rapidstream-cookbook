// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="rdwr_vec_rdwr_vec,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.400000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=332,HLS_SYN_LUT=693,HLS_VERSION=2022_2}" *)

module rdwr_vec (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vec_p_read_addr_din,
        vec_p_read_addr_full_n,
        vec_p_read_addr_write,
        vec_p_read_data_s_dout,
        vec_p_read_data_s_empty_n,
        vec_p_read_data_s_read,
        vec_p_read_data_peek_dout,
        vec_p_read_data_peek_empty_n,
        vec_p_read_data_peek_read,
        vec_p_write_addr_din,
        vec_p_write_addr_full_n,
        vec_p_write_addr_write,
        vec_p_write_data_din,
        vec_p_write_data_full_n,
        vec_p_write_data_write,
        vec_p_write_resp_s_dout,
        vec_p_write_resp_s_empty_n,
        vec_p_write_resp_s_read,
        vec_p_write_resp_peek_dout,
        vec_p_write_resp_peek_empty_n,
        vec_p_write_resp_peek_read,
        q_inst_s_dout,
        q_inst_s_empty_n,
        q_inst_s_read,
        q_inst_peek_dout,
        q_inst_peek_empty_n,
        q_inst_peek_read,
        q_din_s_dout,
        q_din_s_empty_n,
        q_din_s_read,
        q_din_peek_dout,
        q_din_peek_empty_n,
        q_din_peek_read,
        q_dout_din,
        q_dout_full_n,
        q_dout_write,
        q_response_din,
        q_response_full_n,
        q_response_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [64:0] vec_p_read_addr_din;
input   vec_p_read_addr_full_n;
output   vec_p_read_addr_write;
input  [512:0] vec_p_read_data_s_dout;
input   vec_p_read_data_s_empty_n;
output   vec_p_read_data_s_read;
input  [512:0] vec_p_read_data_peek_dout;
input   vec_p_read_data_peek_empty_n;
output   vec_p_read_data_peek_read;
output  [64:0] vec_p_write_addr_din;
input   vec_p_write_addr_full_n;
output   vec_p_write_addr_write;
output  [512:0] vec_p_write_data_din;
input   vec_p_write_data_full_n;
output   vec_p_write_data_write;
input  [8:0] vec_p_write_resp_s_dout;
input   vec_p_write_resp_s_empty_n;
output   vec_p_write_resp_s_read;
input  [8:0] vec_p_write_resp_peek_dout;
input   vec_p_write_resp_peek_empty_n;
output   vec_p_write_resp_peek_read;
input  [66:0] q_inst_s_dout;
input   q_inst_s_empty_n;
output   q_inst_s_read;
input  [66:0] q_inst_peek_dout;
input   q_inst_peek_empty_n;
output   q_inst_peek_read;
input  [512:0] q_din_s_dout;
input   q_din_s_empty_n;
output   q_din_s_read;
input  [512:0] q_din_peek_dout;
input   q_din_peek_empty_n;
output   q_din_peek_read;
output  [512:0] q_dout_din;
input   q_dout_full_n;
output   q_dout_write;
output  [1:0] q_response_din;
input   q_response_full_n;
output   q_response_write;

reg ap_idle;
reg vec_p_read_addr_write;
reg vec_p_read_data_s_read;
reg vec_p_write_addr_write;
reg vec_p_write_data_write;
reg vec_p_write_resp_s_read;
reg q_inst_s_read;
reg q_din_s_read;
reg q_dout_write;
reg q_response_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    q_inst_s_blk_n;
wire    ap_CS_fsm_state2;
reg    q_response_blk_n;
wire    ap_CS_fsm_state6;
reg   [0:0] inst_wr_reg_310;
wire   [0:0] inst_rd_fu_225_p1;
reg   [0:0] inst_rd_reg_291;
reg   [31:0] inst_base_addr_reg_297;
reg   [31:0] inst_len_reg_303;
wire   [31:0] rd_end_addr_fu_261_p3;
reg   [31:0] rd_end_addr_reg_316;
wire    ap_CS_fsm_state3;
wire   [31:0] wr_end_addr_fu_269_p3;
reg   [31:0] wr_end_addr_reg_321;
wire   [31:0] rd_total_fu_277_p3;
reg   [31:0] rd_total_reg_326;
wire   [31:0] wr_total_fu_284_p3;
reg   [31:0] wr_total_reg_331;
wire    grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_start;
wire    grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_done;
wire    grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_idle;
wire    grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_ready;
wire    grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_resp_s_read;
wire    grp_rdwr_vec_Pipeline_rdwr_fu_202_q_din_s_read;
wire   [64:0] grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_addr_din;
wire    grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_addr_write;
wire   [512:0] grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_data_din;
wire    grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_data_write;
wire   [512:0] grp_rdwr_vec_Pipeline_rdwr_fu_202_q_dout_din;
wire    grp_rdwr_vec_Pipeline_rdwr_fu_202_q_dout_write;
wire    grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_read_data_s_read;
wire   [64:0] grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_read_addr_din;
wire    grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_read_addr_write;
reg    grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_start_reg;
wire    ap_CS_fsm_state4;
reg    ap_block_state6;
wire   [31:0] add_ln175_fu_257_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_start_reg = 1'b0;
end

rdwr_vec_rdwr_vec_Pipeline_rdwr grp_rdwr_vec_Pipeline_rdwr_fu_202(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_start),
    .ap_done(grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_done),
    .ap_idle(grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_idle),
    .ap_ready(grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_ready),
    .inst_base_addr(inst_base_addr_reg_297),
    .rd_total(rd_total_reg_326),
    .wr_total(wr_total_reg_331),
    .vec_p_write_resp_s_dout(vec_p_write_resp_s_dout),
    .vec_p_write_resp_s_empty_n(vec_p_write_resp_s_empty_n),
    .vec_p_write_resp_s_read(grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_resp_s_read),
    .wr_end_addr(wr_end_addr_reg_321),
    .q_din_s_dout(q_din_s_dout),
    .q_din_s_empty_n(q_din_s_empty_n),
    .q_din_s_read(grp_rdwr_vec_Pipeline_rdwr_fu_202_q_din_s_read),
    .vec_p_write_addr_din(grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_addr_din),
    .vec_p_write_addr_full_n(vec_p_write_addr_full_n),
    .vec_p_write_addr_write(grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_addr_write),
    .vec_p_write_data_din(grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_data_din),
    .vec_p_write_data_full_n(vec_p_write_data_full_n),
    .vec_p_write_data_write(grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_data_write),
    .q_dout_din(grp_rdwr_vec_Pipeline_rdwr_fu_202_q_dout_din),
    .q_dout_full_n(q_dout_full_n),
    .q_dout_write(grp_rdwr_vec_Pipeline_rdwr_fu_202_q_dout_write),
    .vec_p_read_data_s_dout(vec_p_read_data_s_dout),
    .vec_p_read_data_s_empty_n(vec_p_read_data_s_empty_n),
    .vec_p_read_data_s_read(grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_read_data_s_read),
    .rd_end_addr(rd_end_addr_reg_316),
    .vec_p_read_addr_din(grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_read_addr_din),
    .vec_p_read_addr_full_n(vec_p_read_addr_full_n),
    .vec_p_read_addr_write(grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_read_addr_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_start_reg <= 1'b1;
        end else if ((grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_ready == 1'b1)) begin
            grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        inst_base_addr_reg_297 <= {{q_inst_s_dout[33:2]}};
        inst_len_reg_303 <= {{q_inst_s_dout[65:34]}};
        inst_rd_reg_291 <= inst_rd_fu_225_p1;
        inst_wr_reg_310 <= q_inst_s_dout[32'd1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        rd_end_addr_reg_316 <= rd_end_addr_fu_261_p3;
        rd_total_reg_326 <= rd_total_fu_277_p3;
        wr_end_addr_reg_321 <= wr_end_addr_fu_269_p3;
        wr_total_reg_331 <= wr_total_fu_284_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((q_inst_s_empty_n == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((inst_wr_reg_310 == 1'd1) & (q_response_full_n == 1'b0))) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        q_din_s_read = grp_rdwr_vec_Pipeline_rdwr_fu_202_q_din_s_read;
    end else begin
        q_din_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        q_dout_write = grp_rdwr_vec_Pipeline_rdwr_fu_202_q_dout_write;
    end else begin
        q_dout_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q_inst_s_blk_n = q_inst_s_empty_n;
    end else begin
        q_inst_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((q_inst_s_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        q_inst_s_read = 1'b1;
    end else begin
        q_inst_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((inst_wr_reg_310 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        q_response_blk_n = q_response_full_n;
    end else begin
        q_response_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inst_wr_reg_310 == 1'd1) & (q_response_full_n == 1'b0)) & (inst_wr_reg_310 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        q_response_write = 1'b1;
    end else begin
        q_response_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vec_p_read_addr_write = grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_read_addr_write;
    end else begin
        vec_p_read_addr_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vec_p_read_data_s_read = grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_read_data_s_read;
    end else begin
        vec_p_read_data_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vec_p_write_addr_write = grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_addr_write;
    end else begin
        vec_p_write_addr_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vec_p_write_data_write = grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_data_write;
    end else begin
        vec_p_write_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        vec_p_write_resp_s_read = grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_resp_s_read;
    end else begin
        vec_p_write_resp_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((q_inst_s_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if ((~((inst_wr_reg_310 == 1'd1) & (q_response_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln175_fu_257_p2 = (inst_len_reg_303 + inst_base_addr_reg_297);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state6 = ((inst_wr_reg_310 == 1'd1) & (q_response_full_n == 1'b0));
end

assign ap_done = 1'b0;

assign ap_ready = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_start = grp_rdwr_vec_Pipeline_rdwr_fu_202_ap_start_reg;

assign inst_rd_fu_225_p1 = q_inst_s_dout[0:0];

assign q_din_peek_read = 1'b0;

assign q_dout_din = grp_rdwr_vec_Pipeline_rdwr_fu_202_q_dout_din;

assign q_inst_peek_read = 1'b0;

assign q_response_din = 2'd1;

assign rd_end_addr_fu_261_p3 = ((inst_rd_reg_291[0:0] == 1'b1) ? add_ln175_fu_257_p2 : 32'd0);

assign rd_total_fu_277_p3 = ((inst_rd_reg_291[0:0] == 1'b1) ? inst_len_reg_303 : 32'd0);

assign vec_p_read_addr_din = grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_read_addr_din;

assign vec_p_read_data_peek_read = 1'b0;

assign vec_p_write_addr_din = grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_addr_din;

assign vec_p_write_data_din = grp_rdwr_vec_Pipeline_rdwr_fu_202_vec_p_write_data_din;

assign vec_p_write_resp_peek_read = 1'b0;

assign wr_end_addr_fu_269_p3 = ((inst_wr_reg_310[0:0] == 1'b1) ? add_ln175_fu_257_p2 : 32'd0);

assign wr_total_fu_284_p3 = ((inst_wr_reg_310[0:0] == 1'b1) ? inst_len_reg_303 : 32'd0);

endmodule //rdwr_vec
