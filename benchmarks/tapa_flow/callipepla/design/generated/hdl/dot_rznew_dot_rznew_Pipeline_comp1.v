// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

module dot_rznew_dot_rznew_Pipeline_comp1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln408,
        psum_7_address0,
        psum_7_ce0,
        psum_7_we0,
        psum_7_d0,
        psum_7_address1,
        psum_7_ce1,
        psum_7_q1,
        psum_6_address0,
        psum_6_ce0,
        psum_6_we0,
        psum_6_d0,
        psum_6_address1,
        psum_6_ce1,
        psum_6_q1,
        psum_5_address0,
        psum_5_ce0,
        psum_5_we0,
        psum_5_d0,
        psum_5_address1,
        psum_5_ce1,
        psum_5_q1,
        psum_4_address0,
        psum_4_ce0,
        psum_4_we0,
        psum_4_d0,
        psum_4_address1,
        psum_4_ce1,
        psum_4_q1,
        psum_3_address0,
        psum_3_ce0,
        psum_3_we0,
        psum_3_d0,
        psum_3_address1,
        psum_3_ce1,
        psum_3_q1,
        psum_2_address0,
        psum_2_ce0,
        psum_2_we0,
        psum_2_d0,
        psum_2_address1,
        psum_2_ce1,
        psum_2_q1,
        psum_1_address0,
        psum_1_ce0,
        psum_1_we0,
        psum_1_d0,
        psum_1_address1,
        psum_1_ce1,
        psum_1_q1,
        psum_address0,
        psum_ce0,
        psum_we0,
        psum_d0,
        psum_address1,
        psum_ce1,
        psum_q1,
        qr_s_dout,
        qr_s_empty_n,
        qr_s_read,
        qz_s_dout,
        qz_s_empty_n,
        qz_s_read,
        qr_out_din,
        qr_out_full_n,
        qr_out_write,
        M,
        grp_fu_432_p_din0,
        grp_fu_432_p_din1,
        grp_fu_432_p_opcode,
        grp_fu_432_p_dout0,
        grp_fu_432_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [28:0] sext_ln408;
output  [2:0] psum_7_address0;
output   psum_7_ce0;
output   psum_7_we0;
output  [63:0] psum_7_d0;
output  [2:0] psum_7_address1;
output   psum_7_ce1;
input  [63:0] psum_7_q1;
output  [2:0] psum_6_address0;
output   psum_6_ce0;
output   psum_6_we0;
output  [63:0] psum_6_d0;
output  [2:0] psum_6_address1;
output   psum_6_ce1;
input  [63:0] psum_6_q1;
output  [2:0] psum_5_address0;
output   psum_5_ce0;
output   psum_5_we0;
output  [63:0] psum_5_d0;
output  [2:0] psum_5_address1;
output   psum_5_ce1;
input  [63:0] psum_5_q1;
output  [2:0] psum_4_address0;
output   psum_4_ce0;
output   psum_4_we0;
output  [63:0] psum_4_d0;
output  [2:0] psum_4_address1;
output   psum_4_ce1;
input  [63:0] psum_4_q1;
output  [2:0] psum_3_address0;
output   psum_3_ce0;
output   psum_3_we0;
output  [63:0] psum_3_d0;
output  [2:0] psum_3_address1;
output   psum_3_ce1;
input  [63:0] psum_3_q1;
output  [2:0] psum_2_address0;
output   psum_2_ce0;
output   psum_2_we0;
output  [63:0] psum_2_d0;
output  [2:0] psum_2_address1;
output   psum_2_ce1;
input  [63:0] psum_2_q1;
output  [2:0] psum_1_address0;
output   psum_1_ce0;
output   psum_1_we0;
output  [63:0] psum_1_d0;
output  [2:0] psum_1_address1;
output   psum_1_ce1;
input  [63:0] psum_1_q1;
output  [2:0] psum_address0;
output   psum_ce0;
output   psum_we0;
output  [63:0] psum_d0;
output  [2:0] psum_address1;
output   psum_ce1;
input  [63:0] psum_q1;
input  [512:0] qr_s_dout;
input   qr_s_empty_n;
output   qr_s_read;
input  [512:0] qz_s_dout;
input   qz_s_empty_n;
output   qz_s_read;
output  [512:0] qr_out_din;
input   qr_out_full_n;
output   qr_out_write;
input  [31:0] M;
output  [63:0] grp_fu_432_p_din0;
output  [63:0] grp_fu_432_p_din1;
output  [1:0] grp_fu_432_p_opcode;
input  [63:0] grp_fu_432_p_dout0;
output   grp_fu_432_p_ce;

reg ap_idle;
reg psum_7_ce0;
reg psum_7_we0;
reg psum_7_ce1;
reg psum_6_ce0;
reg psum_6_we0;
reg psum_6_ce1;
reg psum_5_ce0;
reg psum_5_we0;
reg psum_5_ce1;
reg psum_4_ce0;
reg psum_4_we0;
reg psum_4_ce1;
reg psum_3_ce0;
reg psum_3_we0;
reg psum_3_ce1;
reg psum_2_ce0;
reg psum_2_we0;
reg psum_2_ce1;
reg psum_1_ce0;
reg psum_1_we0;
reg psum_1_ce1;
reg psum_ce0;
reg psum_we0;
reg psum_ce1;
reg qr_s_read;
reg qz_s_read;
reg qr_out_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln421_fu_394_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] and_ln428_1_fu_406_p2;
reg   [0:0] and_ln428_1_reg_866;
reg   [0:0] and_ln428_1_reg_866_pp0_iter1_reg;
reg   [0:0] and_ln428_1_reg_866_pp0_iter2_reg;
reg   [0:0] and_ln428_1_reg_866_pp0_iter3_reg;
reg   [0:0] and_ln428_1_reg_866_pp0_iter4_reg;
reg   [0:0] and_ln428_1_reg_866_pp0_iter5_reg;
reg   [0:0] and_ln428_1_reg_866_pp0_iter6_reg;
reg   [0:0] and_ln428_1_reg_866_pp0_iter7_reg;
reg   [0:0] and_ln428_1_reg_866_pp0_iter8_reg;
reg   [0:0] and_ln428_1_reg_866_pp0_iter9_reg;
reg   [0:0] and_ln428_1_reg_866_pp0_iter10_reg;
wire   [63:0] trunc_ln78_fu_416_p1;
reg   [63:0] trunc_ln78_reg_870;
reg   [63:0] tmp_5_reg_875;
reg   [63:0] tmp_6_reg_880;
reg   [63:0] tmp_7_reg_885;
reg   [63:0] tmp_8_reg_890;
reg   [63:0] trunc_ln_reg_895;
reg   [63:0] trunc_ln78_2_reg_900;
reg   [63:0] tmp_4_reg_905;
wire   [63:0] trunc_ln78_1_fu_494_p1;
reg   [63:0] trunc_ln78_1_reg_910;
reg   [63:0] tmp_9_reg_915;
reg   [63:0] tmp_3_reg_920;
reg   [63:0] tmp_10_reg_925;
reg   [63:0] tmp_11_reg_930;
reg   [63:0] trunc_ln78_3_reg_935;
reg   [63:0] trunc_ln78_4_reg_940;
reg   [63:0] tmp_s_reg_945;
wire   [0:0] icmp_ln433_fu_587_p2;
reg   [0:0] icmp_ln433_reg_950;
reg   [0:0] icmp_ln433_reg_950_pp0_iter1_reg;
reg   [0:0] icmp_ln433_reg_950_pp0_iter2_reg;
reg   [0:0] icmp_ln433_reg_950_pp0_iter3_reg;
reg   [0:0] icmp_ln433_reg_950_pp0_iter4_reg;
reg   [0:0] icmp_ln433_reg_950_pp0_iter5_reg;
reg   [0:0] icmp_ln433_reg_950_pp0_iter6_reg;
wire   [0:0] icmp_ln433_1_fu_599_p2;
reg   [0:0] icmp_ln433_1_reg_955;
reg   [0:0] icmp_ln433_1_reg_955_pp0_iter1_reg;
reg   [0:0] icmp_ln433_1_reg_955_pp0_iter2_reg;
reg   [0:0] icmp_ln433_1_reg_955_pp0_iter3_reg;
reg   [0:0] icmp_ln433_1_reg_955_pp0_iter4_reg;
reg   [0:0] icmp_ln433_1_reg_955_pp0_iter5_reg;
reg   [0:0] icmp_ln433_1_reg_955_pp0_iter6_reg;
wire   [0:0] icmp_ln433_2_fu_611_p2;
reg   [0:0] icmp_ln433_2_reg_960;
reg   [0:0] icmp_ln433_2_reg_960_pp0_iter1_reg;
reg   [0:0] icmp_ln433_2_reg_960_pp0_iter2_reg;
reg   [0:0] icmp_ln433_2_reg_960_pp0_iter3_reg;
reg   [0:0] icmp_ln433_2_reg_960_pp0_iter4_reg;
reg   [0:0] icmp_ln433_2_reg_960_pp0_iter5_reg;
reg   [0:0] icmp_ln433_2_reg_960_pp0_iter6_reg;
wire   [0:0] icmp_ln433_3_fu_623_p2;
reg   [0:0] icmp_ln433_3_reg_965;
reg   [0:0] icmp_ln433_3_reg_965_pp0_iter1_reg;
reg   [0:0] icmp_ln433_3_reg_965_pp0_iter2_reg;
reg   [0:0] icmp_ln433_3_reg_965_pp0_iter3_reg;
reg   [0:0] icmp_ln433_3_reg_965_pp0_iter4_reg;
reg   [0:0] icmp_ln433_3_reg_965_pp0_iter5_reg;
reg   [0:0] icmp_ln433_3_reg_965_pp0_iter6_reg;
wire   [0:0] icmp_ln433_4_fu_635_p2;
reg   [0:0] icmp_ln433_4_reg_970;
reg   [0:0] icmp_ln433_4_reg_970_pp0_iter1_reg;
reg   [0:0] icmp_ln433_4_reg_970_pp0_iter2_reg;
reg   [0:0] icmp_ln433_4_reg_970_pp0_iter3_reg;
reg   [0:0] icmp_ln433_4_reg_970_pp0_iter4_reg;
reg   [0:0] icmp_ln433_4_reg_970_pp0_iter5_reg;
reg   [0:0] icmp_ln433_4_reg_970_pp0_iter6_reg;
wire   [0:0] icmp_ln433_5_fu_647_p2;
reg   [0:0] icmp_ln433_5_reg_975;
reg   [0:0] icmp_ln433_5_reg_975_pp0_iter1_reg;
reg   [0:0] icmp_ln433_5_reg_975_pp0_iter2_reg;
reg   [0:0] icmp_ln433_5_reg_975_pp0_iter3_reg;
reg   [0:0] icmp_ln433_5_reg_975_pp0_iter4_reg;
reg   [0:0] icmp_ln433_5_reg_975_pp0_iter5_reg;
reg   [0:0] icmp_ln433_5_reg_975_pp0_iter6_reg;
wire   [0:0] icmp_ln433_6_fu_659_p2;
reg   [0:0] icmp_ln433_6_reg_980;
reg   [0:0] icmp_ln433_6_reg_980_pp0_iter1_reg;
reg   [0:0] icmp_ln433_6_reg_980_pp0_iter2_reg;
reg   [0:0] icmp_ln433_6_reg_980_pp0_iter3_reg;
reg   [0:0] icmp_ln433_6_reg_980_pp0_iter4_reg;
reg   [0:0] icmp_ln433_6_reg_980_pp0_iter5_reg;
reg   [0:0] icmp_ln433_6_reg_980_pp0_iter6_reg;
wire   [0:0] icmp_ln433_7_fu_671_p2;
reg   [0:0] icmp_ln433_7_reg_985;
reg   [0:0] icmp_ln433_7_reg_985_pp0_iter1_reg;
reg   [0:0] icmp_ln433_7_reg_985_pp0_iter2_reg;
reg   [0:0] icmp_ln433_7_reg_985_pp0_iter3_reg;
reg   [0:0] icmp_ln433_7_reg_985_pp0_iter4_reg;
reg   [0:0] icmp_ln433_7_reg_985_pp0_iter5_reg;
reg   [0:0] icmp_ln433_7_reg_985_pp0_iter6_reg;
reg   [2:0] psum_addr_reg_1070;
reg   [2:0] psum_addr_reg_1070_pp0_iter6_reg;
reg   [2:0] psum_addr_reg_1070_pp0_iter7_reg;
reg   [2:0] psum_addr_reg_1070_pp0_iter8_reg;
reg   [2:0] psum_addr_reg_1070_pp0_iter9_reg;
reg   [2:0] psum_addr_reg_1070_pp0_iter10_reg;
reg   [2:0] psum_1_addr_reg_1076;
reg   [2:0] psum_1_addr_reg_1076_pp0_iter6_reg;
reg   [2:0] psum_1_addr_reg_1076_pp0_iter7_reg;
reg   [2:0] psum_1_addr_reg_1076_pp0_iter8_reg;
reg   [2:0] psum_1_addr_reg_1076_pp0_iter9_reg;
reg   [2:0] psum_1_addr_reg_1076_pp0_iter10_reg;
reg   [2:0] psum_2_addr_reg_1082;
reg   [2:0] psum_2_addr_reg_1082_pp0_iter6_reg;
reg   [2:0] psum_2_addr_reg_1082_pp0_iter7_reg;
reg   [2:0] psum_2_addr_reg_1082_pp0_iter8_reg;
reg   [2:0] psum_2_addr_reg_1082_pp0_iter9_reg;
reg   [2:0] psum_2_addr_reg_1082_pp0_iter10_reg;
reg   [2:0] psum_3_addr_reg_1088;
reg   [2:0] psum_3_addr_reg_1088_pp0_iter6_reg;
reg   [2:0] psum_3_addr_reg_1088_pp0_iter7_reg;
reg   [2:0] psum_3_addr_reg_1088_pp0_iter8_reg;
reg   [2:0] psum_3_addr_reg_1088_pp0_iter9_reg;
reg   [2:0] psum_3_addr_reg_1088_pp0_iter10_reg;
reg   [2:0] psum_4_addr_reg_1094;
reg   [2:0] psum_4_addr_reg_1094_pp0_iter6_reg;
reg   [2:0] psum_4_addr_reg_1094_pp0_iter7_reg;
reg   [2:0] psum_4_addr_reg_1094_pp0_iter8_reg;
reg   [2:0] psum_4_addr_reg_1094_pp0_iter9_reg;
reg   [2:0] psum_4_addr_reg_1094_pp0_iter10_reg;
reg   [2:0] psum_5_addr_reg_1100;
reg   [2:0] psum_5_addr_reg_1100_pp0_iter6_reg;
reg   [2:0] psum_5_addr_reg_1100_pp0_iter7_reg;
reg   [2:0] psum_5_addr_reg_1100_pp0_iter8_reg;
reg   [2:0] psum_5_addr_reg_1100_pp0_iter9_reg;
reg   [2:0] psum_5_addr_reg_1100_pp0_iter10_reg;
reg   [2:0] psum_6_addr_reg_1106;
reg   [2:0] psum_6_addr_reg_1106_pp0_iter6_reg;
reg   [2:0] psum_6_addr_reg_1106_pp0_iter7_reg;
reg   [2:0] psum_6_addr_reg_1106_pp0_iter8_reg;
reg   [2:0] psum_6_addr_reg_1106_pp0_iter9_reg;
reg   [2:0] psum_6_addr_reg_1106_pp0_iter10_reg;
reg   [2:0] psum_7_addr_reg_1112;
reg   [2:0] psum_7_addr_reg_1112_pp0_iter6_reg;
reg   [2:0] psum_7_addr_reg_1112_pp0_iter7_reg;
reg   [2:0] psum_7_addr_reg_1112_pp0_iter8_reg;
reg   [2:0] psum_7_addr_reg_1112_pp0_iter9_reg;
reg   [2:0] psum_7_addr_reg_1112_pp0_iter10_reg;
wire   [63:0] grp_fu_345_p2;
reg   [63:0] mul1_reg_1118;
reg   [63:0] psum_load_1_reg_1123;
wire   [63:0] grp_fu_349_p2;
reg   [63:0] mul67_1_reg_1128;
wire   [63:0] grp_fu_353_p2;
reg   [63:0] mul67_2_reg_1133;
wire   [63:0] grp_fu_357_p2;
reg   [63:0] mul67_3_reg_1138;
wire   [63:0] grp_fu_361_p2;
reg   [63:0] mul67_4_reg_1143;
wire   [63:0] grp_fu_365_p2;
reg   [63:0] mul67_5_reg_1148;
wire   [63:0] grp_fu_369_p2;
reg   [63:0] mul67_6_reg_1153;
wire   [63:0] grp_fu_373_p2;
reg   [63:0] mul67_7_reg_1158;
wire   [63:0] select_ln433_fu_792_p3;
wire   [63:0] idxprom70_fu_755_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] idx_fu_106;
wire   [31:0] idx_2_fu_779_p3;
wire    ap_loop_init;
reg   [31:0] i_1_fu_110;
wire   [31:0] i_4_fu_677_p2;
reg   [31:0] ap_sig_allocacmp_i;
wire   [0:0] grp_nbreadreq_fu_126_p3;
wire   [0:0] grp_nbreadreq_fu_134_p3;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] grp_fu_303_p2;
wire   [63:0] grp_fu_309_p2;
wire   [63:0] grp_fu_315_p2;
wire   [63:0] grp_fu_321_p2;
wire   [63:0] grp_fu_327_p2;
wire   [63:0] grp_fu_333_p2;
wire   [63:0] grp_fu_339_p2;
wire   [63:0] grp_fu_303_p1;
wire   [63:0] grp_fu_309_p1;
wire   [63:0] grp_fu_315_p1;
wire   [63:0] grp_fu_321_p1;
wire   [63:0] grp_fu_327_p1;
wire   [63:0] grp_fu_333_p1;
wire   [63:0] grp_fu_339_p1;
wire   [63:0] grp_fu_345_p0;
wire   [63:0] grp_fu_345_p1;
wire   [63:0] grp_fu_349_p0;
wire   [63:0] grp_fu_349_p1;
wire   [63:0] grp_fu_353_p0;
wire   [63:0] grp_fu_353_p1;
wire   [63:0] grp_fu_357_p0;
wire   [63:0] grp_fu_357_p1;
wire   [63:0] grp_fu_361_p0;
wire   [63:0] grp_fu_361_p1;
wire   [63:0] grp_fu_365_p0;
wire   [63:0] grp_fu_365_p1;
wire   [63:0] grp_fu_369_p0;
wire   [63:0] grp_fu_369_p1;
wire   [63:0] grp_fu_373_p0;
wire   [63:0] grp_fu_373_p1;
wire  signed [31:0] sext_ln408_cast_fu_377_p1;
wire   [0:0] and_ln428_fu_400_p1;
wire   [0:0] and_ln428_fu_400_p2;
wire   [511:0] trunc_ln146_fu_568_p1;
wire   [31:0] empty_24_fu_581_p2;
wire   [31:0] or_ln433_fu_593_p2;
wire   [31:0] or_ln433_1_fu_605_p2;
wire   [31:0] or_ln433_2_fu_617_p2;
wire   [31:0] or_ln433_3_fu_629_p2;
wire   [31:0] or_ln433_4_fu_641_p2;
wire   [31:0] or_ln433_5_fu_653_p2;
wire   [31:0] or_ln433_6_fu_665_p2;
wire   [31:0] idx_1_fu_767_p2;
wire   [0:0] icmp_ln437_fu_773_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_134;
reg    ap_enable_state6_pp0_iter5_stage0;
reg    ap_enable_operation_154;
reg    ap_enable_state7_pp0_iter6_stage0;
reg    ap_enable_operation_217;
reg    ap_enable_state12_pp0_iter11_stage0;
reg    ap_enable_operation_156;
reg    ap_enable_operation_172;
reg    ap_enable_state8_pp0_iter7_stage0;
reg    ap_enable_operation_219;
reg    ap_enable_operation_158;
reg    ap_enable_operation_175;
reg    ap_enable_operation_221;
reg    ap_enable_operation_160;
reg    ap_enable_operation_178;
reg    ap_enable_operation_223;
reg    ap_enable_operation_162;
reg    ap_enable_operation_181;
reg    ap_enable_operation_225;
reg    ap_enable_operation_164;
reg    ap_enable_operation_184;
reg    ap_enable_operation_227;
reg    ap_enable_operation_166;
reg    ap_enable_operation_187;
reg    ap_enable_operation_229;
reg    ap_enable_operation_168;
reg    ap_enable_operation_190;
reg    ap_enable_operation_231;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
reg    ap_condition_1159;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dot_rznew_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_1_q1),
    .din1(grp_fu_303_p1),
    .ce(1'b1),
    .dout(grp_fu_303_p2)
);

dot_rznew_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_2_q1),
    .din1(grp_fu_309_p1),
    .ce(1'b1),
    .dout(grp_fu_309_p2)
);

dot_rznew_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_3_q1),
    .din1(grp_fu_315_p1),
    .ce(1'b1),
    .dout(grp_fu_315_p2)
);

dot_rznew_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_4_q1),
    .din1(grp_fu_321_p1),
    .ce(1'b1),
    .dout(grp_fu_321_p2)
);

dot_rznew_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_5_q1),
    .din1(grp_fu_327_p1),
    .ce(1'b1),
    .dout(grp_fu_327_p2)
);

dot_rznew_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_6_q1),
    .din1(grp_fu_333_p1),
    .ce(1'b1),
    .dout(grp_fu_333_p2)
);

dot_rznew_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(psum_7_q1),
    .din1(grp_fu_339_p1),
    .ce(1'b1),
    .dout(grp_fu_339_p2)
);

dot_rznew_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_345_p0),
    .din1(grp_fu_345_p1),
    .ce(1'b1),
    .dout(grp_fu_345_p2)
);

dot_rznew_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_349_p0),
    .din1(grp_fu_349_p1),
    .ce(1'b1),
    .dout(grp_fu_349_p2)
);

dot_rznew_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_353_p0),
    .din1(grp_fu_353_p1),
    .ce(1'b1),
    .dout(grp_fu_353_p2)
);

dot_rznew_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_357_p0),
    .din1(grp_fu_357_p1),
    .ce(1'b1),
    .dout(grp_fu_357_p2)
);

dot_rznew_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_361_p0),
    .din1(grp_fu_361_p1),
    .ce(1'b1),
    .dout(grp_fu_361_p2)
);

dot_rznew_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_365_p0),
    .din1(grp_fu_365_p1),
    .ce(1'b1),
    .dout(grp_fu_365_p2)
);

dot_rznew_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_369_p0),
    .din1(grp_fu_369_p1),
    .ce(1'b1),
    .dout(grp_fu_369_p2)
);

dot_rznew_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_373_p0),
    .din1(grp_fu_373_p1),
    .ce(1'b1),
    .dout(grp_fu_373_p2)
);

dot_rznew_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_1159)) begin
            i_1_fu_110 <= i_4_fu_677_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_110 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            idx_fu_106 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'd1 == and_ln428_1_reg_866_pp0_iter4_reg))) begin
            idx_fu_106 <= idx_2_fu_779_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln421_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln428_1_reg_866 <= and_ln428_1_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln428_1_reg_866_pp0_iter10_reg <= and_ln428_1_reg_866_pp0_iter9_reg;
        and_ln428_1_reg_866_pp0_iter2_reg <= and_ln428_1_reg_866_pp0_iter1_reg;
        and_ln428_1_reg_866_pp0_iter3_reg <= and_ln428_1_reg_866_pp0_iter2_reg;
        and_ln428_1_reg_866_pp0_iter4_reg <= and_ln428_1_reg_866_pp0_iter3_reg;
        and_ln428_1_reg_866_pp0_iter5_reg <= and_ln428_1_reg_866_pp0_iter4_reg;
        and_ln428_1_reg_866_pp0_iter6_reg <= and_ln428_1_reg_866_pp0_iter5_reg;
        and_ln428_1_reg_866_pp0_iter7_reg <= and_ln428_1_reg_866_pp0_iter6_reg;
        and_ln428_1_reg_866_pp0_iter8_reg <= and_ln428_1_reg_866_pp0_iter7_reg;
        and_ln428_1_reg_866_pp0_iter9_reg <= and_ln428_1_reg_866_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln433_1_reg_955_pp0_iter2_reg <= icmp_ln433_1_reg_955_pp0_iter1_reg;
        icmp_ln433_1_reg_955_pp0_iter3_reg <= icmp_ln433_1_reg_955_pp0_iter2_reg;
        icmp_ln433_1_reg_955_pp0_iter4_reg <= icmp_ln433_1_reg_955_pp0_iter3_reg;
        icmp_ln433_1_reg_955_pp0_iter5_reg <= icmp_ln433_1_reg_955_pp0_iter4_reg;
        icmp_ln433_1_reg_955_pp0_iter6_reg <= icmp_ln433_1_reg_955_pp0_iter5_reg;
        icmp_ln433_2_reg_960_pp0_iter2_reg <= icmp_ln433_2_reg_960_pp0_iter1_reg;
        icmp_ln433_2_reg_960_pp0_iter3_reg <= icmp_ln433_2_reg_960_pp0_iter2_reg;
        icmp_ln433_2_reg_960_pp0_iter4_reg <= icmp_ln433_2_reg_960_pp0_iter3_reg;
        icmp_ln433_2_reg_960_pp0_iter5_reg <= icmp_ln433_2_reg_960_pp0_iter4_reg;
        icmp_ln433_2_reg_960_pp0_iter6_reg <= icmp_ln433_2_reg_960_pp0_iter5_reg;
        icmp_ln433_3_reg_965_pp0_iter2_reg <= icmp_ln433_3_reg_965_pp0_iter1_reg;
        icmp_ln433_3_reg_965_pp0_iter3_reg <= icmp_ln433_3_reg_965_pp0_iter2_reg;
        icmp_ln433_3_reg_965_pp0_iter4_reg <= icmp_ln433_3_reg_965_pp0_iter3_reg;
        icmp_ln433_3_reg_965_pp0_iter5_reg <= icmp_ln433_3_reg_965_pp0_iter4_reg;
        icmp_ln433_3_reg_965_pp0_iter6_reg <= icmp_ln433_3_reg_965_pp0_iter5_reg;
        icmp_ln433_4_reg_970_pp0_iter2_reg <= icmp_ln433_4_reg_970_pp0_iter1_reg;
        icmp_ln433_4_reg_970_pp0_iter3_reg <= icmp_ln433_4_reg_970_pp0_iter2_reg;
        icmp_ln433_4_reg_970_pp0_iter4_reg <= icmp_ln433_4_reg_970_pp0_iter3_reg;
        icmp_ln433_4_reg_970_pp0_iter5_reg <= icmp_ln433_4_reg_970_pp0_iter4_reg;
        icmp_ln433_4_reg_970_pp0_iter6_reg <= icmp_ln433_4_reg_970_pp0_iter5_reg;
        icmp_ln433_5_reg_975_pp0_iter2_reg <= icmp_ln433_5_reg_975_pp0_iter1_reg;
        icmp_ln433_5_reg_975_pp0_iter3_reg <= icmp_ln433_5_reg_975_pp0_iter2_reg;
        icmp_ln433_5_reg_975_pp0_iter4_reg <= icmp_ln433_5_reg_975_pp0_iter3_reg;
        icmp_ln433_5_reg_975_pp0_iter5_reg <= icmp_ln433_5_reg_975_pp0_iter4_reg;
        icmp_ln433_5_reg_975_pp0_iter6_reg <= icmp_ln433_5_reg_975_pp0_iter5_reg;
        icmp_ln433_6_reg_980_pp0_iter2_reg <= icmp_ln433_6_reg_980_pp0_iter1_reg;
        icmp_ln433_6_reg_980_pp0_iter3_reg <= icmp_ln433_6_reg_980_pp0_iter2_reg;
        icmp_ln433_6_reg_980_pp0_iter4_reg <= icmp_ln433_6_reg_980_pp0_iter3_reg;
        icmp_ln433_6_reg_980_pp0_iter5_reg <= icmp_ln433_6_reg_980_pp0_iter4_reg;
        icmp_ln433_6_reg_980_pp0_iter6_reg <= icmp_ln433_6_reg_980_pp0_iter5_reg;
        icmp_ln433_7_reg_985_pp0_iter2_reg <= icmp_ln433_7_reg_985_pp0_iter1_reg;
        icmp_ln433_7_reg_985_pp0_iter3_reg <= icmp_ln433_7_reg_985_pp0_iter2_reg;
        icmp_ln433_7_reg_985_pp0_iter4_reg <= icmp_ln433_7_reg_985_pp0_iter3_reg;
        icmp_ln433_7_reg_985_pp0_iter5_reg <= icmp_ln433_7_reg_985_pp0_iter4_reg;
        icmp_ln433_7_reg_985_pp0_iter6_reg <= icmp_ln433_7_reg_985_pp0_iter5_reg;
        icmp_ln433_reg_950_pp0_iter2_reg <= icmp_ln433_reg_950_pp0_iter1_reg;
        icmp_ln433_reg_950_pp0_iter3_reg <= icmp_ln433_reg_950_pp0_iter2_reg;
        icmp_ln433_reg_950_pp0_iter4_reg <= icmp_ln433_reg_950_pp0_iter3_reg;
        icmp_ln433_reg_950_pp0_iter5_reg <= icmp_ln433_reg_950_pp0_iter4_reg;
        icmp_ln433_reg_950_pp0_iter6_reg <= icmp_ln433_reg_950_pp0_iter5_reg;
        psum_1_addr_reg_1076_pp0_iter10_reg <= psum_1_addr_reg_1076_pp0_iter9_reg;
        psum_1_addr_reg_1076_pp0_iter6_reg <= psum_1_addr_reg_1076;
        psum_1_addr_reg_1076_pp0_iter7_reg <= psum_1_addr_reg_1076_pp0_iter6_reg;
        psum_1_addr_reg_1076_pp0_iter8_reg <= psum_1_addr_reg_1076_pp0_iter7_reg;
        psum_1_addr_reg_1076_pp0_iter9_reg <= psum_1_addr_reg_1076_pp0_iter8_reg;
        psum_2_addr_reg_1082_pp0_iter10_reg <= psum_2_addr_reg_1082_pp0_iter9_reg;
        psum_2_addr_reg_1082_pp0_iter6_reg <= psum_2_addr_reg_1082;
        psum_2_addr_reg_1082_pp0_iter7_reg <= psum_2_addr_reg_1082_pp0_iter6_reg;
        psum_2_addr_reg_1082_pp0_iter8_reg <= psum_2_addr_reg_1082_pp0_iter7_reg;
        psum_2_addr_reg_1082_pp0_iter9_reg <= psum_2_addr_reg_1082_pp0_iter8_reg;
        psum_3_addr_reg_1088_pp0_iter10_reg <= psum_3_addr_reg_1088_pp0_iter9_reg;
        psum_3_addr_reg_1088_pp0_iter6_reg <= psum_3_addr_reg_1088;
        psum_3_addr_reg_1088_pp0_iter7_reg <= psum_3_addr_reg_1088_pp0_iter6_reg;
        psum_3_addr_reg_1088_pp0_iter8_reg <= psum_3_addr_reg_1088_pp0_iter7_reg;
        psum_3_addr_reg_1088_pp0_iter9_reg <= psum_3_addr_reg_1088_pp0_iter8_reg;
        psum_4_addr_reg_1094_pp0_iter10_reg <= psum_4_addr_reg_1094_pp0_iter9_reg;
        psum_4_addr_reg_1094_pp0_iter6_reg <= psum_4_addr_reg_1094;
        psum_4_addr_reg_1094_pp0_iter7_reg <= psum_4_addr_reg_1094_pp0_iter6_reg;
        psum_4_addr_reg_1094_pp0_iter8_reg <= psum_4_addr_reg_1094_pp0_iter7_reg;
        psum_4_addr_reg_1094_pp0_iter9_reg <= psum_4_addr_reg_1094_pp0_iter8_reg;
        psum_5_addr_reg_1100_pp0_iter10_reg <= psum_5_addr_reg_1100_pp0_iter9_reg;
        psum_5_addr_reg_1100_pp0_iter6_reg <= psum_5_addr_reg_1100;
        psum_5_addr_reg_1100_pp0_iter7_reg <= psum_5_addr_reg_1100_pp0_iter6_reg;
        psum_5_addr_reg_1100_pp0_iter8_reg <= psum_5_addr_reg_1100_pp0_iter7_reg;
        psum_5_addr_reg_1100_pp0_iter9_reg <= psum_5_addr_reg_1100_pp0_iter8_reg;
        psum_6_addr_reg_1106_pp0_iter10_reg <= psum_6_addr_reg_1106_pp0_iter9_reg;
        psum_6_addr_reg_1106_pp0_iter6_reg <= psum_6_addr_reg_1106;
        psum_6_addr_reg_1106_pp0_iter7_reg <= psum_6_addr_reg_1106_pp0_iter6_reg;
        psum_6_addr_reg_1106_pp0_iter8_reg <= psum_6_addr_reg_1106_pp0_iter7_reg;
        psum_6_addr_reg_1106_pp0_iter9_reg <= psum_6_addr_reg_1106_pp0_iter8_reg;
        psum_7_addr_reg_1112_pp0_iter10_reg <= psum_7_addr_reg_1112_pp0_iter9_reg;
        psum_7_addr_reg_1112_pp0_iter6_reg <= psum_7_addr_reg_1112;
        psum_7_addr_reg_1112_pp0_iter7_reg <= psum_7_addr_reg_1112_pp0_iter6_reg;
        psum_7_addr_reg_1112_pp0_iter8_reg <= psum_7_addr_reg_1112_pp0_iter7_reg;
        psum_7_addr_reg_1112_pp0_iter9_reg <= psum_7_addr_reg_1112_pp0_iter8_reg;
        psum_addr_reg_1070_pp0_iter10_reg <= psum_addr_reg_1070_pp0_iter9_reg;
        psum_addr_reg_1070_pp0_iter6_reg <= psum_addr_reg_1070;
        psum_addr_reg_1070_pp0_iter7_reg <= psum_addr_reg_1070_pp0_iter6_reg;
        psum_addr_reg_1070_pp0_iter8_reg <= psum_addr_reg_1070_pp0_iter7_reg;
        psum_addr_reg_1070_pp0_iter9_reg <= psum_addr_reg_1070_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln428_1_reg_866_pp0_iter1_reg <= and_ln428_1_reg_866;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln433_1_reg_955_pp0_iter1_reg <= icmp_ln433_1_reg_955;
        icmp_ln433_2_reg_960_pp0_iter1_reg <= icmp_ln433_2_reg_960;
        icmp_ln433_3_reg_965_pp0_iter1_reg <= icmp_ln433_3_reg_965;
        icmp_ln433_4_reg_970_pp0_iter1_reg <= icmp_ln433_4_reg_970;
        icmp_ln433_5_reg_975_pp0_iter1_reg <= icmp_ln433_5_reg_975;
        icmp_ln433_6_reg_980_pp0_iter1_reg <= icmp_ln433_6_reg_980;
        icmp_ln433_7_reg_985_pp0_iter1_reg <= icmp_ln433_7_reg_985;
        icmp_ln433_reg_950_pp0_iter1_reg <= icmp_ln433_reg_950;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln421_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln428_1_fu_406_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln433_1_reg_955 <= icmp_ln433_1_fu_599_p2;
        icmp_ln433_2_reg_960 <= icmp_ln433_2_fu_611_p2;
        icmp_ln433_3_reg_965 <= icmp_ln433_3_fu_623_p2;
        icmp_ln433_4_reg_970 <= icmp_ln433_4_fu_635_p2;
        icmp_ln433_5_reg_975 <= icmp_ln433_5_fu_647_p2;
        icmp_ln433_6_reg_980 <= icmp_ln433_6_fu_659_p2;
        icmp_ln433_7_reg_985 <= icmp_ln433_7_fu_671_p2;
        icmp_ln433_reg_950 <= icmp_ln433_fu_587_p2;
        tmp_10_reg_925 <= {{qz_s_dout[319:256]}};
        tmp_11_reg_930 <= {{qz_s_dout[383:320]}};
        tmp_3_reg_920 <= {{qz_s_dout[255:192]}};
        tmp_4_reg_905 <= {{qr_s_dout[127:64]}};
        tmp_5_reg_875 <= {{qr_s_dout[191:128]}};
        tmp_6_reg_880 <= {{qr_s_dout[255:192]}};
        tmp_7_reg_885 <= {{qr_s_dout[319:256]}};
        tmp_8_reg_890 <= {{qr_s_dout[383:320]}};
        tmp_9_reg_915 <= {{qz_s_dout[191:128]}};
        tmp_s_reg_945 <= {{qz_s_dout[127:64]}};
        trunc_ln78_1_reg_910 <= trunc_ln78_1_fu_494_p1;
        trunc_ln78_2_reg_900 <= {{qr_s_dout[511:448]}};
        trunc_ln78_3_reg_935 <= {{qz_s_dout[447:384]}};
        trunc_ln78_4_reg_940 <= {{qz_s_dout[511:448]}};
        trunc_ln78_reg_870 <= trunc_ln78_fu_416_p1;
        trunc_ln_reg_895 <= {{qr_s_dout[447:384]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln433_reg_950_pp0_iter5_reg == 1'd1) & (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg))) begin
        mul1_reg_1118 <= grp_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln433_1_reg_955_pp0_iter5_reg == 1'd1) & (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg))) begin
        mul67_1_reg_1128 <= grp_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln433_2_reg_960_pp0_iter5_reg == 1'd1) & (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg))) begin
        mul67_2_reg_1133 <= grp_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln433_3_reg_965_pp0_iter5_reg == 1'd1) & (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg))) begin
        mul67_3_reg_1138 <= grp_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln433_4_reg_970_pp0_iter5_reg == 1'd1) & (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg))) begin
        mul67_4_reg_1143 <= grp_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln433_5_reg_975_pp0_iter5_reg == 1'd1) & (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg))) begin
        mul67_5_reg_1148 <= grp_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln433_6_reg_980_pp0_iter5_reg == 1'd1) & (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg))) begin
        mul67_6_reg_1153 <= grp_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln433_7_reg_985_pp0_iter5_reg == 1'd1) & (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg))) begin
        mul67_7_reg_1158 <= grp_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln428_1_reg_866_pp0_iter4_reg))) begin
        psum_1_addr_reg_1076 <= idxprom70_fu_755_p1;
        psum_2_addr_reg_1082 <= idxprom70_fu_755_p1;
        psum_3_addr_reg_1088 <= idxprom70_fu_755_p1;
        psum_4_addr_reg_1094 <= idxprom70_fu_755_p1;
        psum_5_addr_reg_1100 <= idxprom70_fu_755_p1;
        psum_6_addr_reg_1106 <= idxprom70_fu_755_p1;
        psum_7_addr_reg_1112 <= idxprom70_fu_755_p1;
        psum_addr_reg_1070 <= idxprom70_fu_755_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg))) begin
        psum_load_1_reg_1123 <= psum_q1;
    end
end

always @ (*) begin
    if (((icmp_ln421_fu_394_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 32'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_1_ce0 = 1'b1;
    end else begin
        psum_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_1_ce1 = 1'b1;
    end else begin
        psum_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg))) begin
        psum_1_we0 = 1'b1;
    end else begin
        psum_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_2_ce0 = 1'b1;
    end else begin
        psum_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_2_ce1 = 1'b1;
    end else begin
        psum_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg))) begin
        psum_2_we0 = 1'b1;
    end else begin
        psum_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_3_ce0 = 1'b1;
    end else begin
        psum_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_3_ce1 = 1'b1;
    end else begin
        psum_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg))) begin
        psum_3_we0 = 1'b1;
    end else begin
        psum_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_4_ce0 = 1'b1;
    end else begin
        psum_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_4_ce1 = 1'b1;
    end else begin
        psum_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg))) begin
        psum_4_we0 = 1'b1;
    end else begin
        psum_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_5_ce0 = 1'b1;
    end else begin
        psum_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_5_ce1 = 1'b1;
    end else begin
        psum_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg))) begin
        psum_5_we0 = 1'b1;
    end else begin
        psum_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_6_ce0 = 1'b1;
    end else begin
        psum_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_6_ce1 = 1'b1;
    end else begin
        psum_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg))) begin
        psum_6_we0 = 1'b1;
    end else begin
        psum_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_7_ce0 = 1'b1;
    end else begin
        psum_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        psum_7_ce1 = 1'b1;
    end else begin
        psum_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg))) begin
        psum_7_we0 = 1'b1;
    end else begin
        psum_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        psum_ce0 = 1'b1;
    end else begin
        psum_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        psum_ce1 = 1'b1;
    end else begin
        psum_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg))) begin
        psum_we0 = 1'b1;
    end else begin
        psum_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln421_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln428_1_fu_406_p2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (qr_out_full_n == 1'b1))) begin
        qr_out_write = 1'b1;
    end else begin
        qr_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln421_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln428_1_fu_406_p2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (qr_s_empty_n == 1'b1))) begin
        qr_s_read = 1'b1;
    end else begin
        qr_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln421_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln428_1_fu_406_p2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (qz_s_empty_n == 1'b1))) begin
        qz_s_read = 1'b1;
    end else begin
        qz_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln428_1_fu_406_p2 = (grp_nbreadreq_fu_126_p3 & and_ln428_fu_400_p2);

assign and_ln428_fu_400_p1 = qr_out_full_n;

assign and_ln428_fu_400_p2 = (grp_nbreadreq_fu_134_p3 & and_ln428_fu_400_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1159 = ((icmp_ln421_fu_394_p2 == 1'd1) & (1'd1 == and_ln428_1_fu_406_p2) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_enable_operation_134 = (1'd1 == and_ln428_1_reg_866_pp0_iter4_reg);
end

always @ (*) begin
    ap_enable_operation_154 = (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg);
end

always @ (*) begin
    ap_enable_operation_156 = (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg);
end

always @ (*) begin
    ap_enable_operation_158 = (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg);
end

always @ (*) begin
    ap_enable_operation_160 = (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg);
end

always @ (*) begin
    ap_enable_operation_162 = (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg);
end

always @ (*) begin
    ap_enable_operation_164 = (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg);
end

always @ (*) begin
    ap_enable_operation_166 = (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg);
end

always @ (*) begin
    ap_enable_operation_168 = (1'd1 == and_ln428_1_reg_866_pp0_iter5_reg);
end

always @ (*) begin
    ap_enable_operation_172 = (1'd1 == and_ln428_1_reg_866_pp0_iter6_reg);
end

always @ (*) begin
    ap_enable_operation_175 = (1'd1 == and_ln428_1_reg_866_pp0_iter6_reg);
end

always @ (*) begin
    ap_enable_operation_178 = (1'd1 == and_ln428_1_reg_866_pp0_iter6_reg);
end

always @ (*) begin
    ap_enable_operation_181 = (1'd1 == and_ln428_1_reg_866_pp0_iter6_reg);
end

always @ (*) begin
    ap_enable_operation_184 = (1'd1 == and_ln428_1_reg_866_pp0_iter6_reg);
end

always @ (*) begin
    ap_enable_operation_187 = (1'd1 == and_ln428_1_reg_866_pp0_iter6_reg);
end

always @ (*) begin
    ap_enable_operation_190 = (1'd1 == and_ln428_1_reg_866_pp0_iter6_reg);
end

always @ (*) begin
    ap_enable_operation_217 = (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg);
end

always @ (*) begin
    ap_enable_operation_219 = (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg);
end

always @ (*) begin
    ap_enable_operation_221 = (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg);
end

always @ (*) begin
    ap_enable_operation_223 = (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg);
end

always @ (*) begin
    ap_enable_operation_225 = (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg);
end

always @ (*) begin
    ap_enable_operation_227 = (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg);
end

always @ (*) begin
    ap_enable_operation_229 = (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg);
end

always @ (*) begin
    ap_enable_operation_231 = (1'd1 == and_ln428_1_reg_866_pp0_iter10_reg);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

always @ (*) begin
    ap_enable_state12_pp0_iter11_stage0 = ((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state6_pp0_iter5_stage0 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state7_pp0_iter6_stage0 = ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state8_pp0_iter7_stage0 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_24_fu_581_p2 = ap_sig_allocacmp_i << 32'd3;

assign grp_fu_303_p1 = ((icmp_ln433_1_reg_955_pp0_iter6_reg[0:0] == 1'b1) ? mul67_1_reg_1128 : 64'd0);

assign grp_fu_309_p1 = ((icmp_ln433_2_reg_960_pp0_iter6_reg[0:0] == 1'b1) ? mul67_2_reg_1133 : 64'd0);

assign grp_fu_315_p1 = ((icmp_ln433_3_reg_965_pp0_iter6_reg[0:0] == 1'b1) ? mul67_3_reg_1138 : 64'd0);

assign grp_fu_321_p1 = ((icmp_ln433_4_reg_970_pp0_iter6_reg[0:0] == 1'b1) ? mul67_4_reg_1143 : 64'd0);

assign grp_fu_327_p1 = ((icmp_ln433_5_reg_975_pp0_iter6_reg[0:0] == 1'b1) ? mul67_5_reg_1148 : 64'd0);

assign grp_fu_333_p1 = ((icmp_ln433_6_reg_980_pp0_iter6_reg[0:0] == 1'b1) ? mul67_6_reg_1153 : 64'd0);

assign grp_fu_339_p1 = ((icmp_ln433_7_reg_985_pp0_iter6_reg[0:0] == 1'b1) ? mul67_7_reg_1158 : 64'd0);

assign grp_fu_345_p0 = trunc_ln78_reg_870;

assign grp_fu_345_p1 = trunc_ln78_1_reg_910;

assign grp_fu_349_p0 = tmp_4_reg_905;

assign grp_fu_349_p1 = tmp_s_reg_945;

assign grp_fu_353_p0 = tmp_5_reg_875;

assign grp_fu_353_p1 = tmp_9_reg_915;

assign grp_fu_357_p0 = tmp_6_reg_880;

assign grp_fu_357_p1 = tmp_3_reg_920;

assign grp_fu_361_p0 = tmp_7_reg_885;

assign grp_fu_361_p1 = tmp_10_reg_925;

assign grp_fu_365_p0 = tmp_8_reg_890;

assign grp_fu_365_p1 = tmp_11_reg_930;

assign grp_fu_369_p0 = trunc_ln_reg_895;

assign grp_fu_369_p1 = trunc_ln78_3_reg_935;

assign grp_fu_373_p0 = trunc_ln78_2_reg_900;

assign grp_fu_373_p1 = trunc_ln78_4_reg_940;

assign grp_fu_432_p_ce = 1'b1;

assign grp_fu_432_p_din0 = psum_load_1_reg_1123;

assign grp_fu_432_p_din1 = select_ln433_fu_792_p3;

assign grp_fu_432_p_opcode = 2'd0;

assign grp_nbreadreq_fu_126_p3 = qr_s_empty_n;

assign grp_nbreadreq_fu_134_p3 = qz_s_empty_n;

assign i_4_fu_677_p2 = (ap_sig_allocacmp_i + 32'd1);

assign icmp_ln421_fu_394_p2 = (($signed(ap_sig_allocacmp_i) < $signed(sext_ln408_cast_fu_377_p1)) ? 1'b1 : 1'b0);

assign icmp_ln433_1_fu_599_p2 = (($signed(or_ln433_fu_593_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln433_2_fu_611_p2 = (($signed(or_ln433_1_fu_605_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln433_3_fu_623_p2 = (($signed(or_ln433_2_fu_617_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln433_4_fu_635_p2 = (($signed(or_ln433_3_fu_629_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln433_5_fu_647_p2 = (($signed(or_ln433_4_fu_641_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln433_6_fu_659_p2 = (($signed(or_ln433_5_fu_653_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln433_7_fu_671_p2 = (($signed(or_ln433_6_fu_665_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln433_fu_587_p2 = (($signed(empty_24_fu_581_p2) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln437_fu_773_p2 = ((idx_1_fu_767_p2 == 32'd7) ? 1'b1 : 1'b0);

assign idx_1_fu_767_p2 = (idx_fu_106 + 32'd1);

assign idx_2_fu_779_p3 = ((icmp_ln437_fu_773_p2[0:0] == 1'b1) ? 32'd0 : idx_1_fu_767_p2);

assign idxprom70_fu_755_p1 = idx_fu_106;

assign or_ln433_1_fu_605_p2 = (empty_24_fu_581_p2 | 32'd2);

assign or_ln433_2_fu_617_p2 = (empty_24_fu_581_p2 | 32'd3);

assign or_ln433_3_fu_629_p2 = (empty_24_fu_581_p2 | 32'd4);

assign or_ln433_4_fu_641_p2 = (empty_24_fu_581_p2 | 32'd5);

assign or_ln433_5_fu_653_p2 = (empty_24_fu_581_p2 | 32'd6);

assign or_ln433_6_fu_665_p2 = (empty_24_fu_581_p2 | 32'd7);

assign or_ln433_fu_593_p2 = (empty_24_fu_581_p2 | 32'd1);

assign psum_1_address0 = psum_1_addr_reg_1076_pp0_iter10_reg;

assign psum_1_address1 = psum_1_addr_reg_1076;

assign psum_1_d0 = grp_fu_303_p2;

assign psum_2_address0 = psum_2_addr_reg_1082_pp0_iter10_reg;

assign psum_2_address1 = psum_2_addr_reg_1082;

assign psum_2_d0 = grp_fu_309_p2;

assign psum_3_address0 = psum_3_addr_reg_1088_pp0_iter10_reg;

assign psum_3_address1 = psum_3_addr_reg_1088;

assign psum_3_d0 = grp_fu_315_p2;

assign psum_4_address0 = psum_4_addr_reg_1094_pp0_iter10_reg;

assign psum_4_address1 = psum_4_addr_reg_1094;

assign psum_4_d0 = grp_fu_321_p2;

assign psum_5_address0 = psum_5_addr_reg_1100_pp0_iter10_reg;

assign psum_5_address1 = psum_5_addr_reg_1100;

assign psum_5_d0 = grp_fu_327_p2;

assign psum_6_address0 = psum_6_addr_reg_1106_pp0_iter10_reg;

assign psum_6_address1 = psum_6_addr_reg_1106;

assign psum_6_d0 = grp_fu_333_p2;

assign psum_7_address0 = psum_7_addr_reg_1112_pp0_iter10_reg;

assign psum_7_address1 = psum_7_addr_reg_1112;

assign psum_7_d0 = grp_fu_339_p2;

assign psum_address0 = psum_addr_reg_1070_pp0_iter10_reg;

assign psum_address1 = idxprom70_fu_755_p1;

assign psum_d0 = grp_fu_432_p_dout0;

assign qr_out_din = {{1'd0}, {trunc_ln146_fu_568_p1}};

assign select_ln433_fu_792_p3 = ((icmp_ln433_reg_950_pp0_iter6_reg[0:0] == 1'b1) ? mul1_reg_1118 : 64'd0);

assign sext_ln408_cast_fu_377_p1 = $signed(sext_ln408);

assign trunc_ln146_fu_568_p1 = qr_s_dout[511:0];

assign trunc_ln78_1_fu_494_p1 = qz_s_dout[63:0];

assign trunc_ln78_fu_416_p1 = qr_s_dout[63:0];

endmodule //dot_rznew_dot_rznew_Pipeline_comp1
