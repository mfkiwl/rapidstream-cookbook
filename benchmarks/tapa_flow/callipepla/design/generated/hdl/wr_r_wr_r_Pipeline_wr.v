// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

module wr_r_wr_r_Pipeline_wr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wr_count,
        vec_r_write_resp_s_dout,
        vec_r_write_resp_s_empty_n,
        vec_r_write_resp_s_read,
        q_din_s_dout,
        q_din_s_empty_n,
        q_din_s_read,
        vec_r_write_addr_din,
        vec_r_write_addr_full_n,
        vec_r_write_addr_write,
        vec_r_write_data_din,
        vec_r_write_data_full_n,
        vec_r_write_data_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] wr_count;
input  [8:0] vec_r_write_resp_s_dout;
input   vec_r_write_resp_s_empty_n;
output   vec_r_write_resp_s_read;
input  [65:0] q_din_s_dout;
input   q_din_s_empty_n;
output   q_din_s_read;
output  [64:0] vec_r_write_addr_din;
input   vec_r_write_addr_full_n;
output   vec_r_write_addr_write;
output  [64:0] vec_r_write_data_din;
input   vec_r_write_data_full_n;
output   vec_r_write_data_write;

reg ap_idle;
reg vec_r_write_resp_s_read;
reg q_din_s_read;
reg vec_r_write_addr_write;
reg vec_r_write_data_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln445_fu_150_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] i_resp_fu_58;
wire   [31:0] i_resp_5_fu_274_p3;
wire    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [31:0] addr_req_fu_62;
wire   [31:0] addr_req_2_fu_218_p2;
wire   [0:0] and_ln450_fu_174_p2;
reg   [31:0] wr_count_1_fu_66;
wire   [31:0] wr_count_3_fu_224_p3;
wire   [0:0] tmp_nbreadreq_fu_76_p3;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] vec_r_write_resp_s_read_nbread_fu_120_p2_0;
wire  signed [31:0] icmp_ln448_fu_156_p0;
wire   [0:0] and_ln450_2_fu_162_p0;
wire   [0:0] and_ln450_2_fu_162_p1;
wire   [0:0] and_ln450_2_fu_162_p2;
wire   [0:0] and_ln450_1_fu_168_p2;
wire   [0:0] icmp_ln448_fu_156_p2;
wire  signed [31:0] sext_ln452_fu_180_p0;
wire  signed [63:0] sext_ln452_fu_180_p1;
wire   [63:0] trunc_ln78_fu_197_p1;
wire  signed [31:0] addr_req_2_fu_218_p0;
wire   [0:0] elem_val_term_fu_201_p3;
wire   [7:0] elem_val_fu_250_p1;
wire   [8:0] zext_ln461_fu_254_p1;
wire   [8:0] add_ln461_fu_258_p2;
wire   [31:0] zext_ln461_1_fu_264_p1;
wire   [31:0] i_resp_4_fu_268_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_240;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

wr_r_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            addr_req_fu_62 <= 32'd0;
        end else if ((1'b1 == ap_condition_240)) begin
            addr_req_fu_62 <= addr_req_2_fu_218_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_resp_fu_58 <= 32'd0;
        end else if (((icmp_ln445_fu_150_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_resp_fu_58 <= i_resp_5_fu_274_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            wr_count_1_fu_66 <= wr_count;
        end else if ((1'b1 == ap_condition_240)) begin
            wr_count_1_fu_66 <= wr_count_3_fu_224_p3;
        end
    end
end

always @ (*) begin
    if (((icmp_ln445_fu_150_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln450_fu_174_p2) & (q_din_s_empty_n == 1'b1) & (icmp_ln445_fu_150_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_din_s_read = 1'b1;
    end else begin
        q_din_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln450_fu_174_p2) & (vec_r_write_addr_full_n == 1'b1) & (icmp_ln445_fu_150_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_r_write_addr_write = 1'b1;
    end else begin
        vec_r_write_addr_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln450_fu_174_p2) & (vec_r_write_data_full_n == 1'b1) & (icmp_ln445_fu_150_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_r_write_data_write = 1'b1;
    end else begin
        vec_r_write_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((vec_r_write_resp_s_empty_n == 1'b1) & (icmp_ln445_fu_150_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_r_write_resp_s_read = 1'b1;
    end else begin
        vec_r_write_resp_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln461_fu_258_p2 = (zext_ln461_fu_254_p1 + 9'd1);

assign addr_req_2_fu_218_p0 = addr_req_fu_62;

assign addr_req_2_fu_218_p2 = ($signed(addr_req_2_fu_218_p0) + $signed(32'd1));

assign and_ln450_1_fu_168_p2 = (tmp_nbreadreq_fu_76_p3 & and_ln450_2_fu_162_p2);

assign and_ln450_2_fu_162_p0 = vec_r_write_addr_full_n;

assign and_ln450_2_fu_162_p1 = vec_r_write_data_full_n;

assign and_ln450_2_fu_162_p2 = (and_ln450_2_fu_162_p1 & and_ln450_2_fu_162_p0);

assign and_ln450_fu_174_p2 = (icmp_ln448_fu_156_p2 & and_ln450_1_fu_168_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_240 = ((1'd1 == and_ln450_fu_174_p2) & (icmp_ln445_fu_150_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign elem_val_fu_250_p1 = vec_r_write_resp_s_dout[7:0];

assign elem_val_term_fu_201_p3 = q_din_s_dout[32'd64];

assign i_resp_4_fu_268_p2 = (zext_ln461_1_fu_264_p1 + i_resp_fu_58);

assign i_resp_5_fu_274_p3 = ((vec_r_write_resp_s_read_nbread_fu_120_p2_0[0:0] == 1'b1) ? i_resp_4_fu_268_p2 : i_resp_fu_58);

assign icmp_ln445_fu_150_p2 = (($signed(i_resp_fu_58) < $signed(wr_count_1_fu_66)) ? 1'b1 : 1'b0);

assign icmp_ln448_fu_156_p0 = addr_req_fu_62;

assign icmp_ln448_fu_156_p2 = (($signed(icmp_ln448_fu_156_p0) < $signed(wr_count_1_fu_66)) ? 1'b1 : 1'b0);

assign sext_ln452_fu_180_p0 = addr_req_fu_62;

assign sext_ln452_fu_180_p1 = sext_ln452_fu_180_p0;

assign tmp_nbreadreq_fu_76_p3 = q_din_s_empty_n;

assign trunc_ln78_fu_197_p1 = q_din_s_dout[63:0];

assign vec_r_write_addr_din = {{1'd0}, {sext_ln452_fu_180_p1}};

assign vec_r_write_data_din = {{1'd0}, {trunc_ln78_fu_197_p1}};

assign vec_r_write_resp_s_read_nbread_fu_120_p2_0 = vec_r_write_resp_s_empty_n;

assign wr_count_3_fu_224_p3 = ((elem_val_term_fu_201_p3[0:0] == 1'b1) ? addr_req_2_fu_218_p2 : wr_count_1_fu_66);

assign zext_ln461_1_fu_264_p1 = add_ln461_fu_258_p2;

assign zext_ln461_fu_254_p1 = elem_val_fu_250_p1;

endmodule //wr_r_wr_r_Pipeline_wr
