// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="read_edge_list_ptr_read_edge_list_ptr,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.856000,HLS_SYN_LAT=3251,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=140,HLS_SYN_LUT=412,HLS_VERSION=2022_2}" *)

module read_edge_list_ptr (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_ite,
        M,
        rp_time,
        edge_list_ptr_read_addr_din,
        edge_list_ptr_read_addr_full_n,
        edge_list_ptr_read_addr_write,
        edge_list_ptr_read_data_s_dout,
        edge_list_ptr_read_data_s_empty_n,
        edge_list_ptr_read_data_s_read,
        edge_list_ptr_read_data_peek_dout,
        edge_list_ptr_read_data_peek_empty_n,
        edge_list_ptr_read_data_peek_read,
        edge_list_ptr_write_addr_din,
        edge_list_ptr_write_addr_full_n,
        edge_list_ptr_write_addr_write,
        edge_list_ptr_write_data_din,
        edge_list_ptr_write_data_full_n,
        edge_list_ptr_write_data_write,
        edge_list_ptr_write_resp_s_dout,
        edge_list_ptr_write_resp_s_empty_n,
        edge_list_ptr_write_resp_s_read,
        edge_list_ptr_write_resp_peek_dout,
        edge_list_ptr_write_resp_peek_empty_n,
        edge_list_ptr_write_resp_peek_read,
        PE_inst_din,
        PE_inst_full_n,
        PE_inst_write,
        q_gbc_s_dout,
        q_gbc_s_empty_n,
        q_gbc_s_read,
        q_gbc_peek_dout,
        q_gbc_peek_empty_n,
        q_gbc_peek_read,
        q_gbc_out_din,
        q_gbc_out_full_n,
        q_gbc_out_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_ite;
input  [31:0] M;
input  [31:0] rp_time;
output  [64:0] edge_list_ptr_read_addr_din;
input   edge_list_ptr_read_addr_full_n;
output   edge_list_ptr_read_addr_write;
input  [32:0] edge_list_ptr_read_data_s_dout;
input   edge_list_ptr_read_data_s_empty_n;
output   edge_list_ptr_read_data_s_read;
input  [32:0] edge_list_ptr_read_data_peek_dout;
input   edge_list_ptr_read_data_peek_empty_n;
output   edge_list_ptr_read_data_peek_read;
output  [64:0] edge_list_ptr_write_addr_din;
input   edge_list_ptr_write_addr_full_n;
output   edge_list_ptr_write_addr_write;
output  [32:0] edge_list_ptr_write_data_din;
input   edge_list_ptr_write_data_full_n;
output   edge_list_ptr_write_data_write;
input  [8:0] edge_list_ptr_write_resp_s_dout;
input   edge_list_ptr_write_resp_s_empty_n;
output   edge_list_ptr_write_resp_s_read;
input  [8:0] edge_list_ptr_write_resp_peek_dout;
input   edge_list_ptr_write_resp_peek_empty_n;
output   edge_list_ptr_write_resp_peek_read;
output  [32:0] PE_inst_din;
input   PE_inst_full_n;
output   PE_inst_write;
input  [1:0] q_gbc_s_dout;
input   q_gbc_s_empty_n;
output   q_gbc_s_read;
input  [1:0] q_gbc_peek_dout;
input   q_gbc_peek_empty_n;
output   q_gbc_peek_read;
output  [1:0] q_gbc_out_din;
input   q_gbc_out_full_n;
output   q_gbc_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg edge_list_ptr_read_addr_write;
reg edge_list_ptr_read_data_s_read;
reg[32:0] PE_inst_din;
reg PE_inst_write;
reg q_gbc_s_read;
reg q_gbc_out_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    PE_inst_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    q_gbc_s_blk_n;
wire    ap_CS_fsm_state7;
reg    q_gbc_out_blk_n;
wire   [31:0] num_ite_plus1_fu_276_p2;
reg   [31:0] num_ite_plus1_reg_342;
wire   [0:0] xor_ln266_fu_319_p2;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_start;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_done;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_idle;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_ready;
wire   [32:0] grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_PE_inst_din;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_PE_inst_write;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_edge_list_ptr_read_data_s_read;
wire   [64:0] grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_edge_list_ptr_read_addr_din;
wire    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_edge_list_ptr_read_addr_write;
reg   [0:0] phi_ln266_reg_222;
reg    ap_block_state7;
reg    grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [0:0] and_ln266_fu_289_p2;
wire    ap_CS_fsm_state5;
reg   [31:0] rp_fu_92;
wire   [31:0] rp_3_fu_295_p2;
reg    ap_block_state1;
wire   [32:0] p_s_fu_244_p3;
wire   [32:0] p_2_fu_258_p3;
wire   [32:0] p_3_fu_267_p3;
wire   [0:0] icmp_ln266_fu_284_p2;
wire   [0:0] term_flag_fu_306_p1;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_start_reg = 1'b0;
end

read_edge_list_ptr_read_edge_list_ptr_Pipeline_rd_ptr grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_start),
    .ap_done(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_done),
    .ap_idle(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_idle),
    .ap_ready(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_ready),
    .num_ite_plus1(num_ite_plus1_reg_342),
    .PE_inst_din(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_PE_inst_din),
    .PE_inst_full_n(PE_inst_full_n),
    .PE_inst_write(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_PE_inst_write),
    .edge_list_ptr_read_data_s_dout(edge_list_ptr_read_data_s_dout),
    .edge_list_ptr_read_data_s_empty_n(edge_list_ptr_read_data_s_empty_n),
    .edge_list_ptr_read_data_s_read(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_edge_list_ptr_read_data_s_read),
    .edge_list_ptr_read_addr_din(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_edge_list_ptr_read_addr_din),
    .edge_list_ptr_read_addr_full_n(edge_list_ptr_read_addr_full_n),
    .edge_list_ptr_read_addr_write(grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_edge_list_ptr_read_addr_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln266_fu_289_p2))) begin
            grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_start_reg <= 1'b1;
        end else if ((grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_ready == 1'b1)) begin
            grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((q_gbc_out_full_n == 1'b0) | (q_gbc_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_ln266_reg_222 <= xor_ln266_fu_319_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == PE_inst_full_n))) begin
        phi_ln266_reg_222 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == PE_inst_full_n) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rp_fu_92 <= 32'd4294967295;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln266_fu_289_p2))) begin
        rp_fu_92 <= rp_3_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        num_ite_plus1_reg_342 <= num_ite_plus1_fu_276_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        PE_inst_blk_n = PE_inst_full_n;
    end else begin
        PE_inst_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == PE_inst_full_n))) begin
        PE_inst_din = p_3_fu_267_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == PE_inst_full_n))) begin
        PE_inst_din = p_2_fu_258_p3;
    end else if ((~((1'b0 == PE_inst_full_n) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        PE_inst_din = p_s_fu_244_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        PE_inst_din = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_PE_inst_din;
    end else begin
        PE_inst_din = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_PE_inst_din;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == PE_inst_full_n)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == PE_inst_full_n)) | (~((1'b0 == PE_inst_full_n) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        PE_inst_write = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        PE_inst_write = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_PE_inst_write;
    end else begin
        PE_inst_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == PE_inst_full_n) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == PE_inst_full_n)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == PE_inst_full_n)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((q_gbc_out_full_n == 1'b0) | (q_gbc_s_empty_n == 1'b0))) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == and_ln266_fu_289_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == and_ln266_fu_289_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        edge_list_ptr_read_addr_write = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_edge_list_ptr_read_addr_write;
    end else begin
        edge_list_ptr_read_addr_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        edge_list_ptr_read_data_s_read = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_edge_list_ptr_read_data_s_read;
    end else begin
        edge_list_ptr_read_data_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        q_gbc_out_blk_n = q_gbc_out_full_n;
    end else begin
        q_gbc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((q_gbc_out_full_n == 1'b0) | (q_gbc_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        q_gbc_out_write = 1'b1;
    end else begin
        q_gbc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        q_gbc_s_blk_n = q_gbc_s_empty_n;
    end else begin
        q_gbc_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((q_gbc_out_full_n == 1'b0) | (q_gbc_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        q_gbc_s_read = 1'b1;
    end else begin
        q_gbc_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == PE_inst_full_n) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == PE_inst_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == PE_inst_full_n))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == and_ln266_fu_289_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if ((~((q_gbc_out_full_n == 1'b0) | (q_gbc_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln266_fu_289_p2 = (phi_ln266_reg_222 & icmp_ln266_fu_284_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((1'b0 == PE_inst_full_n) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((q_gbc_out_full_n == 1'b0) | (q_gbc_s_empty_n == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign edge_list_ptr_read_addr_din = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_edge_list_ptr_read_addr_din;

assign edge_list_ptr_read_data_peek_read = 1'b0;

assign edge_list_ptr_write_addr_din = 65'd0;

assign edge_list_ptr_write_addr_write = 1'b0;

assign edge_list_ptr_write_data_din = 33'd0;

assign edge_list_ptr_write_data_write = 1'b0;

assign edge_list_ptr_write_resp_peek_read = 1'b0;

assign edge_list_ptr_write_resp_s_read = 1'b0;

assign grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_start = grp_read_edge_list_ptr_Pipeline_rd_ptr_fu_233_ap_start_reg;

assign icmp_ln266_fu_284_p2 = (($signed(rp_fu_92) < $signed(rp_time)) ? 1'b1 : 1'b0);

assign num_ite_plus1_fu_276_p2 = (num_ite + 32'd1);

assign p_2_fu_258_p3 = {{1'd0}, {M}};

assign p_3_fu_267_p3 = {{1'd0}, {rp_time}};

assign p_s_fu_244_p3 = {{1'd0}, {num_ite}};

assign q_gbc_out_din = {{1'd0}, {term_flag_fu_306_p1}};

assign q_gbc_peek_read = 1'b0;

assign rp_3_fu_295_p2 = (rp_fu_92 + 32'd1);

assign term_flag_fu_306_p1 = q_gbc_s_dout[0:0];

assign xor_ln266_fu_319_p2 = (term_flag_fu_306_p1 ^ 1'd1);

endmodule //read_edge_list_ptr
