// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="updt_x_updt_x,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.896000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=9519,HLS_SYN_LUT=7146,HLS_VERSION=2022_2}" *)

module updt_x (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rp_time,
        M,
        qalpha_s_dout,
        qalpha_s_empty_n,
        qalpha_s_read,
        qalpha_peek_dout,
        qalpha_peek_empty_n,
        qalpha_peek_read,
        qx_s_dout,
        qx_s_empty_n,
        qx_s_read,
        qx_peek_dout,
        qx_peek_empty_n,
        qx_peek_read,
        qp_s_dout,
        qp_s_empty_n,
        qp_s_read,
        qp_peek_dout,
        qp_peek_empty_n,
        qp_peek_read,
        qout_din,
        qout_full_n,
        qout_write,
        q_gbc_s_dout,
        q_gbc_s_empty_n,
        q_gbc_s_read,
        q_gbc_peek_dout,
        q_gbc_peek_empty_n,
        q_gbc_peek_read
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] rp_time;
input  [31:0] M;
input  [64:0] qalpha_s_dout;
input   qalpha_s_empty_n;
output   qalpha_s_read;
input  [64:0] qalpha_peek_dout;
input   qalpha_peek_empty_n;
output   qalpha_peek_read;
input  [512:0] qx_s_dout;
input   qx_s_empty_n;
output   qx_s_read;
input  [512:0] qx_peek_dout;
input   qx_peek_empty_n;
output   qx_peek_read;
input  [512:0] qp_s_dout;
input   qp_s_empty_n;
output   qp_s_read;
input  [512:0] qp_peek_dout;
input   qp_peek_empty_n;
output   qp_peek_read;
output  [512:0] qout_din;
input   qout_full_n;
output   qout_write;
input  [1:0] q_gbc_s_dout;
input   q_gbc_s_empty_n;
output   q_gbc_s_read;
input  [1:0] q_gbc_peek_dout;
input   q_gbc_peek_empty_n;
output   q_gbc_peek_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg qalpha_s_read;
reg qx_s_read;
reg qp_s_read;
reg qout_write;
reg q_gbc_s_read;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    qalpha_s_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln415_fu_226_p2;
reg    q_gbc_s_blk_n;
wire    ap_CS_fsm_state6;
reg   [28:0] num_ite_reg_273;
wire   [63:0] trunc_ln85_fu_232_p1;
reg   [63:0] trunc_ln85_reg_281;
wire   [63:0] alpha_fu_247_p1;
reg   [63:0] alpha_reg_286;
wire    ap_CS_fsm_state3;
wire   [0:0] xor_ln415_fu_255_p2;
wire    grp_updt_x_Pipeline_cc_fu_185_ap_start;
wire    grp_updt_x_Pipeline_cc_fu_185_ap_done;
wire    grp_updt_x_Pipeline_cc_fu_185_ap_idle;
wire    grp_updt_x_Pipeline_cc_fu_185_ap_ready;
wire   [512:0] grp_updt_x_Pipeline_cc_fu_185_qout_din;
wire    grp_updt_x_Pipeline_cc_fu_185_qout_write;
wire    grp_updt_x_Pipeline_cc_fu_185_qx_s_read;
wire    grp_updt_x_Pipeline_cc_fu_185_qp_s_read;
reg   [0:0] phi_ln415_reg_174;
reg    grp_updt_x_Pipeline_cc_fu_185_ap_start_reg;
wire    ap_CS_fsm_state4;
reg   [31:0] rp_fu_74;
wire   [31:0] rp_3_fu_236_p2;
reg    ap_block_state2;
wire   [31:0] add_ln412_fu_197_p2;
wire   [0:0] icmp_ln415_fu_221_p2;
wire   [0:0] term_flag_fu_251_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_updt_x_Pipeline_cc_fu_185_ap_start_reg = 1'b0;
end

updt_x_updt_x_Pipeline_cc grp_updt_x_Pipeline_cc_fu_185(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_updt_x_Pipeline_cc_fu_185_ap_start),
    .ap_done(grp_updt_x_Pipeline_cc_fu_185_ap_done),
    .ap_idle(grp_updt_x_Pipeline_cc_fu_185_ap_idle),
    .ap_ready(grp_updt_x_Pipeline_cc_fu_185_ap_ready),
    .qout_din(grp_updt_x_Pipeline_cc_fu_185_qout_din),
    .qout_full_n(qout_full_n),
    .qout_write(grp_updt_x_Pipeline_cc_fu_185_qout_write),
    .sext_ln412(num_ite_reg_273),
    .qx_s_dout(qx_s_dout),
    .qx_s_empty_n(qx_s_empty_n),
    .qx_s_read(grp_updt_x_Pipeline_cc_fu_185_qx_s_read),
    .qp_s_dout(qp_s_dout),
    .qp_s_empty_n(qp_s_empty_n),
    .qp_s_read(grp_updt_x_Pipeline_cc_fu_185_qp_s_read),
    .alpha(alpha_reg_286)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_updt_x_Pipeline_cc_fu_185_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_updt_x_Pipeline_cc_fu_185_ap_start_reg <= 1'b1;
        end else if ((grp_updt_x_Pipeline_cc_fu_185_ap_ready == 1'b1)) begin
            grp_updt_x_Pipeline_cc_fu_185_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((q_gbc_s_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_ln415_reg_174 <= xor_ln415_fu_255_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln415_reg_174 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rp_fu_74 <= 32'd4294967295;
    end else if ((~((1'd1 == and_ln415_fu_226_p2) & (qalpha_s_empty_n == 1'b0)) & (1'd1 == and_ln415_fu_226_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        rp_fu_74 <= rp_3_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        alpha_reg_286 <= alpha_fu_247_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        num_ite_reg_273 <= {{add_ln412_fu_197_p2[31:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln415_fu_226_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln85_reg_281 <= trunc_ln85_fu_232_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln415_fu_226_p2) & (qalpha_s_empty_n == 1'b0))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_updt_x_Pipeline_cc_fu_185_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((q_gbc_s_empty_n == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'd1 == and_ln415_fu_226_p2) & (qalpha_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (1'd0 == and_ln415_fu_226_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'd1 == and_ln415_fu_226_p2) & (qalpha_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (1'd0 == and_ln415_fu_226_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        q_gbc_s_blk_n = q_gbc_s_empty_n;
    end else begin
        q_gbc_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((q_gbc_s_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        q_gbc_s_read = 1'b1;
    end else begin
        q_gbc_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln415_fu_226_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        qalpha_s_blk_n = qalpha_s_empty_n;
    end else begin
        qalpha_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'd1 == and_ln415_fu_226_p2) & (qalpha_s_empty_n == 1'b0)) & (1'd1 == and_ln415_fu_226_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        qalpha_s_read = 1'b1;
    end else begin
        qalpha_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        qout_write = grp_updt_x_Pipeline_cc_fu_185_qout_write;
    end else begin
        qout_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        qp_s_read = grp_updt_x_Pipeline_cc_fu_185_qp_s_read;
    end else begin
        qp_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        qx_s_read = grp_updt_x_Pipeline_cc_fu_185_qx_s_read;
    end else begin
        qx_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'd1 == and_ln415_fu_226_p2) & (qalpha_s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (1'd0 == and_ln415_fu_226_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'd1 == and_ln415_fu_226_p2) & (qalpha_s_empty_n == 1'b0)) & (1'd1 == and_ln415_fu_226_p2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_updt_x_Pipeline_cc_fu_185_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((q_gbc_s_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln412_fu_197_p2 = (M + 32'd7);

assign alpha_fu_247_p1 = trunc_ln85_reg_281;

assign and_ln415_fu_226_p2 = (phi_ln415_reg_174 & icmp_ln415_fu_221_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state2 = ((1'd1 == and_ln415_fu_226_p2) & (qalpha_s_empty_n == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_updt_x_Pipeline_cc_fu_185_ap_start = grp_updt_x_Pipeline_cc_fu_185_ap_start_reg;

assign icmp_ln415_fu_221_p2 = (($signed(rp_fu_74) < $signed(rp_time)) ? 1'b1 : 1'b0);

assign q_gbc_peek_read = 1'b0;

assign qalpha_peek_read = 1'b0;

assign qout_din = grp_updt_x_Pipeline_cc_fu_185_qout_din;

assign qp_peek_read = 1'b0;

assign qx_peek_read = 1'b0;

assign rp_3_fu_236_p2 = (rp_fu_74 + 32'd1);

assign term_flag_fu_251_p1 = q_gbc_s_dout[0:0];

assign trunc_ln85_fu_232_p1 = qalpha_s_dout[63:0];

assign xor_ln415_fu_255_p2 = (term_flag_fu_251_p1 ^ 1'd1);

endmodule //updt_x
