// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="read_digA_read_digA,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.856000,HLS_SYN_LAT=2000049,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=198,HLS_SYN_LUT=364,HLS_VERSION=2022_2}" *)

module read_digA (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vec_mem_read_addr_din,
        vec_mem_read_addr_full_n,
        vec_mem_read_addr_write,
        vec_mem_read_data_s_dout,
        vec_mem_read_data_s_empty_n,
        vec_mem_read_data_s_read,
        vec_mem_read_data_peek_dout,
        vec_mem_read_data_peek_empty_n,
        vec_mem_read_data_peek_read,
        vec_mem_write_addr_din,
        vec_mem_write_addr_full_n,
        vec_mem_write_addr_write,
        vec_mem_write_data_din,
        vec_mem_write_data_full_n,
        vec_mem_write_data_write,
        vec_mem_write_resp_s_dout,
        vec_mem_write_resp_s_empty_n,
        vec_mem_write_resp_s_read,
        vec_mem_write_resp_peek_dout,
        vec_mem_write_resp_peek_empty_n,
        vec_mem_write_resp_peek_read,
        rp_time,
        M,
        q_dout_din,
        q_dout_full_n,
        q_dout_write,
        q_gbc_s_dout,
        q_gbc_s_empty_n,
        q_gbc_s_read,
        q_gbc_peek_dout,
        q_gbc_peek_empty_n,
        q_gbc_peek_read,
        q_gbc_out_din,
        q_gbc_out_full_n,
        q_gbc_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [64:0] vec_mem_read_addr_din;
input   vec_mem_read_addr_full_n;
output   vec_mem_read_addr_write;
input  [512:0] vec_mem_read_data_s_dout;
input   vec_mem_read_data_s_empty_n;
output   vec_mem_read_data_s_read;
input  [512:0] vec_mem_read_data_peek_dout;
input   vec_mem_read_data_peek_empty_n;
output   vec_mem_read_data_peek_read;
output  [64:0] vec_mem_write_addr_din;
input   vec_mem_write_addr_full_n;
output   vec_mem_write_addr_write;
output  [512:0] vec_mem_write_data_din;
input   vec_mem_write_data_full_n;
output   vec_mem_write_data_write;
input  [8:0] vec_mem_write_resp_s_dout;
input   vec_mem_write_resp_s_empty_n;
output   vec_mem_write_resp_s_read;
input  [8:0] vec_mem_write_resp_peek_dout;
input   vec_mem_write_resp_peek_empty_n;
output   vec_mem_write_resp_peek_read;
input  [31:0] rp_time;
input  [31:0] M;
output  [512:0] q_dout_din;
input   q_dout_full_n;
output   q_dout_write;
input  [1:0] q_gbc_s_dout;
input   q_gbc_s_empty_n;
output   q_gbc_s_read;
input  [1:0] q_gbc_peek_dout;
input   q_gbc_peek_empty_n;
output   q_gbc_peek_read;
output  [1:0] q_gbc_out_din;
input   q_gbc_out_full_n;
output   q_gbc_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg vec_mem_read_addr_write;
reg vec_mem_read_data_s_read;
reg q_dout_write;
reg q_gbc_s_read;
reg q_gbc_out_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    q_gbc_s_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] trunc_ln379_fu_283_p1;
reg    q_gbc_out_blk_n;
reg   [28:0] num_ite_M_reg_328;
wire   [31:0] empty_25_fu_244_p2;
reg   [31:0] empty_25_reg_333;
wire    grp_read_digA_Pipeline_rd_fu_217_ap_start;
wire    grp_read_digA_Pipeline_rd_fu_217_ap_done;
wire    grp_read_digA_Pipeline_rd_fu_217_ap_idle;
wire    grp_read_digA_Pipeline_rd_fu_217_ap_ready;
wire   [512:0] grp_read_digA_Pipeline_rd_fu_217_q_dout_din;
wire    grp_read_digA_Pipeline_rd_fu_217_q_dout_write;
wire    grp_read_digA_Pipeline_rd_fu_217_vec_mem_read_data_s_read;
wire   [64:0] grp_read_digA_Pipeline_rd_fu_217_vec_mem_read_addr_din;
wire    grp_read_digA_Pipeline_rd_fu_217_vec_mem_read_addr_write;
reg    grp_read_digA_Pipeline_rd_fu_217_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln381_fu_277_p2;
wire    ap_CS_fsm_state3;
reg   [31:0] rp_fu_96;
wire   [31:0] rp_3_fu_304_p2;
reg    ap_block_state5;
reg   [0:0] term_flag_fu_100;
wire   [0:0] term_flag_2_fu_286_p1;
wire   [31:0] add_ln378_fu_228_p2;
wire   [0:0] icmp_ln381_fu_272_p2;
wire   [0:0] xor_ln381_fu_266_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_read_digA_Pipeline_rd_fu_217_ap_start_reg = 1'b0;
end

read_digA_read_digA_Pipeline_rd grp_read_digA_Pipeline_rd_fu_217(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_read_digA_Pipeline_rd_fu_217_ap_start),
    .ap_done(grp_read_digA_Pipeline_rd_fu_217_ap_done),
    .ap_idle(grp_read_digA_Pipeline_rd_fu_217_ap_idle),
    .ap_ready(grp_read_digA_Pipeline_rd_fu_217_ap_ready),
    .sext_ln378(num_ite_M_reg_328),
    .q_dout_din(grp_read_digA_Pipeline_rd_fu_217_q_dout_din),
    .q_dout_full_n(q_dout_full_n),
    .q_dout_write(grp_read_digA_Pipeline_rd_fu_217_q_dout_write),
    .vec_mem_read_data_s_dout(vec_mem_read_data_s_dout),
    .vec_mem_read_data_s_empty_n(vec_mem_read_data_s_empty_n),
    .vec_mem_read_data_s_read(grp_read_digA_Pipeline_rd_fu_217_vec_mem_read_data_s_read),
    .vec_mem_read_addr_din(grp_read_digA_Pipeline_rd_fu_217_vec_mem_read_addr_din),
    .vec_mem_read_addr_full_n(vec_mem_read_addr_full_n),
    .vec_mem_read_addr_write(grp_read_digA_Pipeline_rd_fu_217_vec_mem_read_addr_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_read_digA_Pipeline_rd_fu_217_ap_start_reg <= 1'b0;
    end else begin
        if (((1'd1 == and_ln381_fu_277_p2) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_read_digA_Pipeline_rd_fu_217_ap_start_reg <= 1'b1;
        end else if ((grp_read_digA_Pipeline_rd_fu_217_ap_ready == 1'b1)) begin
            grp_read_digA_Pipeline_rd_fu_217_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rp_fu_96 <= 32'd4294967294;
    end else if ((~(((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_out_full_n == 1'b0)) | ((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_s_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        rp_fu_96 <= rp_3_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        term_flag_fu_100 <= 1'd0;
    end else if ((~(((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_out_full_n == 1'b0)) | ((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_s_empty_n == 1'b0))) & (trunc_ln379_fu_283_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        term_flag_fu_100 <= term_flag_2_fu_286_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_25_reg_333[31 : 1] <= empty_25_fu_244_p2[31 : 1];
        num_ite_M_reg_328 <= {{add_ln378_fu_228_p2[31:3]}};
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_read_digA_Pipeline_rd_fu_217_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_out_full_n == 1'b0)) | ((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_s_empty_n == 1'b0)))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == and_ln381_fu_277_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == and_ln381_fu_277_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        q_dout_write = grp_read_digA_Pipeline_rd_fu_217_q_dout_write;
    end else begin
        q_dout_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln379_fu_283_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        q_gbc_out_blk_n = q_gbc_out_full_n;
    end else begin
        q_gbc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_out_full_n == 1'b0)) | ((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_s_empty_n == 1'b0))) & (trunc_ln379_fu_283_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        q_gbc_out_write = 1'b1;
    end else begin
        q_gbc_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln379_fu_283_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        q_gbc_s_blk_n = q_gbc_s_empty_n;
    end else begin
        q_gbc_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_out_full_n == 1'b0)) | ((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_s_empty_n == 1'b0))) & (trunc_ln379_fu_283_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        q_gbc_s_read = 1'b1;
    end else begin
        q_gbc_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_mem_read_addr_write = grp_read_digA_Pipeline_rd_fu_217_vec_mem_read_addr_write;
    end else begin
        vec_mem_read_addr_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        vec_mem_read_data_s_read = grp_read_digA_Pipeline_rd_fu_217_vec_mem_read_data_s_read;
    end else begin
        vec_mem_read_data_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == and_ln381_fu_277_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_read_digA_Pipeline_rd_fu_217_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if ((~(((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_out_full_n == 1'b0)) | ((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_s_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln378_fu_228_p2 = (M + 32'd7);

assign and_ln381_fu_277_p2 = (xor_ln381_fu_266_p2 & icmp_ln381_fu_272_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state5 = (((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_out_full_n == 1'b0)) | ((trunc_ln379_fu_283_p1 == 1'd1) & (q_gbc_s_empty_n == 1'b0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_25_fu_244_p2 = rp_time << 32'd1;

assign grp_read_digA_Pipeline_rd_fu_217_ap_start = grp_read_digA_Pipeline_rd_fu_217_ap_start_reg;

assign icmp_ln381_fu_272_p2 = (($signed(rp_fu_96) < $signed(empty_25_reg_333)) ? 1'b1 : 1'b0);

assign q_dout_din = grp_read_digA_Pipeline_rd_fu_217_q_dout_din;

assign q_gbc_out_din = {{1'd0}, {term_flag_2_fu_286_p1}};

assign q_gbc_peek_read = 1'b0;

assign rp_3_fu_304_p2 = (rp_fu_96 + 32'd1);

assign term_flag_2_fu_286_p1 = q_gbc_s_dout[0:0];

assign trunc_ln379_fu_283_p1 = rp_fu_96[0:0];

assign vec_mem_read_addr_din = grp_read_digA_Pipeline_rd_fu_217_vec_mem_read_addr_din;

assign vec_mem_read_data_peek_read = 1'b0;

assign vec_mem_write_addr_din = 65'd0;

assign vec_mem_write_addr_write = 1'b0;

assign vec_mem_write_data_din = 513'd0;

assign vec_mem_write_data_write = 1'b0;

assign vec_mem_write_resp_peek_read = 1'b0;

assign vec_mem_write_resp_s_read = 1'b0;

assign xor_ln381_fu_266_p2 = (term_flag_fu_100 ^ 1'd1);

always @ (posedge ap_clk) begin
    empty_25_reg_333[0] <= 1'b0;
end

endmodule //read_digA
