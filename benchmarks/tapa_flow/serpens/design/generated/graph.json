{
    "cflags": [
        "-std=c++17",
        "-I",
        "/home/ylxiao/.local/lib/python3.10/site-packages/tapa/../../../src",
        "-isystem",
        "/tools/Xilinx/Vitis_HLS/2022.2/include"
    ],
    "tasks": {
        "Arbiter_Y": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) {\n\n\n#pragma HLS disaggregate variable = fifo_in\n#pragma HLS array_partition variable = fifo_in complete\n#pragma HLS interface ap_fifo port = fifo_in[0]._\n#pragma HLS aggregate variable = fifo_in[0]._ bit\n#pragma HLS interface ap_fifo port = fifo_in[0]._peek\n#pragma HLS aggregate variable = fifo_in[0]._peek bit\nvoid(fifo_in[0]._.empty());\nvoid(fifo_in[0]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_in[1]._\n#pragma HLS aggregate variable = fifo_in[1]._ bit\n#pragma HLS interface ap_fifo port = fifo_in[1]._peek\n#pragma HLS aggregate variable = fifo_in[1]._peek bit\nvoid(fifo_in[1]._.empty());\nvoid(fifo_in[1]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_in[2]._\n#pragma HLS aggregate variable = fifo_in[2]._ bit\n#pragma HLS interface ap_fifo port = fifo_in[2]._peek\n#pragma HLS aggregate variable = fifo_in[2]._peek bit\nvoid(fifo_in[2]._.empty());\nvoid(fifo_in[2]._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_out\n#pragma HLS interface ap_fifo port = fifo_out._\n#pragma HLS aggregate variable = fifo_out._ bit\nvoid(fifo_out._.full());\n\n    const int rp_time = (P_N == 0)? 1 : P_N;\n    const int num_pe_output = ((M + NUM_CH_SPARSE_mult_2 - 1) / NUM_CH_SPARSE_mult_2) * NUM_CH_SPARSE_div_8;\n    const int num_out = (M + 15) >> 4;\n    const int num_ite_Y = num_pe_output * rp_time;\naby:\n    for (int i = 0, c_idx = 0, o_idx = 0; i < num_ite_Y;) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline II=1\n        if (!fifo_in[c_idx].empty() & !fifo_out.full()) {\n            float_v2 tmp; fifo_in[c_idx].try_read(tmp);\n            if (o_idx < num_out) {\n                fifo_out.try_write(tmp);\n            }\n            ++i;\n            c_idx++;\n            o_idx++;\n            if (c_idx == NUM_CH_SPARSE_div_8) {c_idx = 0;}\n            if (o_idx == num_pe_output) {o_idx = 0;}\n        }\n    }\n}\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "FloatvAddFloatv": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) {\n#pragma HLS disaggregate variable = fifo_in0\n#pragma HLS interface ap_fifo port = fifo_in0._\n#pragma HLS aggregate variable = fifo_in0._ bit\n#pragma HLS interface ap_fifo port = fifo_in0._peek\n#pragma HLS aggregate variable = fifo_in0._peek bit\nvoid(fifo_in0._.empty());\nvoid(fifo_in0._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_in1\n#pragma HLS interface ap_fifo port = fifo_in1._\n#pragma HLS aggregate variable = fifo_in1._ bit\n#pragma HLS interface ap_fifo port = fifo_in1._peek\n#pragma HLS aggregate variable = fifo_in1._peek bit\nvoid(fifo_in1._.empty());\nvoid(fifo_in1._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_out\n#pragma HLS interface ap_fifo port = fifo_out._\n#pragma HLS aggregate variable = fifo_out._ bit\nvoid(fifo_out._.full());\n\ncc:\n    for (;;) {\n#pragma HLS pipeline II=1\n        bool flag_nop = fifo_in0.empty() | fifo_in1.empty();\n        if (!flag_nop) {\n            float_v16 tmp0; fifo_in0.try_read(tmp0);\n            float_v16 tmp1; fifo_in1.try_read(tmp1);\n            float_v16 c_out = tmp0 + tmp1;\n            fifo_out.write(c_out);\n        }\n    }\n}\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "FloatvMultConst": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) {\n\n\n\n#pragma HLS disaggregate variable = fifo_in\n#pragma HLS interface ap_fifo port = fifo_in._\n#pragma HLS aggregate variable = fifo_in._ bit\n#pragma HLS interface ap_fifo port = fifo_in._peek\n#pragma HLS aggregate variable = fifo_in._peek bit\nvoid(fifo_in._.empty());\nvoid(fifo_in._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_out\n#pragma HLS interface ap_fifo port = fifo_out._\n#pragma HLS aggregate variable = fifo_out._ bit\nvoid(fifo_out._.full());\n\n    const float alpha_f = tapa::bit_cast<float>(alpha_u);\n    const int rp_time = (P_N == 0)? 1 : P_N;\n    const int num_ite_Y = ((M + 15) >> 4) * rp_time;\ncc:\n    for (int i = 0; i < num_ite_Y;) {\n#pragma HLS pipeline II=1\n        float_v16 tmp;\n        bool read_ready = fifo_in.try_read(tmp);\n        if (read_ready) {\n            float_v16 c_out = tmp * alpha_f;\n            fifo_out.write(c_out);\n            ++i;\n        }\n    }\n}\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "Merger_Y": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) {\n#pragma HLS disaggregate variable = fifo_in\n#pragma HLS array_partition variable = fifo_in complete\n#pragma HLS interface ap_fifo port = fifo_in[0]._\n#pragma HLS aggregate variable = fifo_in[0]._ bit\n#pragma HLS interface ap_fifo port = fifo_in[0]._peek\n#pragma HLS aggregate variable = fifo_in[0]._peek bit\nvoid(fifo_in[0]._.empty());\nvoid(fifo_in[0]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_in[1]._\n#pragma HLS aggregate variable = fifo_in[1]._ bit\n#pragma HLS interface ap_fifo port = fifo_in[1]._peek\n#pragma HLS aggregate variable = fifo_in[1]._peek bit\nvoid(fifo_in[1]._.empty());\nvoid(fifo_in[1]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_in[2]._\n#pragma HLS aggregate variable = fifo_in[2]._ bit\n#pragma HLS interface ap_fifo port = fifo_in[2]._peek\n#pragma HLS aggregate variable = fifo_in[2]._peek bit\nvoid(fifo_in[2]._.empty());\nvoid(fifo_in[2]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_in[3]._\n#pragma HLS aggregate variable = fifo_in[3]._ bit\n#pragma HLS interface ap_fifo port = fifo_in[3]._peek\n#pragma HLS aggregate variable = fifo_in[3]._peek bit\nvoid(fifo_in[3]._.empty());\nvoid(fifo_in[3]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_in[4]._\n#pragma HLS aggregate variable = fifo_in[4]._ bit\n#pragma HLS interface ap_fifo port = fifo_in[4]._peek\n#pragma HLS aggregate variable = fifo_in[4]._peek bit\nvoid(fifo_in[4]._.empty());\nvoid(fifo_in[4]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_in[5]._\n#pragma HLS aggregate variable = fifo_in[5]._ bit\n#pragma HLS interface ap_fifo port = fifo_in[5]._peek\n#pragma HLS aggregate variable = fifo_in[5]._peek bit\nvoid(fifo_in[5]._.empty());\nvoid(fifo_in[5]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_in[6]._\n#pragma HLS aggregate variable = fifo_in[6]._ bit\n#pragma HLS interface ap_fifo port = fifo_in[6]._peek\n#pragma HLS aggregate variable = fifo_in[6]._peek bit\nvoid(fifo_in[6]._.empty());\nvoid(fifo_in[6]._peek.empty());\n#pragma HLS interface ap_fifo port = fifo_in[7]._\n#pragma HLS aggregate variable = fifo_in[7]._ bit\n#pragma HLS interface ap_fifo port = fifo_in[7]._peek\n#pragma HLS aggregate variable = fifo_in[7]._peek bit\nvoid(fifo_in[7]._.empty());\nvoid(fifo_in[7]._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_out\n#pragma HLS interface ap_fifo port = fifo_out._\n#pragma HLS aggregate variable = fifo_out._ bit\nvoid(fifo_out._.full());\n\n    for (;;) {\n#pragma HLS pipeline II=1\n        bool flag_nop = fifo_out.full();\n        for (int i = 0; i < 8; ++i) {\n            flag_nop |= fifo_in[i].empty();\n        }\n        if (!flag_nop) {\n            float_v16 tmpv16;\n#pragma HLS aggregate variable=tmpv16\n            for (int i = 0; i < 8; ++i) {\n                float_v2 tmp; fifo_in[i].try_read(tmp);\n                for (int d = 0; d < 2; ++d) {\n                    tmpv16[i * 2 + d] = tmp[d];\n                }\n            }\n            fifo_out.try_write(tmpv16);\n        }\n    }\n}\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "PEG_Xvec": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) {\n#pragma HLS disaggregate variable = fifo_inst_in\n#pragma HLS interface ap_fifo port = fifo_inst_in._\n#pragma HLS aggregate variable = fifo_inst_in._ bit\n#pragma HLS interface ap_fifo port = fifo_inst_in._peek\n#pragma HLS aggregate variable = fifo_inst_in._peek bit\nvoid(fifo_inst_in._.empty());\nvoid(fifo_inst_in._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_A\n#pragma HLS interface ap_fifo port = fifo_A._\n#pragma HLS aggregate variable = fifo_A._ bit\n#pragma HLS interface ap_fifo port = fifo_A._peek\n#pragma HLS aggregate variable = fifo_A._peek bit\nvoid(fifo_A._.empty());\nvoid(fifo_A._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_X_in\n#pragma HLS interface ap_fifo port = fifo_X_in._\n#pragma HLS aggregate variable = fifo_X_in._ bit\n#pragma HLS interface ap_fifo port = fifo_X_in._peek\n#pragma HLS aggregate variable = fifo_X_in._peek bit\nvoid(fifo_X_in._.empty());\nvoid(fifo_X_in._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_inst_out\n#pragma HLS interface ap_fifo port = fifo_inst_out._\n#pragma HLS aggregate variable = fifo_inst_out._ bit\nvoid(fifo_inst_out._.full());\n\n#pragma HLS disaggregate variable = fifo_X_out\n#pragma HLS interface ap_fifo port = fifo_X_out._\n#pragma HLS aggregate variable = fifo_X_out._ bit\nvoid(fifo_X_out._.full());\n\n#pragma HLS disaggregate variable = fifo_inst_out_to_Yvec\n#pragma HLS interface ap_fifo port = fifo_inst_out_to_Yvec._\n#pragma HLS aggregate variable = fifo_inst_out_to_Yvec._ bit\nvoid(fifo_inst_out_to_Yvec._.full());\n\n#pragma HLS disaggregate variable = fifo_aXvec\n#pragma HLS interface ap_fifo port = fifo_aXvec._\n#pragma HLS aggregate variable = fifo_aXvec._ bit\nvoid(fifo_aXvec._.full());\n\n    const int NUM_ITE = fifo_inst_in.read();\n    const int M = fifo_inst_in.read();\n    const int rp_time = fifo_inst_in.read();\n    const int K = fifo_inst_in.read();\n    fifo_inst_out.write(NUM_ITE);\n    fifo_inst_out.write(M);\n    fifo_inst_out.write(rp_time);\n    fifo_inst_out.write(K);\n    fifo_inst_out_to_Yvec.write(NUM_ITE);\n    fifo_inst_out_to_Yvec.write(M);\n    fifo_inst_out_to_Yvec.write(rp_time);\nl_rp:\n    for(int rp = 0; rp < rp_time; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n        float local_X[4][WINDOW_SIZE];\n#pragma HLS bind_storage variable=local_X latency=2\n#pragma HLS array_partition variable=local_X complete dim=1\n#pragma HLS array_partition variable=local_X cyclic factor=X_PARTITION_FACTOR dim=2\n        auto start_32 = fifo_inst_in.read();\n        fifo_inst_out.write(start_32);\n        fifo_inst_out_to_Yvec.write(start_32);\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n            // fill onchip X\n        read_X:\n            for (int j = 0; (j < WINDOW_SIZE_div_16) & (j < ((K + 15) >> 4) - i * WINDOW_SIZE_div_16); ) {\n#pragma HLS loop_tripcount min=1 max=512\n#pragma HLS pipeline II = 1\n                if (!fifo_X_in.empty() & !fifo_X_out.full()) {\n                    float_v16 x; fifo_X_in.try_read(x);\n                    fifo_X_out.try_write(x);\n                    for (int kk = 0; kk < 16; ++kk) {\n                        for (int l = 0; l < 4; ++l) {\n                            local_X[l][(j << 4) + kk] = x[kk];\n                        }\n                    }\n                    ++j;\n                }\n            }\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n            fifo_inst_out.write(end_32);\n            fifo_inst_out_to_Yvec.write(end_32);\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline II=1\n                if (!fifo_A.empty()) {\n                    ap_uint<512> a_pes; fifo_A.try_read(a_pes);\n                    MultXVec raxv;\n                    for (int p = 0; p < 8; ++p) {\n                        ap_uint<64> a = a_pes(63 + p * 64, p * 64);\n                        ap_uint<14> a_col = a(63, 50);\n                        ap_uint<18> a_row = a(49, 32);\n                        ap_uint<32> a_val = a(31, 0);\n                        raxv.row[p] = a_row;\n                        if (a_row[17] == 0) {\n                            float a_val_f = tapa::bit_cast<float>(a_val);\n                            raxv.axv[p] = a_val_f * local_X[p/2][a_col];\n                        }\n                    }\n                    fifo_aXvec.write(raxv);\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n    }\n}\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "PEG_Yvec": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) {\n#pragma HLS disaggregate variable = fifo_inst_in\n#pragma HLS interface ap_fifo port = fifo_inst_in._\n#pragma HLS aggregate variable = fifo_inst_in._ bit\n#pragma HLS interface ap_fifo port = fifo_inst_in._peek\n#pragma HLS aggregate variable = fifo_inst_in._peek bit\nvoid(fifo_inst_in._.empty());\nvoid(fifo_inst_in._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_aXvec\n#pragma HLS interface ap_fifo port = fifo_aXvec._\n#pragma HLS aggregate variable = fifo_aXvec._ bit\n#pragma HLS interface ap_fifo port = fifo_aXvec._peek\n#pragma HLS aggregate variable = fifo_aXvec._peek bit\nvoid(fifo_aXvec._.empty());\nvoid(fifo_aXvec._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_Y_out\n#pragma HLS interface ap_fifo port = fifo_Y_out._\n#pragma HLS aggregate variable = fifo_Y_out._ bit\nvoid(fifo_Y_out._.full());\n\n    const int NUM_ITE = fifo_inst_in.read();\n    const int M = fifo_inst_in.read();\n    const int rp_time = fifo_inst_in.read();\n    const int num_v_init = (M + NUM_CH_SPARSE_mult_16 - 1) / NUM_CH_SPARSE_mult_16;\n    const int num_v_out = (M + NUM_CH_SPARSE_mult_2 - 1) / NUM_CH_SPARSE_mult_2;\n    ap_uint<64> local_C[8][URAM_DEPTH];\n#pragma HLS bind_storage variable=local_C type=RAM_2P impl=URAM latency=1\n#pragma HLS array_partition complete variable=local_C dim=1\nl_rp:\n    for(int rp = 0; rp < rp_time; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n        //init local C\n    init_C:\n        for (int i = 0; i < num_v_init; ++i) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline II=1\n            for (int p = 0; p < 8; ++p) {\n                local_C[p][i] = 0;\n            }\n        }\n        auto start_32 = fifo_inst_in.read();\n    main:\n        for (int i = 0; i < NUM_ITE; ++i) {\n#pragma HLS loop_tripcount min=1 max=49\n            // computation\n            const auto end_32 = fifo_inst_in.read();\n        computation:\n            for (int j = start_32; j < end_32; ) {\n#pragma HLS loop_tripcount min=1 max=200\n#pragma HLS pipeline II=1\n#pragma HLS dependence true variable=local_C distance=DEP_DIST_LOAD_STORE\n                if (!fifo_aXvec.empty()) {\n                    MultXVec raxv; fifo_aXvec.try_read(raxv);\n                    for (int p = 0; p < 8; ++p) {\n                        auto a_row = raxv.row[p];\n                        if (a_row[17] == 0) {\n                            PUcore_Ymtx(a_row,\n                                        raxv.axv[p],\n                                        local_C[p]);\n                        }\n                    }\n                    ++j;\n                }\n            }\n            start_32 = end_32;\n        }\n        //cout << \"PE = \" << pe_idx << endl;\n    write_C_outer:\n        for (int i = 0, c_idx = 0; i < num_v_out; ++i) {\n#pragma HLS loop_tripcount min=1 max=1800\n#pragma HLS pipeline II=1\n            float_v2 out_v;\n            ap_uint<64> u_64 = local_C[c_idx][i>>3];\n            for (int d = 0; d < 2; ++d) {\n                ap_uint<32> u_32_d = u_64(31 + 32 * d, 32 * d);\n                out_v[d] = tapa::bit_cast<float>(u_32_d);\n            }\n            fifo_Y_out.write(out_v);\n            ++c_idx;\n            if (c_idx == 8) {c_idx = 0;}\n        }\n    }\n}\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "Serpens": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nextern \"C\" {\n\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) {\n\n#pragma HLS interface s_axilite port = edge_list_ptr bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ptr); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ptr); }\n\n#pragma HLS interface s_axilite port = edge_list_ch_0 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_1 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_2 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_3 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_4 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_5 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_6 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_7 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_8 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_9 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_10 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_11 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_12 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_13 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_14 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_15 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_16 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_17 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_18 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_19 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_20 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_21 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_22 bundle = control\n#pragma HLS interface s_axilite port = edge_list_ch_23 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_0); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_1); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_2); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_3); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_4); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_5); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_6); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_7); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_8); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_9); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_10); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_11); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_12); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_13); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_14); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_15); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_16); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_17); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_18); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_19); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_20); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_21); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_22); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(edge_list_ch_23); }\n\n#pragma HLS interface s_axilite port = vec_X bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(vec_X); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(vec_X); }\n\n#pragma HLS interface s_axilite port = vec_Y bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(vec_Y); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(vec_Y); }\n\n#pragma HLS interface s_axilite port = vec_Y_out bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(vec_Y_out); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(vec_Y_out); }\n\n#pragma HLS interface s_axilite port = NUM_ITE bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(NUM_ITE); }\n\n#pragma HLS interface s_axilite port = NUM_A_LEN bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(NUM_A_LEN); }\n\n#pragma HLS interface s_axilite port = M bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(M); }\n\n#pragma HLS interface s_axilite port = K bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(K); }\n\n#pragma HLS interface s_axilite port = P_N bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(P_N); }\n\n#pragma HLS interface s_axilite port = alpha_u bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(alpha_u); }\n\n#pragma HLS interface s_axilite port = beta_u bundle = control\n{ auto val = reinterpret_cast<volatile const uint8_t&>(beta_u); }\n\n\n#pragma HLS interface s_axilite port = return bundle = control\n}\n\n\n}  // extern \"C\"\n\n",
            "fifos": {
                "PE_inst_Serpens[0]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_edge_list_ptr",
                        0
                    ]
                },
                "PE_inst_Serpens[10]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        9
                    ]
                },
                "PE_inst_Serpens[11]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        10
                    ]
                },
                "PE_inst_Serpens[12]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        11
                    ]
                },
                "PE_inst_Serpens[13]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        12
                    ]
                },
                "PE_inst_Serpens[14]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        13
                    ]
                },
                "PE_inst_Serpens[15]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        14
                    ]
                },
                "PE_inst_Serpens[16]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        16
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        15
                    ]
                },
                "PE_inst_Serpens[17]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        17
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        16
                    ]
                },
                "PE_inst_Serpens[18]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        18
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        17
                    ]
                },
                "PE_inst_Serpens[19]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        19
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        18
                    ]
                },
                "PE_inst_Serpens[1]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        0
                    ]
                },
                "PE_inst_Serpens[20]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        20
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        19
                    ]
                },
                "PE_inst_Serpens[21]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        21
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        20
                    ]
                },
                "PE_inst_Serpens[22]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        22
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        21
                    ]
                },
                "PE_inst_Serpens[23]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        23
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        22
                    ]
                },
                "PE_inst_Serpens[24]": {
                    "consumed_by": [
                        "black_hole_int",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        23
                    ]
                },
                "PE_inst_Serpens[2]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        1
                    ]
                },
                "PE_inst_Serpens[3]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        2
                    ]
                },
                "PE_inst_Serpens[4]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        3
                    ]
                },
                "PE_inst_Serpens[5]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        4
                    ]
                },
                "PE_inst_Serpens[6]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        5
                    ]
                },
                "PE_inst_Serpens[7]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        6
                    ]
                },
                "PE_inst_Serpens[8]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        7
                    ]
                },
                "PE_inst_Serpens[9]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        8
                    ]
                },
                "Yvec_inst_Serpens[0]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        0
                    ]
                },
                "Yvec_inst_Serpens[10]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        10
                    ]
                },
                "Yvec_inst_Serpens[11]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        11
                    ]
                },
                "Yvec_inst_Serpens[12]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        12
                    ]
                },
                "Yvec_inst_Serpens[13]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        13
                    ]
                },
                "Yvec_inst_Serpens[14]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        14
                    ]
                },
                "Yvec_inst_Serpens[15]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        15
                    ]
                },
                "Yvec_inst_Serpens[16]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        16
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        16
                    ]
                },
                "Yvec_inst_Serpens[17]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        17
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        17
                    ]
                },
                "Yvec_inst_Serpens[18]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        18
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        18
                    ]
                },
                "Yvec_inst_Serpens[19]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        19
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        19
                    ]
                },
                "Yvec_inst_Serpens[1]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        1
                    ]
                },
                "Yvec_inst_Serpens[20]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        20
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        20
                    ]
                },
                "Yvec_inst_Serpens[21]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        21
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        21
                    ]
                },
                "Yvec_inst_Serpens[22]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        22
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        22
                    ]
                },
                "Yvec_inst_Serpens[23]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        23
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        23
                    ]
                },
                "Yvec_inst_Serpens[2]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        2
                    ]
                },
                "Yvec_inst_Serpens[3]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        3
                    ]
                },
                "Yvec_inst_Serpens[4]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        4
                    ]
                },
                "Yvec_inst_Serpens[5]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        5
                    ]
                },
                "Yvec_inst_Serpens[6]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        6
                    ]
                },
                "Yvec_inst_Serpens[7]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        7
                    ]
                },
                "Yvec_inst_Serpens[8]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        8
                    ]
                },
                "Yvec_inst_Serpens[9]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        9
                    ]
                },
                "fifo_A_Serpens[0]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        0
                    ]
                },
                "fifo_A_Serpens[10]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        10
                    ]
                },
                "fifo_A_Serpens[11]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        11
                    ]
                },
                "fifo_A_Serpens[12]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        12
                    ]
                },
                "fifo_A_Serpens[13]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        13
                    ]
                },
                "fifo_A_Serpens[14]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        14
                    ]
                },
                "fifo_A_Serpens[15]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        15
                    ]
                },
                "fifo_A_Serpens[16]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        16
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        16
                    ]
                },
                "fifo_A_Serpens[17]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        17
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        17
                    ]
                },
                "fifo_A_Serpens[18]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        18
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        18
                    ]
                },
                "fifo_A_Serpens[19]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        19
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        19
                    ]
                },
                "fifo_A_Serpens[1]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        1
                    ]
                },
                "fifo_A_Serpens[20]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        20
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        20
                    ]
                },
                "fifo_A_Serpens[21]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        21
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        21
                    ]
                },
                "fifo_A_Serpens[22]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        22
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        22
                    ]
                },
                "fifo_A_Serpens[23]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        23
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        23
                    ]
                },
                "fifo_A_Serpens[2]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        2
                    ]
                },
                "fifo_A_Serpens[3]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        3
                    ]
                },
                "fifo_A_Serpens[4]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        4
                    ]
                },
                "fifo_A_Serpens[5]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        5
                    ]
                },
                "fifo_A_Serpens[6]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        6
                    ]
                },
                "fifo_A_Serpens[7]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        7
                    ]
                },
                "fifo_A_Serpens[8]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        8
                    ]
                },
                "fifo_A_Serpens[9]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_A",
                        9
                    ]
                },
                "fifo_X_pe_Serpens[0]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_X",
                        0
                    ]
                },
                "fifo_X_pe_Serpens[10]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        9
                    ]
                },
                "fifo_X_pe_Serpens[11]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        10
                    ]
                },
                "fifo_X_pe_Serpens[12]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        11
                    ]
                },
                "fifo_X_pe_Serpens[13]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        12
                    ]
                },
                "fifo_X_pe_Serpens[14]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        13
                    ]
                },
                "fifo_X_pe_Serpens[15]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        14
                    ]
                },
                "fifo_X_pe_Serpens[16]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        16
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        15
                    ]
                },
                "fifo_X_pe_Serpens[17]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        17
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        16
                    ]
                },
                "fifo_X_pe_Serpens[18]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        18
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        17
                    ]
                },
                "fifo_X_pe_Serpens[19]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        19
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        18
                    ]
                },
                "fifo_X_pe_Serpens[1]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        0
                    ]
                },
                "fifo_X_pe_Serpens[20]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        20
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        19
                    ]
                },
                "fifo_X_pe_Serpens[21]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        21
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        20
                    ]
                },
                "fifo_X_pe_Serpens[22]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        22
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        21
                    ]
                },
                "fifo_X_pe_Serpens[23]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        23
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        22
                    ]
                },
                "fifo_X_pe_Serpens[24]": {
                    "consumed_by": [
                        "black_hole_float_v16",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        23
                    ]
                },
                "fifo_X_pe_Serpens[2]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        1
                    ]
                },
                "fifo_X_pe_Serpens[3]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        2
                    ]
                },
                "fifo_X_pe_Serpens[4]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        3
                    ]
                },
                "fifo_X_pe_Serpens[5]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        4
                    ]
                },
                "fifo_X_pe_Serpens[6]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        5
                    ]
                },
                "fifo_X_pe_Serpens[7]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        6
                    ]
                },
                "fifo_X_pe_Serpens[8]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        7
                    ]
                },
                "fifo_X_pe_Serpens[9]": {
                    "consumed_by": [
                        "PEG_Xvec",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        8
                    ]
                },
                "fifo_Y_AX_Serpens": {
                    "consumed_by": [
                        "FloatvMultConst",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Merger_Y",
                        0
                    ]
                },
                "fifo_Y_alpha_AX_Serpens": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        0
                    ]
                },
                "fifo_Y_in_Serpens": {
                    "consumed_by": [
                        "FloatvMultConst",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "read_Y",
                        0
                    ]
                },
                "fifo_Y_in_beta_Serpens": {
                    "consumed_by": [
                        "FloatvAddFloatv",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvMultConst",
                        1
                    ]
                },
                "fifo_Y_out_Serpens": {
                    "consumed_by": [
                        "write_Y",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "FloatvAddFloatv",
                        0
                    ]
                },
                "fifo_Y_pe_Serpens[0]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        0
                    ]
                },
                "fifo_Y_pe_Serpens[10]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        10
                    ]
                },
                "fifo_Y_pe_Serpens[11]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        11
                    ]
                },
                "fifo_Y_pe_Serpens[12]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        12
                    ]
                },
                "fifo_Y_pe_Serpens[13]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        13
                    ]
                },
                "fifo_Y_pe_Serpens[14]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        14
                    ]
                },
                "fifo_Y_pe_Serpens[15]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        15
                    ]
                },
                "fifo_Y_pe_Serpens[16]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        16
                    ]
                },
                "fifo_Y_pe_Serpens[17]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        17
                    ]
                },
                "fifo_Y_pe_Serpens[18]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        18
                    ]
                },
                "fifo_Y_pe_Serpens[19]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        19
                    ]
                },
                "fifo_Y_pe_Serpens[1]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        1
                    ]
                },
                "fifo_Y_pe_Serpens[20]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        20
                    ]
                },
                "fifo_Y_pe_Serpens[21]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        21
                    ]
                },
                "fifo_Y_pe_Serpens[22]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        22
                    ]
                },
                "fifo_Y_pe_Serpens[23]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        23
                    ]
                },
                "fifo_Y_pe_Serpens[2]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        2
                    ]
                },
                "fifo_Y_pe_Serpens[3]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        3
                    ]
                },
                "fifo_Y_pe_Serpens[4]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        4
                    ]
                },
                "fifo_Y_pe_Serpens[5]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        5
                    ]
                },
                "fifo_Y_pe_Serpens[6]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        6
                    ]
                },
                "fifo_Y_pe_Serpens[7]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        7
                    ]
                },
                "fifo_Y_pe_Serpens[8]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        8
                    ]
                },
                "fifo_Y_pe_Serpens[9]": {
                    "consumed_by": [
                        "Arbiter_Y",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Yvec",
                        9
                    ]
                },
                "fifo_Y_pe_abd_Serpens[0]": {
                    "consumed_by": [
                        "Merger_Y",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Arbiter_Y",
                        0
                    ]
                },
                "fifo_Y_pe_abd_Serpens[1]": {
                    "consumed_by": [
                        "Merger_Y",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Arbiter_Y",
                        1
                    ]
                },
                "fifo_Y_pe_abd_Serpens[2]": {
                    "consumed_by": [
                        "Merger_Y",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Arbiter_Y",
                        2
                    ]
                },
                "fifo_Y_pe_abd_Serpens[3]": {
                    "consumed_by": [
                        "Merger_Y",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Arbiter_Y",
                        3
                    ]
                },
                "fifo_Y_pe_abd_Serpens[4]": {
                    "consumed_by": [
                        "Merger_Y",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Arbiter_Y",
                        4
                    ]
                },
                "fifo_Y_pe_abd_Serpens[5]": {
                    "consumed_by": [
                        "Merger_Y",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Arbiter_Y",
                        5
                    ]
                },
                "fifo_Y_pe_abd_Serpens[6]": {
                    "consumed_by": [
                        "Merger_Y",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Arbiter_Y",
                        6
                    ]
                },
                "fifo_Y_pe_abd_Serpens[7]": {
                    "consumed_by": [
                        "Merger_Y",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "Arbiter_Y",
                        7
                    ]
                },
                "fifo_aXvec_Serpens[0]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        0
                    ]
                },
                "fifo_aXvec_Serpens[10]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        10
                    ]
                },
                "fifo_aXvec_Serpens[11]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        11
                    ]
                },
                "fifo_aXvec_Serpens[12]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        12
                    ]
                },
                "fifo_aXvec_Serpens[13]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        13
                    ]
                },
                "fifo_aXvec_Serpens[14]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        14
                    ]
                },
                "fifo_aXvec_Serpens[15]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        15
                    ]
                },
                "fifo_aXvec_Serpens[16]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        16
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        16
                    ]
                },
                "fifo_aXvec_Serpens[17]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        17
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        17
                    ]
                },
                "fifo_aXvec_Serpens[18]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        18
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        18
                    ]
                },
                "fifo_aXvec_Serpens[19]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        19
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        19
                    ]
                },
                "fifo_aXvec_Serpens[1]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        1
                    ]
                },
                "fifo_aXvec_Serpens[20]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        20
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        20
                    ]
                },
                "fifo_aXvec_Serpens[21]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        21
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        21
                    ]
                },
                "fifo_aXvec_Serpens[22]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        22
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        22
                    ]
                },
                "fifo_aXvec_Serpens[23]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        23
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        23
                    ]
                },
                "fifo_aXvec_Serpens[2]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        2
                    ]
                },
                "fifo_aXvec_Serpens[3]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        3
                    ]
                },
                "fifo_aXvec_Serpens[4]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        4
                    ]
                },
                "fifo_aXvec_Serpens[5]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        5
                    ]
                },
                "fifo_aXvec_Serpens[6]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        6
                    ]
                },
                "fifo_aXvec_Serpens[7]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        7
                    ]
                },
                "fifo_aXvec_Serpens[8]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        8
                    ]
                },
                "fifo_aXvec_Serpens[9]": {
                    "consumed_by": [
                        "PEG_Yvec",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "PEG_Xvec",
                        9
                    ]
                }
            },
            "frt_interface": "#include <sstream>\n#include <stdexcept>\n#include <frt.h>\n\n\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) {\n#define TAPAB_APP \"TAPAB_Serpens\"\n#define TAPAB \"TAPAB\"\n  const char* _tapa_bitstream = nullptr;\n  if ((_tapa_bitstream = getenv(TAPAB_APP)) ||\n      (_tapa_bitstream = getenv(TAPAB))) {\n    fpga::Instance _tapa_instance(_tapa_bitstream);\n    int _tapa_arg_index = 0;\n    for (const auto& _tapa_arg_info : _tapa_instance.GetArgsInfo()) {\n      if (false) {\n      } else if (_tapa_arg_info.name == \"edge_list_ptr\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ptr.get(), edge_list_ptr.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_0\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[0].get(), edge_list_ch[0].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_1\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[1].get(), edge_list_ch[1].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_2\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[2].get(), edge_list_ch[2].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_3\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[3].get(), edge_list_ch[3].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_4\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[4].get(), edge_list_ch[4].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_5\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[5].get(), edge_list_ch[5].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_6\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[6].get(), edge_list_ch[6].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_7\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[7].get(), edge_list_ch[7].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_8\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[8].get(), edge_list_ch[8].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_9\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[9].get(), edge_list_ch[9].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_10\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[10].get(), edge_list_ch[10].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_11\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[11].get(), edge_list_ch[11].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_12\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[12].get(), edge_list_ch[12].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_13\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[13].get(), edge_list_ch[13].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_14\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[14].get(), edge_list_ch[14].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_15\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[15].get(), edge_list_ch[15].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_16\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[16].get(), edge_list_ch[16].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_17\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[17].get(), edge_list_ch[17].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_18\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[18].get(), edge_list_ch[18].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_19\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[19].get(), edge_list_ch[19].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_20\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[20].get(), edge_list_ch[20].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_21\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[21].get(), edge_list_ch[21].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_22\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[22].get(), edge_list_ch[22].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"edge_list_ch_23\") {\n        auto _tapa_arg = fpga::ReadWrite(edge_list_ch[23].get(), edge_list_ch[23].size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"vec_X\") {\n        auto _tapa_arg = fpga::ReadWrite(vec_X.get(), vec_X.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"vec_Y\") {\n        auto _tapa_arg = fpga::ReadWrite(vec_Y.get(), vec_Y.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"vec_Y_out\") {\n        auto _tapa_arg = fpga::ReadWrite(vec_Y_out.get(), vec_Y_out.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"NUM_ITE\") {\n        _tapa_instance.SetArg(_tapa_arg_index, NUM_ITE);\n      } else if (_tapa_arg_info.name == \"NUM_A_LEN\") {\n        _tapa_instance.SetArg(_tapa_arg_index, NUM_A_LEN);\n      } else if (_tapa_arg_info.name == \"M\") {\n        _tapa_instance.SetArg(_tapa_arg_index, M);\n      } else if (_tapa_arg_info.name == \"K\") {\n        _tapa_instance.SetArg(_tapa_arg_index, K);\n      } else if (_tapa_arg_info.name == \"P_N\") {\n        _tapa_instance.SetArg(_tapa_arg_index, P_N);\n      } else if (_tapa_arg_info.name == \"alpha_u\") {\n        _tapa_instance.SetArg(_tapa_arg_index, alpha_u);\n      } else if (_tapa_arg_info.name == \"beta_u\") {\n        _tapa_instance.SetArg(_tapa_arg_index, beta_u);\n      } else {\n        std::stringstream ss;\n        ss << \"unknown argument: \" << _tapa_arg_info;\n        throw std::runtime_error(ss.str());\n      }\n      ++_tapa_arg_index;\n    }\n    _tapa_instance.WriteToDevice();\n    _tapa_instance.Exec();\n    _tapa_instance.ReadFromDevice();\n    _tapa_instance.Finish();\n  } else {\n    throw std::runtime_error(\"no bitstream found; please set `\" TAPAB_APP\n                             \"` or `\" TAPAB \"`\");\n  }\n}\n",
            "level": "upper",
            "ports": [
                {
                    "cat": "mmap",
                    "name": "edge_list_ptr",
                    "type": "int*",
                    "width": 32
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[0]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[1]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[2]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[3]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[4]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[5]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[6]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[7]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[8]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[9]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[10]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[11]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[12]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[13]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[14]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[15]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[16]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[17]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[18]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[19]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[20]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[21]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[22]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "edge_list_ch[23]",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "vec_X",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "vec_Y",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "vec_Y_out",
                    "type": "float_v16*",
                    "width": 512
                },
                {
                    "cat": "scalar",
                    "name": "NUM_ITE",
                    "type": "const int",
                    "width": 32
                },
                {
                    "cat": "scalar",
                    "name": "NUM_A_LEN",
                    "type": "const int",
                    "width": 32
                },
                {
                    "cat": "scalar",
                    "name": "M",
                    "type": "const int",
                    "width": 32
                },
                {
                    "cat": "scalar",
                    "name": "K",
                    "type": "const int",
                    "width": 32
                },
                {
                    "cat": "scalar",
                    "name": "P_N",
                    "type": "const int",
                    "width": 32
                },
                {
                    "cat": "scalar",
                    "name": "alpha_u",
                    "type": "const int",
                    "width": 32
                },
                {
                    "cat": "scalar",
                    "name": "beta_u",
                    "type": "const int",
                    "width": 32
                }
            ],
            "target": "hls",
            "tasks": {
                "Arbiter_Y": [
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_in[0]": {
                                "arg": "fifo_Y_pe_Serpens[0]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_Y_pe_Serpens[1]",
                                "cat": "istream"
                            },
                            "fifo_in[2]": {
                                "arg": "fifo_Y_pe_Serpens[2]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_Y_pe_abd_Serpens[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_in[0]": {
                                "arg": "fifo_Y_pe_Serpens[3]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_Y_pe_Serpens[4]",
                                "cat": "istream"
                            },
                            "fifo_in[2]": {
                                "arg": "fifo_Y_pe_Serpens[5]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_Y_pe_abd_Serpens[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_in[0]": {
                                "arg": "fifo_Y_pe_Serpens[6]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_Y_pe_Serpens[7]",
                                "cat": "istream"
                            },
                            "fifo_in[2]": {
                                "arg": "fifo_Y_pe_Serpens[8]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_Y_pe_abd_Serpens[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_in[0]": {
                                "arg": "fifo_Y_pe_Serpens[9]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_Y_pe_Serpens[10]",
                                "cat": "istream"
                            },
                            "fifo_in[2]": {
                                "arg": "fifo_Y_pe_Serpens[11]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_Y_pe_abd_Serpens[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_in[0]": {
                                "arg": "fifo_Y_pe_Serpens[12]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_Y_pe_Serpens[13]",
                                "cat": "istream"
                            },
                            "fifo_in[2]": {
                                "arg": "fifo_Y_pe_Serpens[14]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_Y_pe_abd_Serpens[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_in[0]": {
                                "arg": "fifo_Y_pe_Serpens[15]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_Y_pe_Serpens[16]",
                                "cat": "istream"
                            },
                            "fifo_in[2]": {
                                "arg": "fifo_Y_pe_Serpens[17]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_Y_pe_abd_Serpens[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_in[0]": {
                                "arg": "fifo_Y_pe_Serpens[18]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_Y_pe_Serpens[19]",
                                "cat": "istream"
                            },
                            "fifo_in[2]": {
                                "arg": "fifo_Y_pe_Serpens[20]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_Y_pe_abd_Serpens[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_in[0]": {
                                "arg": "fifo_Y_pe_Serpens[21]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_Y_pe_Serpens[22]",
                                "cat": "istream"
                            },
                            "fifo_in[2]": {
                                "arg": "fifo_Y_pe_Serpens[23]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_Y_pe_abd_Serpens[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ],
                "FloatvAddFloatv": [
                    {
                        "args": {
                            "fifo_in0": {
                                "arg": "fifo_Y_alpha_AX_Serpens",
                                "cat": "istream"
                            },
                            "fifo_in1": {
                                "arg": "fifo_Y_in_beta_Serpens",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_Y_out_Serpens",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    }
                ],
                "FloatvMultConst": [
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "alpha_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_Y_AX_Serpens",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_Y_alpha_AX_Serpens",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "alpha_u": {
                                "arg": "beta_u",
                                "cat": "scalar"
                            },
                            "fifo_in": {
                                "arg": "fifo_Y_in_Serpens",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_Y_in_beta_Serpens",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ],
                "Merger_Y": [
                    {
                        "args": {
                            "fifo_in[0]": {
                                "arg": "fifo_Y_pe_abd_Serpens[0]",
                                "cat": "istream"
                            },
                            "fifo_in[1]": {
                                "arg": "fifo_Y_pe_abd_Serpens[1]",
                                "cat": "istream"
                            },
                            "fifo_in[2]": {
                                "arg": "fifo_Y_pe_abd_Serpens[2]",
                                "cat": "istream"
                            },
                            "fifo_in[3]": {
                                "arg": "fifo_Y_pe_abd_Serpens[3]",
                                "cat": "istream"
                            },
                            "fifo_in[4]": {
                                "arg": "fifo_Y_pe_abd_Serpens[4]",
                                "cat": "istream"
                            },
                            "fifo_in[5]": {
                                "arg": "fifo_Y_pe_abd_Serpens[5]",
                                "cat": "istream"
                            },
                            "fifo_in[6]": {
                                "arg": "fifo_Y_pe_abd_Serpens[6]",
                                "cat": "istream"
                            },
                            "fifo_in[7]": {
                                "arg": "fifo_Y_pe_abd_Serpens[7]",
                                "cat": "istream"
                            },
                            "fifo_out": {
                                "arg": "fifo_Y_AX_Serpens",
                                "cat": "ostream"
                            }
                        },
                        "step": -1
                    }
                ],
                "PEG_Xvec": [
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[0]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[0]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[1]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[0]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[0]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[1]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[1]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[1]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[2]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[1]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[1]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[2]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[2]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[2]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[3]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[2]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[2]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[3]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[3]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[3]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[4]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[3]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[3]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[4]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[4]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[4]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[5]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[4]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[4]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[5]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[5]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[5]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[6]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[5]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[5]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[6]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[6]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[6]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[7]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[6]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[6]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[7]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[7]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[7]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[8]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[7]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[7]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[8]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[8]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[8]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[9]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[8]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[8]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[9]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[8]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[9]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[9]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[10]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[9]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[9]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[10]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[9]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[10]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[10]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[11]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[10]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[10]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[11]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[10]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[11]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[11]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[12]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[11]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[11]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[12]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[11]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[12]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[12]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[13]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[12]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[12]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[13]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[12]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[13]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[13]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[14]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[13]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[13]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[14]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[13]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[14]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[14]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[15]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[14]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[14]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[15]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[14]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[15]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[15]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[16]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[15]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[15]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[16]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[15]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[16]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[16]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[17]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[16]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[16]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[17]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[16]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[17]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[17]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[18]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[17]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[17]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[18]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[17]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[18]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[18]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[19]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[18]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[18]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[19]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[18]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[19]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[19]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[20]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[19]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[19]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[20]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[19]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[20]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[20]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[21]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[20]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[20]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[21]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[20]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[21]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[21]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[22]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[21]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[21]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[22]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[21]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[22]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[22]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[23]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[22]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[22]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[23]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[22]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[23]",
                                "cat": "istream"
                            },
                            "fifo_X_in": {
                                "arg": "fifo_X_pe_Serpens[23]",
                                "cat": "istream"
                            },
                            "fifo_X_out": {
                                "arg": "fifo_X_pe_Serpens[24]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[23]",
                                "cat": "ostream"
                            },
                            "fifo_inst_in": {
                                "arg": "PE_inst_Serpens[23]",
                                "cat": "istream"
                            },
                            "fifo_inst_out": {
                                "arg": "PE_inst_Serpens[24]",
                                "cat": "ostream"
                            },
                            "fifo_inst_out_to_Yvec": {
                                "arg": "Yvec_inst_Serpens[23]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ],
                "PEG_Yvec": [
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[0]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[0]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[0]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[1]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[1]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[1]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[2]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[2]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[2]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[3]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[3]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[3]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[4]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[4]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[4]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[5]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[5]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[5]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[6]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[6]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[6]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[7]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[7]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[7]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[8]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[8]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[8]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[9]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[9]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[9]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[10]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[10]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[10]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[11]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[11]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[11]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[12]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[12]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[12]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[13]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[13]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[13]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[14]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[14]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[14]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[15]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[15]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[15]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[16]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[16]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[16]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[17]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[17]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[17]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[18]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[18]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[18]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[19]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[19]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[19]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[20]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[20]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[20]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[21]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[21]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[21]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[22]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[22]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[22]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "fifo_Y_out": {
                                "arg": "fifo_Y_pe_Serpens[23]",
                                "cat": "ostream"
                            },
                            "fifo_aXvec": {
                                "arg": "fifo_aXvec_Serpens[23]",
                                "cat": "istream"
                            },
                            "fifo_inst_in": {
                                "arg": "Yvec_inst_Serpens[23]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    }
                ],
                "black_hole_float_v16": [
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "fifo_X_pe_Serpens[24]",
                                "cat": "istream"
                            }
                        },
                        "step": -1
                    }
                ],
                "black_hole_int": [
                    {
                        "args": {
                            "fifo_in": {
                                "arg": "PE_inst_Serpens[24]",
                                "cat": "istream"
                            }
                        },
                        "step": -1
                    }
                ],
                "read_A": [
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[0]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[1]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[2]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[3]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[4]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[5]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[6]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[7]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[8]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[8]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[9]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[9]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[10]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[10]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[11]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[11]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[12]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[12]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[13]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[13]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[14]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[14]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[15]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[15]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[16]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[16]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[17]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[17]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[18]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[18]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[19]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[19]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[20]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[20]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[21]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[21]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[22]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[22]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "A": {
                                "arg": "edge_list_ch[23]",
                                "cat": "async_mmap"
                            },
                            "A_len": {
                                "arg": "NUM_A_LEN",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_A": {
                                "arg": "fifo_A_Serpens[23]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ],
                "read_X": [
                    {
                        "args": {
                            "K": {
                                "arg": "K",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "fifo_X": {
                                "arg": "fifo_X_pe_Serpens[0]",
                                "cat": "ostream"
                            },
                            "vec_X": {
                                "arg": "vec_X",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    }
                ],
                "read_Y": [
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "Y": {
                                "arg": "vec_Y",
                                "cat": "async_mmap"
                            },
                            "fifo_Y": {
                                "arg": "fifo_Y_in_Serpens",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ],
                "read_edge_list_ptr": [
                    {
                        "args": {
                            "K": {
                                "arg": "K",
                                "cat": "scalar"
                            },
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "PE_inst": {
                                "arg": "PE_inst_Serpens[0]",
                                "cat": "ostream"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "edge_list_ptr": {
                                "arg": "edge_list_ptr",
                                "cat": "async_mmap"
                            },
                            "num_ite": {
                                "arg": "NUM_ITE",
                                "cat": "scalar"
                            }
                        },
                        "step": 0
                    }
                ],
                "write_Y": [
                    {
                        "args": {
                            "M": {
                                "arg": "M",
                                "cat": "scalar"
                            },
                            "P_N": {
                                "arg": "P_N",
                                "cat": "scalar"
                            },
                            "Y_out": {
                                "arg": "vec_Y_out",
                                "cat": "async_mmap"
                            },
                            "fifo_Y": {
                                "arg": "fifo_Y_out_Serpens",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    }
                ]
            },
            "vendor": "xilinx"
        },
        "black_hole_float_v16": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) {\n#pragma HLS disaggregate variable = fifo_in\n#pragma HLS interface ap_fifo port = fifo_in._\n#pragma HLS aggregate variable = fifo_in._ bit\n#pragma HLS interface ap_fifo port = fifo_in._peek\n#pragma HLS aggregate variable = fifo_in._peek bit\nvoid(fifo_in._.empty());\nvoid(fifo_in._peek.empty());\n\n    for (;;) {\n#pragma HLS pipeline II=1\n        float_v16 tmp; fifo_in.try_read(tmp);\n    }\n}\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "black_hole_int": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) {\n#pragma HLS disaggregate variable = fifo_in\n#pragma HLS interface ap_fifo port = fifo_in._\n#pragma HLS aggregate variable = fifo_in._ bit\n#pragma HLS interface ap_fifo port = fifo_in._peek\n#pragma HLS aggregate variable = fifo_in._peek bit\nvoid(fifo_in._.empty());\nvoid(fifo_in._peek.empty());\n\n    for (;;) {\n#pragma HLS pipeline II=1\n        int tmp; fifo_in.try_read(tmp);\n    }\n}\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "read_A": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            tapa::async_mmap<ap_uint<512>> & A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) {\n\n\n#pragma HLS disaggregate variable = A\n#pragma HLS interface ap_fifo port = A.read_addr._\n#pragma HLS aggregate variable = A.read_addr._  bit\n#pragma HLS interface ap_fifo port = A.read_data._\n#pragma HLS aggregate variable = A.read_data._  bit\n#pragma HLS interface ap_fifo port = A.write_addr._\n#pragma HLS aggregate variable = A.write_addr._  bit\n#pragma HLS interface ap_fifo port = A.write_data._\n#pragma HLS aggregate variable = A.write_data._  bit\n#pragma HLS interface ap_fifo port = A.write_resp._\n#pragma HLS aggregate variable = A.write_resp._  bit\n#pragma HLS disaggregate variable = A .read_data\n#pragma HLS interface ap_fifo port = A.read_data._peek\n#pragma HLS aggregate variable = A.read_data._peek bit\n#pragma HLS disaggregate variable = A .write_resp\n#pragma HLS interface ap_fifo port = A.write_resp._peek\n#pragma HLS aggregate variable = A.write_resp._peek bit\nvoid(A.read_addr._.full());\nvoid(A.read_data._.empty());\nvoid(A.read_data._peek.empty());\nvoid(A.write_addr._.full());\nvoid(A.write_data._.full());\nvoid(A.write_resp._.empty());\nvoid(A.write_resp._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_A\n#pragma HLS interface ap_fifo port = fifo_A._\n#pragma HLS aggregate variable = fifo_A._ bit\nvoid(fifo_A._.full());\n\n    const int rp_time = (P_N == 0)? 1 : P_N;\nl_rp:\n    for(int rp = 0; rp < rp_time; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n    rd_A:\n        for(int i_req = 0, i_resp = 0; i_resp < A_len;) {\n#pragma HLS loop_tripcount min=1 max=10000\n#pragma HLS pipeline II=1\n            async_read(A,\n                       fifo_A,\n                       A_len,\n                       i_req, i_resp);\n        }\n    }\n}\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "read_X": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            tapa::async_mmap<float_v16> & vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) {\n\n\n#pragma HLS disaggregate variable = vec_X\n#pragma HLS interface ap_fifo port = vec_X.read_addr._\n#pragma HLS aggregate variable = vec_X.read_addr._  bit\n#pragma HLS interface ap_fifo port = vec_X.read_data._\n#pragma HLS aggregate variable = vec_X.read_data._  bit\n#pragma HLS interface ap_fifo port = vec_X.write_addr._\n#pragma HLS aggregate variable = vec_X.write_addr._  bit\n#pragma HLS interface ap_fifo port = vec_X.write_data._\n#pragma HLS aggregate variable = vec_X.write_data._  bit\n#pragma HLS interface ap_fifo port = vec_X.write_resp._\n#pragma HLS aggregate variable = vec_X.write_resp._  bit\n#pragma HLS disaggregate variable = vec_X .read_data\n#pragma HLS interface ap_fifo port = vec_X.read_data._peek\n#pragma HLS aggregate variable = vec_X.read_data._peek bit\n#pragma HLS disaggregate variable = vec_X .write_resp\n#pragma HLS interface ap_fifo port = vec_X.write_resp._peek\n#pragma HLS aggregate variable = vec_X.write_resp._peek bit\nvoid(vec_X.read_addr._.full());\nvoid(vec_X.read_data._.empty());\nvoid(vec_X.read_data._peek.empty());\nvoid(vec_X.write_addr._.full());\nvoid(vec_X.write_data._.full());\nvoid(vec_X.write_resp._.empty());\nvoid(vec_X.write_resp._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_X\n#pragma HLS interface ap_fifo port = fifo_X._\n#pragma HLS aggregate variable = fifo_X._ bit\nvoid(fifo_X._.full());\n\n    const int rp_time = (P_N == 0)? 1 : P_N;\n    const int num_ite_X = (K + 15) >> 4;\nl_rp:\n    for(int rp = 0; rp < rp_time; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n    rd_X:\n        for(int i_req = 0, i_resp = 0; i_resp < num_ite_X;) {\n#pragma HLS loop_tripcount min=1 max=500000\n#pragma HLS pipeline II=1\n            async_read(vec_X,\n                       fifo_X,\n                       num_ite_X,\n                       i_req, i_resp);\n        }\n    }\n}\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "read_Y": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            tapa::async_mmap<float_v16> & Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) {\n\n\n#pragma HLS disaggregate variable = Y\n#pragma HLS interface ap_fifo port = Y.read_addr._\n#pragma HLS aggregate variable = Y.read_addr._  bit\n#pragma HLS interface ap_fifo port = Y.read_data._\n#pragma HLS aggregate variable = Y.read_data._  bit\n#pragma HLS interface ap_fifo port = Y.write_addr._\n#pragma HLS aggregate variable = Y.write_addr._  bit\n#pragma HLS interface ap_fifo port = Y.write_data._\n#pragma HLS aggregate variable = Y.write_data._  bit\n#pragma HLS interface ap_fifo port = Y.write_resp._\n#pragma HLS aggregate variable = Y.write_resp._  bit\n#pragma HLS disaggregate variable = Y .read_data\n#pragma HLS interface ap_fifo port = Y.read_data._peek\n#pragma HLS aggregate variable = Y.read_data._peek bit\n#pragma HLS disaggregate variable = Y .write_resp\n#pragma HLS interface ap_fifo port = Y.write_resp._peek\n#pragma HLS aggregate variable = Y.write_resp._peek bit\nvoid(Y.read_addr._.full());\nvoid(Y.read_data._.empty());\nvoid(Y.read_data._peek.empty());\nvoid(Y.write_addr._.full());\nvoid(Y.write_data._.full());\nvoid(Y.write_resp._.empty());\nvoid(Y.write_resp._peek.empty());\n\n#pragma HLS disaggregate variable = fifo_Y\n#pragma HLS interface ap_fifo port = fifo_Y._\n#pragma HLS aggregate variable = fifo_Y._ bit\nvoid(fifo_Y._.full());\n\n    const int rp_time = (P_N == 0)? 1 : P_N;\n    const int num_ite_Y = (M + 15) >> 4;\nl_rp:\n    for(int rp = 0; rp < rp_time; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n    rd_Y:\n        for(int i_req = 0, i_resp = 0; i_resp < num_ite_Y;) {\n#pragma HLS loop_tripcount min=1 max=500000\n#pragma HLS pipeline II=1\n            async_read(Y,\n                       fifo_Y,\n                       num_ite_Y,\n                       i_req, i_resp);\n        }\n    }\n}\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "read_edge_list_ptr": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        tapa::async_mmap<int> & edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) {\n\n\n\n\n#pragma HLS disaggregate variable = edge_list_ptr\n#pragma HLS interface ap_fifo port = edge_list_ptr.read_addr._\n#pragma HLS aggregate variable = edge_list_ptr.read_addr._  bit\n#pragma HLS interface ap_fifo port = edge_list_ptr.read_data._\n#pragma HLS aggregate variable = edge_list_ptr.read_data._  bit\n#pragma HLS interface ap_fifo port = edge_list_ptr.write_addr._\n#pragma HLS aggregate variable = edge_list_ptr.write_addr._  bit\n#pragma HLS interface ap_fifo port = edge_list_ptr.write_data._\n#pragma HLS aggregate variable = edge_list_ptr.write_data._  bit\n#pragma HLS interface ap_fifo port = edge_list_ptr.write_resp._\n#pragma HLS aggregate variable = edge_list_ptr.write_resp._  bit\n#pragma HLS disaggregate variable = edge_list_ptr .read_data\n#pragma HLS interface ap_fifo port = edge_list_ptr.read_data._peek\n#pragma HLS aggregate variable = edge_list_ptr.read_data._peek bit\n#pragma HLS disaggregate variable = edge_list_ptr .write_resp\n#pragma HLS interface ap_fifo port = edge_list_ptr.write_resp._peek\n#pragma HLS aggregate variable = edge_list_ptr.write_resp._peek bit\nvoid(edge_list_ptr.read_addr._.full());\nvoid(edge_list_ptr.read_data._.empty());\nvoid(edge_list_ptr.read_data._peek.empty());\nvoid(edge_list_ptr.write_addr._.full());\nvoid(edge_list_ptr.write_data._.full());\nvoid(edge_list_ptr.write_resp._.empty());\nvoid(edge_list_ptr.write_resp._peek.empty());\n\n#pragma HLS disaggregate variable = PE_inst\n#pragma HLS interface ap_fifo port = PE_inst._\n#pragma HLS aggregate variable = PE_inst._ bit\nvoid(PE_inst._.full());\n\n    const int rp_time = (P_N == 0)? 1 : P_N;\n    PE_inst.write(num_ite);\n    PE_inst.write(M);\n    PE_inst.write(rp_time);\n    PE_inst.write(K);\n    const int num_ite_plus1 = num_ite + 1;\nl_rp:\n    for(int rp = 0; rp < rp_time; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n    rd_ptr:\n        for (int i_req = 0, i_resp = 0; i_resp < num_ite_plus1;) {\n#pragma HLS loop_tripcount min=1 max=800\n#pragma HLS pipeline II=1\n            async_read(edge_list_ptr,\n                       PE_inst,\n                       num_ite_plus1,\n                       i_req, i_resp);\n        }\n    }\n}\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             uint64_t  Y_out\n             ) ;\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "write_Y": {
            "code": "\n\n #include <ap_int.h>\n\n#include <cstdio>\n\n#include <cstring>\n\n#include <cassert>\n\n\n #include <tapa.h>\n\n\n\n #include <ap_int.h>\n\n#include <tapa.h>\n//constexpr int NUM_CH_SPARSE = 16;\nconstexpr int NUM_CH_SPARSE = 24; //or, 32, 40, 48, 56\nconstexpr int WINDOW_SIZE = 8192;\nconstexpr int DEP_DIST_LOAD_STORE = 10;\nconstexpr int X_PARTITION_FACTOR = 8;\nconstexpr int URAM_DEPTH = ((NUM_CH_SPARSE == 16)? 3 : 2) * 4096; // 16 -> 12,288, others -> 8,192\nusing float_v16 = tapa::vec_t<float, 16>;\nvoid Serpens(tapa::mmap<int> edge_list_ptr,\n             tapa::mmaps<ap_uint<512>, NUM_CH_SPARSE> edge_list_ch,\n             tapa::mmap<float_v16> vec_X,\n             tapa::mmap<float_v16> vec_Y,\n             tapa::mmap<float_v16> vec_Y_out,\n             const int NUM_ITE, const int NUM_A_LEN, const int M, const int K,\n             const int P_N, const int alpha_u, const int beta_u);\n\n//#include <iostream>\n//using namespace std;\nconstexpr int FIFO_DEPTH = 2;\nconst int NUM_CH_SPARSE_div_8 = NUM_CH_SPARSE / 8;\nconst int NUM_CH_SPARSE_mult_16 = NUM_CH_SPARSE * 16;\nconst int NUM_CH_SPARSE_mult_2 = NUM_CH_SPARSE * 2;\nconst int WINDOW_SIZE_div_16 = WINDOW_SIZE >> 4;\nusing float_v8 = tapa::vec_t<float, 8>;\nusing float_v2 = tapa::vec_t<float, 2>;\nstruct MultXVec {\n    tapa::vec_t<ap_uint<18>, 8> row;\n    float_v8 axv;\n};\ntemplate <typename T, typename R>\ninline void async_read(tapa::async_mmap<T> & A,\n                       tapa::ostream<T> & fifo_A,\n                       const R A_len,\n                       R & i_req,\n                       R & i_resp) {\n#pragma HLS inline\n    if ((i_req < A_len) &\n        !A.read_addr.full()) {\n        A.read_addr.try_write(i_req);\n        ++i_req;\n    }\n    if (!fifo_A.full() & !A.read_data.empty()) {\n        T tmp;\n        A.read_data.try_read(tmp);\n        fifo_A.try_write(tmp);\n        ++i_resp;\n    }\n}\nvoid read_edge_list_ptr(const int num_ite,\n                        const int M,\n                        const int P_N,\n                        const int K,\n                        uint64_t  edge_list_ptr,\n                        tapa::ostream<int> & PE_inst\n                        ) ;\nvoid read_X(const int P_N,\n            const int K,\n            uint64_t  vec_X,\n            tapa::ostream<float_v16> & fifo_X\n            ) ;\nvoid read_A(const int P_N,\n            const int A_len,\n            uint64_t  A,\n            tapa::ostream<ap_uint<512>> & fifo_A\n            ) ;\nvoid PEG_Xvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<ap_uint<512>> & fifo_A,\n              tapa::istream<float_v16> & fifo_X_in,\n              tapa::ostream<int> & fifo_inst_out,\n              tapa::ostream<float_v16> & fifo_X_out,\n              // to PEG_Yvec\n              tapa::ostream<int> & fifo_inst_out_to_Yvec,\n              tapa::ostream<MultXVec> & fifo_aXvec\n              ) ;\ninline void PUcore_Ymtx(ap_uint<18> addr_c,\n                        float val_d0_f,\n                        ap_uint<64> local_C_pe0[URAM_DEPTH]\n                        ) {\n#pragma HLS inline\n    ap_uint<64> c_val_u64 = local_C_pe0[addr_c(17, 1)];\n    ap_uint<32> c_val_d0_u = c_val_u64(31, 0);\n    ap_uint<32> c_val_d1_u = c_val_u64(63, 32);\n    ap_uint<32> c_val_u = (addr_c[0])? c_val_d1_u : c_val_d0_u;\n    float c_val_plus_d0_f = tapa::bit_cast<float>(c_val_u) + val_d0_f;\n    c_val_u = tapa::bit_cast<ap_uint<32>>(c_val_plus_d0_f);\n    if (addr_c[0]) {\n        c_val_d1_u = c_val_u;\n    } else {\n        c_val_d0_u = c_val_u;\n    }\n    c_val_u64(63, 32) = c_val_d1_u;\n    c_val_u64(31, 0) = c_val_d0_u;\n    local_C_pe0[addr_c(17, 1)] = c_val_u64;\n}\nvoid PEG_Yvec(tapa::istream<int> & fifo_inst_in,\n              tapa::istream<MultXVec> & fifo_aXvec,\n              tapa::ostream<float_v2> & fifo_Y_out\n              ) ;\nvoid Arbiter_Y(const int P_N,\n               const int M,\n               tapa::istreams<float_v2, NUM_CH_SPARSE_div_8> & fifo_in,\n               tapa::ostream<float_v2> & fifo_out\n               ) ;\nvoid Merger_Y(tapa::istreams<float_v2, 8> & fifo_in,\n              tapa::ostream<float_v16> & fifo_out) ;\nvoid FloatvMultConst(const int P_N,\n                     const int M,\n                     const int alpha_u,\n                     tapa::istream<float_v16> & fifo_in,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid read_Y(const int P_N,\n            const int M,\n            uint64_t  Y,\n            tapa::ostream<float_v16> & fifo_Y\n            ) ;\nvoid FloatvAddFloatv(tapa::istream<float_v16> & fifo_in0,\n                     tapa::istream<float_v16> & fifo_in1,\n                     tapa::ostream<float_v16> & fifo_out\n                     ) ;\nvoid write_Y(const int P_N,\n             const int M,\n             tapa::istream<float_v16> & fifo_Y,\n             tapa::async_mmap<float_v16> & Y_out\n             ) {\n\n\n#pragma HLS disaggregate variable = fifo_Y\n#pragma HLS interface ap_fifo port = fifo_Y._\n#pragma HLS aggregate variable = fifo_Y._ bit\n#pragma HLS interface ap_fifo port = fifo_Y._peek\n#pragma HLS aggregate variable = fifo_Y._peek bit\nvoid(fifo_Y._.empty());\nvoid(fifo_Y._peek.empty());\n\n#pragma HLS disaggregate variable = Y_out\n#pragma HLS interface ap_fifo port = Y_out.read_addr._\n#pragma HLS aggregate variable = Y_out.read_addr._  bit\n#pragma HLS interface ap_fifo port = Y_out.read_data._\n#pragma HLS aggregate variable = Y_out.read_data._  bit\n#pragma HLS interface ap_fifo port = Y_out.write_addr._\n#pragma HLS aggregate variable = Y_out.write_addr._  bit\n#pragma HLS interface ap_fifo port = Y_out.write_data._\n#pragma HLS aggregate variable = Y_out.write_data._  bit\n#pragma HLS interface ap_fifo port = Y_out.write_resp._\n#pragma HLS aggregate variable = Y_out.write_resp._  bit\n#pragma HLS disaggregate variable = Y_out .read_data\n#pragma HLS interface ap_fifo port = Y_out.read_data._peek\n#pragma HLS aggregate variable = Y_out.read_data._peek bit\n#pragma HLS disaggregate variable = Y_out .write_resp\n#pragma HLS interface ap_fifo port = Y_out.write_resp._peek\n#pragma HLS aggregate variable = Y_out.write_resp._peek bit\nvoid(Y_out.read_addr._.full());\nvoid(Y_out.read_data._.empty());\nvoid(Y_out.read_data._peek.empty());\nvoid(Y_out.write_addr._.full());\nvoid(Y_out.write_data._.full());\nvoid(Y_out.write_resp._.empty());\nvoid(Y_out.write_resp._peek.empty());\n\n    const int rp_time = (P_N == 0)? 1 : P_N;\n    const int num_ite_Y = (M + 15) >> 4;\nl_rp:\n    for(int rp = 0; rp < rp_time; rp++) {\n#pragma HLS loop_flatten off\n#pragma HLS loop_tripcount min=1 max=16\n    wr_C:\n        for(int i_req = 0, i_resp = 0; i_resp < num_ite_Y;) {\n#pragma HLS loop_tripcount min=1 max=500000\n#pragma HLS pipeline II=1\n            if ((i_req < num_ite_Y) &\n                !fifo_Y.empty() &\n                !Y_out.write_addr.full() &\n                !Y_out.write_data.full() ) {\n                Y_out.write_addr.try_write(i_req);\n                float_v16 tmpv16;\n                fifo_Y.try_read(tmpv16);\n                Y_out.write_data.try_write(tmpv16);\n                ++i_req;\n            }\n            uint8_t n_resp;\n            if (Y_out.write_resp.try_read(n_resp)) {\n                i_resp += int(n_resp) + 1;\n            }\n        }\n    }\n}\nvoid black_hole_int(tapa::istream<int> & fifo_in) ;\nvoid black_hole_float_v16(tapa::istream<float_v16> & fifo_in) ;\nvoid Serpens(uint64_t  edge_list_ptr,\n             uint64_t edge_list_ch_0, uint64_t edge_list_ch_1, uint64_t edge_list_ch_2, uint64_t edge_list_ch_3, uint64_t edge_list_ch_4, uint64_t edge_list_ch_5, uint64_t edge_list_ch_6, uint64_t edge_list_ch_7, uint64_t edge_list_ch_8, uint64_t edge_list_ch_9, uint64_t edge_list_ch_10, uint64_t edge_list_ch_11, uint64_t edge_list_ch_12, uint64_t edge_list_ch_13, uint64_t edge_list_ch_14, uint64_t edge_list_ch_15, uint64_t edge_list_ch_16, uint64_t edge_list_ch_17, uint64_t edge_list_ch_18, uint64_t edge_list_ch_19, uint64_t edge_list_ch_20, uint64_t edge_list_ch_21, uint64_t edge_list_ch_22, uint64_t edge_list_ch_23,\n             uint64_t  vec_X,\n             uint64_t  vec_Y,\n             uint64_t  vec_Y_out,\n             const int NUM_ITE,\n             const int NUM_A_LEN,\n             const int M,\n             const int K,\n             const int P_N,\n             const int alpha_u,\n             const int beta_u\n             ) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        }
    },
    "top": "Serpens"
}
