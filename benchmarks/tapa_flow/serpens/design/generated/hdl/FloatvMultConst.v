// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="FloatvMultConst_FloatvMultConst,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.461450,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3715,HLS_SYN_LUT=1583,HLS_VERSION=2022_2}" *)

module FloatvMultConst (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        P_N,
        M,
        alpha_u,
        fifo_in_s_dout,
        fifo_in_s_empty_n,
        fifo_in_s_read,
        fifo_in_peek_dout,
        fifo_in_peek_empty_n,
        fifo_in_peek_read,
        fifo_out_din,
        fifo_out_full_n,
        fifo_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] P_N;
input  [31:0] M;
input  [31:0] alpha_u;
input  [512:0] fifo_in_s_dout;
input   fifo_in_s_empty_n;
output   fifo_in_s_read;
input  [512:0] fifo_in_peek_dout;
input   fifo_in_peek_empty_n;
output   fifo_in_peek_read;
output  [512:0] fifo_out_din;
input   fifo_out_full_n;
output   fifo_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_in_s_read;
reg fifo_out_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] rp_time_fu_108_p3;
reg  signed [31:0] rp_time_reg_144;
reg  signed [27:0] trunc_ln_reg_149;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_135_p2;
reg   [31:0] num_ite_Y_reg_164;
wire   [31:0] empty_82_fu_140_p1;
reg   [31:0] empty_82_reg_169;
wire    ap_CS_fsm_state4;
wire    grp_FloatvMultConst_Pipeline_cc_fu_92_ap_start;
wire    grp_FloatvMultConst_Pipeline_cc_fu_92_ap_done;
wire    grp_FloatvMultConst_Pipeline_cc_fu_92_ap_idle;
wire    grp_FloatvMultConst_Pipeline_cc_fu_92_ap_ready;
wire   [512:0] grp_FloatvMultConst_Pipeline_cc_fu_92_fifo_out_din;
wire    grp_FloatvMultConst_Pipeline_cc_fu_92_fifo_out_write;
wire    grp_FloatvMultConst_Pipeline_cc_fu_92_fifo_in_s_read;
reg    grp_FloatvMultConst_Pipeline_cc_fu_92_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln146_fu_102_p2;
wire   [31:0] add_ln147_fu_116_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_FloatvMultConst_Pipeline_cc_fu_92_ap_start_reg = 1'b0;
end

FloatvMultConst_FloatvMultConst_Pipeline_cc grp_FloatvMultConst_Pipeline_cc_fu_92(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_FloatvMultConst_Pipeline_cc_fu_92_ap_start),
    .ap_done(grp_FloatvMultConst_Pipeline_cc_fu_92_ap_done),
    .ap_idle(grp_FloatvMultConst_Pipeline_cc_fu_92_ap_idle),
    .ap_ready(grp_FloatvMultConst_Pipeline_cc_fu_92_ap_ready),
    .fifo_out_din(grp_FloatvMultConst_Pipeline_cc_fu_92_fifo_out_din),
    .fifo_out_full_n(fifo_out_full_n),
    .fifo_out_write(grp_FloatvMultConst_Pipeline_cc_fu_92_fifo_out_write),
    .num_ite_Y(num_ite_Y_reg_164),
    .fifo_in_s_dout(fifo_in_s_dout),
    .fifo_in_s_empty_n(fifo_in_s_empty_n),
    .fifo_in_s_read(grp_FloatvMultConst_Pipeline_cc_fu_92_fifo_in_s_read),
    .empty(empty_82_reg_169)
);

FloatvMultConst_mul_32s_28s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 32 ))
mul_32s_28s_32_2_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(rp_time_reg_144),
    .din1(trunc_ln_reg_149),
    .ce(1'b1),
    .dout(grp_fu_135_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_FloatvMultConst_Pipeline_cc_fu_92_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_FloatvMultConst_Pipeline_cc_fu_92_ap_start_reg <= 1'b1;
        end else if ((grp_FloatvMultConst_Pipeline_cc_fu_92_ap_ready == 1'b1)) begin
            grp_FloatvMultConst_Pipeline_cc_fu_92_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_82_reg_169 <= empty_82_fu_140_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        num_ite_Y_reg_164 <= grp_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        rp_time_reg_144 <= rp_time_fu_108_p3;
        trunc_ln_reg_149 <= {{add_ln147_fu_116_p2[31:4]}};
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_FloatvMultConst_Pipeline_cc_fu_92_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_FloatvMultConst_Pipeline_cc_fu_92_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_FloatvMultConst_Pipeline_cc_fu_92_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fifo_in_s_read = grp_FloatvMultConst_Pipeline_cc_fu_92_fifo_in_s_read;
    end else begin
        fifo_in_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fifo_out_write = grp_FloatvMultConst_Pipeline_cc_fu_92_fifo_out_write;
    end else begin
        fifo_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_FloatvMultConst_Pipeline_cc_fu_92_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln147_fu_116_p2 = (M + 32'd15);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_82_fu_140_p1 = alpha_u;

assign fifo_in_peek_read = 1'b0;

assign fifo_out_din = grp_FloatvMultConst_Pipeline_cc_fu_92_fifo_out_din;

assign grp_FloatvMultConst_Pipeline_cc_fu_92_ap_start = grp_FloatvMultConst_Pipeline_cc_fu_92_ap_start_reg;

assign icmp_ln146_fu_102_p2 = ((P_N == 32'd0) ? 1'b1 : 1'b0);

assign rp_time_fu_108_p3 = ((icmp_ln146_fu_102_p2[0:0] == 1'b1) ? 32'd1 : P_N);

endmodule //FloatvMultConst
