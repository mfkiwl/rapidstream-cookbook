// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

module read_X_read_X_Pipeline_rd_X (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln111,
        fifo_X_din,
        fifo_X_full_n,
        fifo_X_write,
        vec_X_read_data_s_dout,
        vec_X_read_data_s_empty_n,
        vec_X_read_data_s_read,
        vec_X_read_addr_din,
        vec_X_read_addr_full_n,
        vec_X_read_addr_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [27:0] sext_ln111;
output  [512:0] fifo_X_din;
input   fifo_X_full_n;
output   fifo_X_write;
input  [512:0] vec_X_read_data_s_dout;
input   vec_X_read_data_s_empty_n;
output   vec_X_read_data_s_read;
output  [64:0] vec_X_read_addr_din;
input   vec_X_read_addr_full_n;
output   vec_X_read_addr_write;

reg ap_idle;
reg fifo_X_write;
reg vec_X_read_data_s_read;
reg vec_X_read_addr_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln117_fu_132_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [31:0] sext_ln111_cast_fu_112_p1;
reg  signed [31:0] sext_ln111_cast_reg_220;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] i_resp_fu_54;
wire   [31:0] i_resp_2_fu_195_p2;
wire   [0:0] and_ln59_fu_172_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [31:0] i_req_fu_58;
wire   [31:0] i_req_2_fu_161_p2;
wire   [0:0] and_ln54_fu_142_p2;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_4_nbreadreq_fu_91_p3;
wire  signed [31:0] icmp_ln54_fu_137_p0;
wire   [0:0] icmp_ln54_fu_137_p2;
wire   [0:0] and_ln54_fu_142_p1;
wire  signed [31:0] sext_ln56_fu_148_p0;
wire  signed [63:0] sext_ln56_fu_148_p1;
wire  signed [31:0] i_req_2_fu_161_p0;
wire   [0:0] and_ln59_fu_172_p0;
wire   [511:0] trunc_ln146_fu_182_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_193;
reg    ap_condition_196;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

read_X_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_req_fu_58 <= 32'd0;
        end else if ((1'b1 == ap_condition_193)) begin
            i_req_fu_58 <= i_req_2_fu_161_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_resp_fu_54 <= 32'd0;
        end else if ((1'b1 == ap_condition_196)) begin
            i_resp_fu_54 <= i_resp_2_fu_195_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sext_ln111_cast_reg_220 <= sext_ln111_cast_fu_112_p1;
    end
end

always @ (*) begin
    if (((icmp_ln117_fu_132_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln59_fu_172_p2) & (fifo_X_full_n == 1'b1) & (icmp_ln117_fu_132_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_X_write = 1'b1;
    end else begin
        fifo_X_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln54_fu_142_p2) & (vec_X_read_addr_full_n == 1'b1) & (icmp_ln117_fu_132_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_X_read_addr_write = 1'b1;
    end else begin
        vec_X_read_addr_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln59_fu_172_p2) & (vec_X_read_data_s_empty_n == 1'b1) & (icmp_ln117_fu_132_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_X_read_data_s_read = 1'b1;
    end else begin
        vec_X_read_data_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln54_fu_142_p1 = vec_X_read_addr_full_n;

assign and_ln54_fu_142_p2 = (icmp_ln54_fu_137_p2 & and_ln54_fu_142_p1);

assign and_ln59_fu_172_p0 = fifo_X_full_n;

assign and_ln59_fu_172_p2 = (tmp_4_nbreadreq_fu_91_p3 & and_ln59_fu_172_p0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_193 = ((1'd1 == and_ln54_fu_142_p2) & (icmp_ln117_fu_132_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_196 = ((1'd1 == and_ln59_fu_172_p2) & (icmp_ln117_fu_132_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign fifo_X_din = {{1'd0}, {trunc_ln146_fu_182_p1}};

assign i_req_2_fu_161_p0 = i_req_fu_58;

assign i_req_2_fu_161_p2 = ($signed(i_req_2_fu_161_p0) + $signed(32'd1));

assign i_resp_2_fu_195_p2 = (i_resp_fu_54 + 32'd1);

assign icmp_ln117_fu_132_p2 = (($signed(i_resp_fu_54) < $signed(sext_ln111_cast_reg_220)) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_137_p0 = i_req_fu_58;

assign icmp_ln54_fu_137_p2 = (($signed(icmp_ln54_fu_137_p0) < $signed(sext_ln111_cast_reg_220)) ? 1'b1 : 1'b0);

assign sext_ln111_cast_fu_112_p1 = $signed(sext_ln111);

assign sext_ln56_fu_148_p0 = i_req_fu_58;

assign sext_ln56_fu_148_p1 = sext_ln56_fu_148_p0;

assign tmp_4_nbreadreq_fu_91_p3 = vec_X_read_data_s_empty_n;

assign trunc_ln146_fu_182_p1 = vec_X_read_data_s_dout[511:0];

assign vec_X_read_addr_din = {{1'd0}, {sext_ln56_fu_148_p1}};

endmodule //read_X_read_X_Pipeline_rd_X
