// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="write_Y_write_Y,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.414450,HLS_SYN_LAT=2000033,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=194,HLS_SYN_LUT=430,HLS_VERSION=2022_2}" *)

module write_Y (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        P_N,
        M,
        fifo_Y_s_dout,
        fifo_Y_s_empty_n,
        fifo_Y_s_read,
        fifo_Y_peek_dout,
        fifo_Y_peek_empty_n,
        fifo_Y_peek_read,
        Y_out_read_addr_din,
        Y_out_read_addr_full_n,
        Y_out_read_addr_write,
        Y_out_read_data_s_dout,
        Y_out_read_data_s_empty_n,
        Y_out_read_data_s_read,
        Y_out_read_data_peek_dout,
        Y_out_read_data_peek_empty_n,
        Y_out_read_data_peek_read,
        Y_out_write_addr_din,
        Y_out_write_addr_full_n,
        Y_out_write_addr_write,
        Y_out_write_data_din,
        Y_out_write_data_full_n,
        Y_out_write_data_write,
        Y_out_write_resp_s_dout,
        Y_out_write_resp_s_empty_n,
        Y_out_write_resp_s_read,
        Y_out_write_resp_peek_dout,
        Y_out_write_resp_peek_empty_n,
        Y_out_write_resp_peek_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] P_N;
input  [31:0] M;
input  [512:0] fifo_Y_s_dout;
input   fifo_Y_s_empty_n;
output   fifo_Y_s_read;
input  [512:0] fifo_Y_peek_dout;
input   fifo_Y_peek_empty_n;
output   fifo_Y_peek_read;
output  [64:0] Y_out_read_addr_din;
input   Y_out_read_addr_full_n;
output   Y_out_read_addr_write;
input  [512:0] Y_out_read_data_s_dout;
input   Y_out_read_data_s_empty_n;
output   Y_out_read_data_s_read;
input  [512:0] Y_out_read_data_peek_dout;
input   Y_out_read_data_peek_empty_n;
output   Y_out_read_data_peek_read;
output  [64:0] Y_out_write_addr_din;
input   Y_out_write_addr_full_n;
output   Y_out_write_addr_write;
output  [512:0] Y_out_write_data_din;
input   Y_out_write_data_full_n;
output   Y_out_write_data_write;
input  [8:0] Y_out_write_resp_s_dout;
input   Y_out_write_resp_s_empty_n;
output   Y_out_write_resp_s_read;
input  [8:0] Y_out_write_resp_peek_dout;
input   Y_out_write_resp_peek_empty_n;
output   Y_out_write_resp_peek_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_Y_s_read;
reg Y_out_write_addr_write;
reg Y_out_write_data_write;
reg Y_out_write_resp_s_read;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] rp_time_fu_187_p3;
reg   [31:0] rp_time_reg_246;
reg   [27:0] num_ite_Y_reg_251;
wire    grp_write_Y_Pipeline_wr_C_fu_168_ap_start;
wire    grp_write_Y_Pipeline_wr_C_fu_168_ap_done;
wire    grp_write_Y_Pipeline_wr_C_fu_168_ap_idle;
wire    grp_write_Y_Pipeline_wr_C_fu_168_ap_ready;
wire    grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_resp_s_read;
wire    grp_write_Y_Pipeline_wr_C_fu_168_fifo_Y_s_read;
wire   [64:0] grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_addr_din;
wire    grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_addr_write;
wire   [512:0] grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_data_din;
wire    grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_data_write;
reg    grp_write_Y_Pipeline_wr_C_fu_168_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln181_fu_223_p2;
wire    ap_CS_fsm_state3;
reg   [30:0] rp_fu_80;
wire   [30:0] rp_2_fu_228_p2;
wire   [0:0] icmp_ln178_fu_181_p2;
wire   [31:0] add_ln179_fu_195_p2;
wire   [31:0] zext_ln181_fu_219_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_write_Y_Pipeline_wr_C_fu_168_ap_start_reg = 1'b0;
end

write_Y_write_Y_Pipeline_wr_C grp_write_Y_Pipeline_wr_C_fu_168(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_write_Y_Pipeline_wr_C_fu_168_ap_start),
    .ap_done(grp_write_Y_Pipeline_wr_C_fu_168_ap_done),
    .ap_idle(grp_write_Y_Pipeline_wr_C_fu_168_ap_idle),
    .ap_ready(grp_write_Y_Pipeline_wr_C_fu_168_ap_ready),
    .sext_ln179(num_ite_Y_reg_251),
    .Y_out_write_resp_s_dout(Y_out_write_resp_s_dout),
    .Y_out_write_resp_s_empty_n(Y_out_write_resp_s_empty_n),
    .Y_out_write_resp_s_read(grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_resp_s_read),
    .fifo_Y_s_dout(fifo_Y_s_dout),
    .fifo_Y_s_empty_n(fifo_Y_s_empty_n),
    .fifo_Y_s_read(grp_write_Y_Pipeline_wr_C_fu_168_fifo_Y_s_read),
    .Y_out_write_addr_din(grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_addr_din),
    .Y_out_write_addr_full_n(Y_out_write_addr_full_n),
    .Y_out_write_addr_write(grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_addr_write),
    .Y_out_write_data_din(grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_data_din),
    .Y_out_write_data_full_n(Y_out_write_data_full_n),
    .Y_out_write_data_write(grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_data_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_write_Y_Pipeline_wr_C_fu_168_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln181_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_write_Y_Pipeline_wr_C_fu_168_ap_start_reg <= 1'b1;
        end else if ((grp_write_Y_Pipeline_wr_C_fu_168_ap_ready == 1'b1)) begin
            grp_write_Y_Pipeline_wr_C_fu_168_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rp_fu_80 <= 31'd0;
    end else if (((icmp_ln181_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        rp_fu_80 <= rp_2_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        num_ite_Y_reg_251 <= {{add_ln179_fu_195_p2[31:4]}};
        rp_time_reg_246 <= rp_time_fu_187_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Y_out_write_addr_write = grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_addr_write;
    end else begin
        Y_out_write_addr_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Y_out_write_data_write = grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_data_write;
    end else begin
        Y_out_write_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Y_out_write_resp_s_read = grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_resp_s_read;
    end else begin
        Y_out_write_resp_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_write_Y_Pipeline_wr_C_fu_168_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln181_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln181_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fifo_Y_s_read = grp_write_Y_Pipeline_wr_C_fu_168_fifo_Y_s_read;
    end else begin
        fifo_Y_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln181_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_write_Y_Pipeline_wr_C_fu_168_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Y_out_read_addr_din = 65'd0;

assign Y_out_read_addr_write = 1'b0;

assign Y_out_read_data_peek_read = 1'b0;

assign Y_out_read_data_s_read = 1'b0;

assign Y_out_write_addr_din = grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_addr_din;

assign Y_out_write_data_din = grp_write_Y_Pipeline_wr_C_fu_168_Y_out_write_data_din;

assign Y_out_write_resp_peek_read = 1'b0;

assign add_ln179_fu_195_p2 = (M + 32'd15);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign fifo_Y_peek_read = 1'b0;

assign grp_write_Y_Pipeline_wr_C_fu_168_ap_start = grp_write_Y_Pipeline_wr_C_fu_168_ap_start_reg;

assign icmp_ln178_fu_181_p2 = ((P_N == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln181_fu_223_p2 = (($signed(zext_ln181_fu_219_p1) < $signed(rp_time_reg_246)) ? 1'b1 : 1'b0);

assign rp_2_fu_228_p2 = (rp_fu_80 + 31'd1);

assign rp_time_fu_187_p3 = ((icmp_ln178_fu_181_p2[0:0] == 1'b1) ? 32'd1 : P_N);

assign zext_ln181_fu_219_p1 = rp_fu_80;

endmodule //write_Y
