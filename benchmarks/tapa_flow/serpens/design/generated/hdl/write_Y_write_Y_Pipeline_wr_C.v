// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

module write_Y_write_Y_Pipeline_wr_C (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln179,
        Y_out_write_resp_s_dout,
        Y_out_write_resp_s_empty_n,
        Y_out_write_resp_s_read,
        fifo_Y_s_dout,
        fifo_Y_s_empty_n,
        fifo_Y_s_read,
        Y_out_write_addr_din,
        Y_out_write_addr_full_n,
        Y_out_write_addr_write,
        Y_out_write_data_din,
        Y_out_write_data_full_n,
        Y_out_write_data_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [27:0] sext_ln179;
input  [8:0] Y_out_write_resp_s_dout;
input   Y_out_write_resp_s_empty_n;
output   Y_out_write_resp_s_read;
input  [512:0] fifo_Y_s_dout;
input   fifo_Y_s_empty_n;
output   fifo_Y_s_read;
output  [64:0] Y_out_write_addr_din;
input   Y_out_write_addr_full_n;
output   Y_out_write_addr_write;
output  [512:0] Y_out_write_data_din;
input   Y_out_write_data_full_n;
output   Y_out_write_data_write;

reg ap_idle;
reg Y_out_write_resp_s_read;
reg fifo_Y_s_read;
reg Y_out_write_addr_write;
reg Y_out_write_data_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln185_fu_144_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [31:0] sext_ln179_cast_fu_124_p1;
reg  signed [31:0] sext_ln179_cast_reg_272;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] i_resp_fu_60;
wire   [31:0] i_resp_5_fu_245_p3;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [31:0] i_req_fu_64;
wire   [31:0] i_req_2_fu_202_p2;
wire   [0:0] and_ln190_fu_166_p2;
wire   [0:0] tmp_nbreadreq_fu_74_p3;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] Y_out_write_resp_s_read_nbread_fu_118_p2_0;
wire  signed [31:0] icmp_ln188_fu_149_p0;
wire   [0:0] and_ln190_2_fu_154_p0;
wire   [0:0] and_ln190_2_fu_154_p1;
wire   [0:0] and_ln190_2_fu_154_p2;
wire   [0:0] and_ln190_1_fu_160_p2;
wire   [0:0] icmp_ln188_fu_149_p2;
wire  signed [31:0] sext_ln192_fu_172_p0;
wire  signed [63:0] sext_ln192_fu_172_p1;
wire   [511:0] trunc_ln146_fu_189_p1;
wire  signed [31:0] i_req_2_fu_202_p0;
wire   [7:0] elem_val_fu_221_p1;
wire   [8:0] zext_ln200_fu_225_p1;
wire   [8:0] add_ln200_fu_229_p2;
wire   [31:0] zext_ln200_1_fu_235_p1;
wire   [31:0] i_resp_4_fu_239_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_230;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

write_Y_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_req_fu_64 <= 32'd0;
        end else if ((1'b1 == ap_condition_230)) begin
            i_req_fu_64 <= i_req_2_fu_202_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_resp_fu_60 <= 32'd0;
        end else if (((icmp_ln185_fu_144_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_resp_fu_60 <= i_resp_5_fu_245_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sext_ln179_cast_reg_272 <= sext_ln179_cast_fu_124_p1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln190_fu_166_p2) & (icmp_ln185_fu_144_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == Y_out_write_addr_full_n) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Y_out_write_addr_write = 1'b1;
    end else begin
        Y_out_write_addr_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln190_fu_166_p2) & (icmp_ln185_fu_144_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == Y_out_write_data_full_n) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Y_out_write_data_write = 1'b1;
    end else begin
        Y_out_write_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_fu_144_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == Y_out_write_resp_s_empty_n) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Y_out_write_resp_s_read = 1'b1;
    end else begin
        Y_out_write_resp_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_fu_144_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln190_fu_166_p2) & (fifo_Y_s_empty_n == 1'b1) & (icmp_ln185_fu_144_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_Y_s_read = 1'b1;
    end else begin
        fifo_Y_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Y_out_write_addr_din = {{1'd0}, {sext_ln192_fu_172_p1}};

assign Y_out_write_data_din = {{1'd0}, {trunc_ln146_fu_189_p1}};

assign Y_out_write_resp_s_read_nbread_fu_118_p2_0 = Y_out_write_resp_s_empty_n;

assign add_ln200_fu_229_p2 = (zext_ln200_fu_225_p1 + 9'd1);

assign and_ln190_1_fu_160_p2 = (tmp_nbreadreq_fu_74_p3 & and_ln190_2_fu_154_p2);

assign and_ln190_2_fu_154_p0 = Y_out_write_addr_full_n;

assign and_ln190_2_fu_154_p1 = Y_out_write_data_full_n;

assign and_ln190_2_fu_154_p2 = (and_ln190_2_fu_154_p1 & and_ln190_2_fu_154_p0);

assign and_ln190_fu_166_p2 = (icmp_ln188_fu_149_p2 & and_ln190_1_fu_160_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_230 = ((1'd1 == and_ln190_fu_166_p2) & (icmp_ln185_fu_144_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign elem_val_fu_221_p1 = Y_out_write_resp_s_dout[7:0];

assign i_req_2_fu_202_p0 = i_req_fu_64;

assign i_req_2_fu_202_p2 = ($signed(i_req_2_fu_202_p0) + $signed(32'd1));

assign i_resp_4_fu_239_p2 = (zext_ln200_1_fu_235_p1 + i_resp_fu_60);

assign i_resp_5_fu_245_p3 = ((Y_out_write_resp_s_read_nbread_fu_118_p2_0[0:0] == 1'b1) ? i_resp_4_fu_239_p2 : i_resp_fu_60);

assign icmp_ln185_fu_144_p2 = (($signed(i_resp_fu_60) < $signed(sext_ln179_cast_reg_272)) ? 1'b1 : 1'b0);

assign icmp_ln188_fu_149_p0 = i_req_fu_64;

assign icmp_ln188_fu_149_p2 = (($signed(icmp_ln188_fu_149_p0) < $signed(sext_ln179_cast_reg_272)) ? 1'b1 : 1'b0);

assign sext_ln179_cast_fu_124_p1 = $signed(sext_ln179);

assign sext_ln192_fu_172_p0 = i_req_fu_64;

assign sext_ln192_fu_172_p1 = sext_ln192_fu_172_p0;

assign tmp_nbreadreq_fu_74_p3 = fifo_Y_s_empty_n;

assign trunc_ln146_fu_189_p1 = fifo_Y_s_dout[511:0];

assign zext_ln200_1_fu_235_p1 = add_ln200_fu_229_p2;

assign zext_ln200_fu_225_p1 = elem_val_fu_221_p1;

endmodule //write_Y_write_Y_Pipeline_wr_C
