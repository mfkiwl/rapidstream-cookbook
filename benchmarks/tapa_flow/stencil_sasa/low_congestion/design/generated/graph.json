{
    "cflags": [
        "-std=c++17",
        "-I",
        "/home/ylxiao/.local/lib/python3.8/site-packages/tapa/../../../src",
        "-isystem",
        "/tools/Xilinx/Vitis_HLS/2022.2/include"
    ],
    "tasks": {
        "SEIDEL2D": {
            "code": "\n\n #include <hls_stream.h>\n\n#include \"math.h\"\n\n// #define GRID_ROWS 9720\n\n\n #include <ap_int.h>\n\n#include <inttypes.h>\n\n const int WIDTH_FACTOR = 512/32;\n// #define OVERLAP_TOP_OVERHEAD 8255\n// #define OVERLAP_BOTTOM_OVERHEAD 8382\n\n\n #include <tapa.h>\n\ntemplate<class T>\nT HLS_REG(T stream_in){\n#pragma HLS pipeline\n#pragma HLS inline off\n#pragma HLS interface port=return register\n    return stream_in;\n}\nstatic float SEIDEL2D_stencil_kernel(float in_0_1, float in_m1_1, float in_0_0,\n    float in_m1_0, float in_m1_m1, float in_0_m1, float in_1_m1, float in_1_1)\n{\n    /*\n        ((stream_in(-1, -1) + stream_in(0, -1) + stream_in(1, -1) + stream_in(-1, 0) + stream_in(0, 0) + stream_in(0, 1) + stream_in(-1, 1) + stream_in(0, 1) + stream_in(1, 1)) / 9)\n    */\n    float temp_1 = in_m1_m1 + in_0_m1;\n    float temp_2 = in_1_m1 + in_m1_0;\n    float temp_3 = in_0_0 + in_0_1;\n    float temp_4 = in_m1_1 + in_0_1;\n    float temp_5 = temp_1 + temp_2;\n    float temp_6 = temp_3 + temp_4;\n    float temp_7 = temp_5 + temp_6;\n    float temp_8 = (temp_7 + in_1_1) / (float)9;\n    return temp_8;\n    // return ((in_m1_m1 + in_0_m1 + in_1_m1 + in_m1_0 + in_0_0 + in_0_1 + in_m1_1 + in_0_1 + in_1_1) / (float)9);\n} // stencil kernel definition\nvoid SEIDEL2D(tapa::istream<ap_uint<512> >& stream_in, tapa::ostream<ap_uint<512> >& stream_out, //int useless,\n                uint32_t iters\n              )\n{\n#pragma HLS disaggregate variable = stream_in\n#pragma HLS interface ap_fifo port = stream_in._\n#pragma HLS aggregate variable = stream_in._ bit\n#pragma HLS interface ap_fifo port = stream_in._peek\n#pragma HLS aggregate variable = stream_in._peek bit\nvoid(stream_in._.empty());\nvoid(stream_in._peek.empty());\n\n#pragma HLS disaggregate variable = stream_out\n#pragma HLS interface ap_fifo port = stream_out._\n#pragma HLS aggregate variable = stream_out._ bit\nvoid(stream_out._.full());\n\n\n    ap_uint<512> in_block_m65;\n    ap_uint<512> in_block_m64;\n    ap_uint<512> in_block_m63;\n    hls::stream<ap_uint<512>, 62> in_stream_m62_to_m2;\n    ap_uint<512> in_block_m1;\n    ap_uint<512> in_block_0;\n    ap_uint<512> in_block_1;\n    hls::stream<ap_uint<512>, 62> in_stream_2_to_62;\n    ap_uint<512> in_block_63;\n    ap_uint<512> in_block_64;\n    ap_uint<512> in_block_65;\n  for(int m = 0; m < iters; m+=1){\n    in_block_m65 = stream_in.read();\n    in_block_m64 = stream_in.read();\n    in_block_m63 = stream_in.read();\n    for (int i = 65 + -62; i < 65 + -1; i++) {\n        in_stream_m62_to_m2 << stream_in.read();\n    }\n    in_block_m1 = stream_in.read();\n    in_block_0 = stream_in.read();\n    in_block_1 = stream_in.read();\n    for (int i = 65 + 2; i < 65 + 63; i++) {\n        in_stream_2_to_62 << stream_in.read();\n    }\n    in_block_63 = stream_in.read();\n    in_block_64 = stream_in.read();\n    in_block_65 = stream_in.read();\n    int i;\n    MAJOR_LOOP:\n    for (i = 0; i < 1024/WIDTH_FACTOR*60 / 12 + (65 +66)*(iters-1); i++) {\n#pragma HLS pipeline II=1\n        ap_uint<512> out_temp;\n        COMPUTE_LOOP:\n        for (int k = 0; k < 16; k++) {\n#pragma HLS unroll\n            float in_0_1[16], in_m1_1[16], in_0_0[16], in_m1_0[16], in_m1_m1[16], in_0_m1[16], in_1_m1[16], in_1_1[16];\n#pragma HLS array_partition variable=in_0_1 complete dim=0\n#pragma HLS array_partition variable=in_m1_1 complete dim=0\n#pragma HLS array_partition variable=in_0_0 complete dim=0\n#pragma HLS array_partition variable=in_m1_0 complete dim=0\n#pragma HLS array_partition variable=in_m1_m1 complete dim=0\n#pragma HLS array_partition variable=in_0_m1 complete dim=0\n#pragma HLS array_partition variable=in_1_m1 complete dim=0\n#pragma HLS array_partition variable=in_1_1 complete dim=0\n            unsigned int idx_k = k << 5;\n            uint32_t temp_in_0_1 = (k<15)?in_block_0.range(idx_k + 63, idx_k + 32) : in_block_1.range(idx_k + -449, idx_k + -480);\n            in_0_1[k] = *((float*)(&temp_in_0_1));\n            uint32_t temp_in_m1_1 = (k<15)?in_block_m64.range(idx_k + 63, idx_k + 32) : in_block_m63.range(idx_k + -449, idx_k + -480);\n            in_m1_1[k] = *((float*)(&temp_in_m1_1));\n            uint32_t temp_in_0_0 = in_block_0.range(idx_k+31, idx_k);\n            in_0_0[k] = *((float*)(&temp_in_0_0));\n            uint32_t temp_in_m1_0 = in_block_m64.range(idx_k+31, idx_k);\n            in_m1_0[k] = *((float*)(&temp_in_m1_0));\n            uint32_t temp_in_m1_m1 = (k<1)?in_block_m65.range(idx_k + 511, idx_k + 480) : in_block_m64.range(idx_k + -1, idx_k + -32);\n            in_m1_m1[k] = *((float*)(&temp_in_m1_m1));\n            uint32_t temp_in_0_m1 = (k<1)?in_block_m1.range(idx_k + 511, idx_k + 480) : in_block_0.range(idx_k + -1, idx_k + -32);\n            in_0_m1[k] = *((float*)(&temp_in_0_m1));\n            uint32_t temp_in_1_m1 = (k<1)?in_block_63.range(idx_k + 511, idx_k + 480) : in_block_64.range(idx_k + -1, idx_k + -32);\n            in_1_m1[k] = *((float*)(&temp_in_1_m1));\n            uint32_t temp_in_1_1 = (k<15)?in_block_64.range(idx_k + 63, idx_k + 32) : in_block_65.range(idx_k + -449, idx_k + -480);\n            in_1_1[k] = *((float*)(&temp_in_1_1));\n            //Original version\n            float result = SEIDEL2D_stencil_kernel(in_0_1[k], in_m1_1[k], in_0_0[k], in_m1_0[k], in_m1_m1[k], in_0_m1[k], in_1_m1[k], in_1_1[k]);\n            out_temp.range(idx_k+31, idx_k) = *((uint32_t *)(&result));\n            // out[i + TOP_APPEND + OVERLAP_TOP_OVERHEAD].range(idx_k+31, idx_k) = *((uint32_t *)(&result));\n        }\n        stream_out.write(out_temp);\n        in_block_m65 = HLS_REG(in_block_m64);\n        in_block_m64 = HLS_REG(in_block_m63);\n        in_block_m63 = in_stream_m62_to_m2.read();\n        in_stream_m62_to_m2 << HLS_REG(in_block_m1);\n        in_block_m1 = HLS_REG(in_block_0);\n        in_block_0 = HLS_REG(in_block_1);\n        in_block_1 = in_stream_2_to_62.read();\n        in_stream_2_to_62 << HLS_REG(in_block_63);\n        in_block_63 = HLS_REG(in_block_64);\n        in_block_64 = HLS_REG(in_block_65);\n        //unsigned int idx_in = 65 + (i + 66);\n        // in_block_65 = HLS_REG(in[idx_in]);\n        in_block_65 = HLS_REG(stream_in.read());\n    }\n    ap_uint<512> popout_in_stream_m62_to_m2;\n    while(!in_stream_m62_to_m2.empty()){\n    // for (int i = 0; i < 61; i++) {\n#pragma HLS pipeline II=1\n        in_stream_m62_to_m2 >> popout_in_stream_m62_to_m2;\n    }\n    ap_uint<512> popout_in_stream_2_to_62;\n    while(!in_stream_2_to_62.empty()){\n    // for (int i = 0; i < 61; i++) {\n#pragma HLS pipeline II=1\n        in_stream_2_to_62 >> popout_in_stream_2_to_62;\n    }\n  }//206\n} // stencil kernel definition\nvoid load(tapa::async_mmap<ap_uint<512> >& a, tapa::async_mmap<ap_uint<512> >& b,\n                tapa::ostream<ap_uint<512> > &stream_out, tapa::istream<ap_uint<512> > &stream_in,\n                uint32_t iters) {\n#pragma HLS inline off\n  unsigned int loop_bound = 1024/WIDTH_FACTOR*60 / 12 + (65 +66)*(iters-1) + 65 + 66;\n  for(int k_wr_req = (65 + 66), k_wr_resp = (65 + 66 ), k_rd_req = 0, k_rd_resp = 0; k_rd_resp < loop_bound || k_wr_resp < loop_bound; ) {\n    // read from a\n    if (k_rd_req < loop_bound && a.read_addr.try_write(k_rd_req)) {\n      k_rd_req++;\n    }\n    if (k_rd_resp < loop_bound && !a.read_data.empty() && !stream_out.full()) {\n      ap_uint<512> temp = a.read_data.read(nullptr);\n      stream_out.write(temp);\n      k_rd_resp++;\n    }\n    // write to b\n    if (k_wr_req < loop_bound && !b.write_addr.full() && !b.write_data.full() && !stream_in.empty()) {\n      b.write_addr.write(k_wr_req);\n      b.write_data.write(stream_in.read());\n      k_wr_req++;\n    }\n    if (!b.write_resp.empty()) {\n      k_wr_resp += (unsigned int)(b.write_resp.read()) + 1;\n    }\n  }\n}\n//Block reading\nvoid inter_kernel(uint64_t  a, uint64_t  b,\n                tapa::ostream<ap_uint<512> > &stream_out, tapa::istream<ap_uint<512> > &stream_in,\n                uint32_t iters);\nvoid unikernel(uint64_t  in_0, uint64_t  out_0, //HBM 0 1\n               uint64_t  in_1, uint64_t  out_1,\n               uint64_t  in_2, uint64_t  out_2,\n               uint64_t  in_3, uint64_t  out_3,\n               uint64_t  in_4, uint64_t  out_4,\n               uint64_t  in_5, uint64_t  out_5,\n               uint64_t  in_6, uint64_t  out_6,\n               uint64_t  in_7, uint64_t  out_7,\n               uint64_t  in_8, uint64_t  out_8,\n               uint64_t  in_9, uint64_t  out_9,\n               uint64_t  in_10, uint64_t  out_10,\n               uint64_t  in_11, uint64_t  out_11,\n                uint32_t iters);\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "inter_kernel": {
            "code": "\n\n #include <hls_stream.h>\n\n#include \"math.h\"\n\n// #define GRID_ROWS 9720\n\n\n #include <ap_int.h>\n\n#include <inttypes.h>\n\n const int WIDTH_FACTOR = 512/32;\n// #define OVERLAP_TOP_OVERHEAD 8255\n// #define OVERLAP_BOTTOM_OVERHEAD 8382\n\n\n #include <tapa.h>\n\ntemplate<class T>\nT HLS_REG(T stream_in){\n#pragma HLS pipeline\n#pragma HLS inline off\n#pragma HLS interface port=return register\n    return stream_in;\n}\nstatic float SEIDEL2D_stencil_kernel(float in_0_1, float in_m1_1, float in_0_0,\n    float in_m1_0, float in_m1_m1, float in_0_m1, float in_1_m1, float in_1_1)\n{\n    /*\n        ((stream_in(-1, -1) + stream_in(0, -1) + stream_in(1, -1) + stream_in(-1, 0) + stream_in(0, 0) + stream_in(0, 1) + stream_in(-1, 1) + stream_in(0, 1) + stream_in(1, 1)) / 9)\n    */\n    float temp_1 = in_m1_m1 + in_0_m1;\n    float temp_2 = in_1_m1 + in_m1_0;\n    float temp_3 = in_0_0 + in_0_1;\n    float temp_4 = in_m1_1 + in_0_1;\n    float temp_5 = temp_1 + temp_2;\n    float temp_6 = temp_3 + temp_4;\n    float temp_7 = temp_5 + temp_6;\n    float temp_8 = (temp_7 + in_1_1) / (float)9;\n    return temp_8;\n    // return ((in_m1_m1 + in_0_m1 + in_1_m1 + in_m1_0 + in_0_0 + in_0_1 + in_m1_1 + in_0_1 + in_1_1) / (float)9);\n} // stencil kernel definition\nvoid SEIDEL2D(tapa::istream<ap_uint<512> >& stream_in, tapa::ostream<ap_uint<512> >& stream_out, //int useless,\n                uint32_t iters\n              )\n; // stencil kernel definition\nvoid load(tapa::async_mmap<ap_uint<512> >& a, tapa::async_mmap<ap_uint<512> >& b,\n                tapa::ostream<ap_uint<512> > &stream_out, tapa::istream<ap_uint<512> > &stream_in,\n                uint32_t iters) {\n#pragma HLS inline off\n  unsigned int loop_bound = 1024/WIDTH_FACTOR*60 / 12 + (65 +66)*(iters-1) + 65 + 66;\n  for(int k_wr_req = (65 + 66), k_wr_resp = (65 + 66 ), k_rd_req = 0, k_rd_resp = 0; k_rd_resp < loop_bound || k_wr_resp < loop_bound; ) {\n    // read from a\n    if (k_rd_req < loop_bound && a.read_addr.try_write(k_rd_req)) {\n      k_rd_req++;\n    }\n    if (k_rd_resp < loop_bound && !a.read_data.empty() && !stream_out.full()) {\n      ap_uint<512> temp = a.read_data.read(nullptr);\n      stream_out.write(temp);\n      k_rd_resp++;\n    }\n    // write to b\n    if (k_wr_req < loop_bound && !b.write_addr.full() && !b.write_data.full() && !stream_in.empty()) {\n      b.write_addr.write(k_wr_req);\n      b.write_data.write(stream_in.read());\n      k_wr_req++;\n    }\n    if (!b.write_resp.empty()) {\n      k_wr_resp += (unsigned int)(b.write_resp.read()) + 1;\n    }\n  }\n}\n//Block reading\nvoid inter_kernel(tapa::async_mmap<ap_uint<512> >& a, tapa::async_mmap<ap_uint<512> >& b,\n                tapa::ostream<ap_uint<512> > &stream_out, tapa::istream<ap_uint<512> > &stream_in,\n                uint32_t iters){\n#pragma HLS disaggregate variable = a\n#pragma HLS interface ap_fifo port = a.read_addr._\n#pragma HLS aggregate variable = a.read_addr._  bit\n#pragma HLS interface ap_fifo port = a.read_data._\n#pragma HLS aggregate variable = a.read_data._  bit\n#pragma HLS interface ap_fifo port = a.write_addr._\n#pragma HLS aggregate variable = a.write_addr._  bit\n#pragma HLS interface ap_fifo port = a.write_data._\n#pragma HLS aggregate variable = a.write_data._  bit\n#pragma HLS interface ap_fifo port = a.write_resp._\n#pragma HLS aggregate variable = a.write_resp._  bit\n#pragma HLS disaggregate variable = a .read_data\n#pragma HLS interface ap_fifo port = a.read_data._peek\n#pragma HLS aggregate variable = a.read_data._peek bit\n#pragma HLS disaggregate variable = a .write_resp\n#pragma HLS interface ap_fifo port = a.write_resp._peek\n#pragma HLS aggregate variable = a.write_resp._peek bit\nvoid(a.read_addr._.full());\nvoid(a.read_data._.empty());\nvoid(a.read_data._peek.empty());\nvoid(a.write_addr._.full());\nvoid(a.write_data._.full());\nvoid(a.write_resp._.empty());\nvoid(a.write_resp._peek.empty());\n\n#pragma HLS disaggregate variable = b\n#pragma HLS interface ap_fifo port = b.read_addr._\n#pragma HLS aggregate variable = b.read_addr._  bit\n#pragma HLS interface ap_fifo port = b.read_data._\n#pragma HLS aggregate variable = b.read_data._  bit\n#pragma HLS interface ap_fifo port = b.write_addr._\n#pragma HLS aggregate variable = b.write_addr._  bit\n#pragma HLS interface ap_fifo port = b.write_data._\n#pragma HLS aggregate variable = b.write_data._  bit\n#pragma HLS interface ap_fifo port = b.write_resp._\n#pragma HLS aggregate variable = b.write_resp._  bit\n#pragma HLS disaggregate variable = b .read_data\n#pragma HLS interface ap_fifo port = b.read_data._peek\n#pragma HLS aggregate variable = b.read_data._peek bit\n#pragma HLS disaggregate variable = b .write_resp\n#pragma HLS interface ap_fifo port = b.write_resp._peek\n#pragma HLS aggregate variable = b.write_resp._peek bit\nvoid(b.read_addr._.full());\nvoid(b.read_data._.empty());\nvoid(b.read_data._peek.empty());\nvoid(b.write_addr._.full());\nvoid(b.write_data._.full());\nvoid(b.write_resp._.empty());\nvoid(b.write_resp._peek.empty());\n\n#pragma HLS disaggregate variable = stream_out\n#pragma HLS interface ap_fifo port = stream_out._\n#pragma HLS aggregate variable = stream_out._ bit\nvoid(stream_out._.full());\n\n#pragma HLS disaggregate variable = stream_in\n#pragma HLS interface ap_fifo port = stream_in._\n#pragma HLS aggregate variable = stream_in._ bit\n#pragma HLS interface ap_fifo port = stream_in._peek\n#pragma HLS aggregate variable = stream_in._peek bit\nvoid(stream_in._.empty());\nvoid(stream_in._peek.empty());\n\n\n  for(int i = 0; i < iters; i+=1){\n    if(i%(2*1)==0){\n      load(a, b, stream_out, stream_in, iters);\n    }\n    else{\n      load(b, a, stream_out, stream_in, iters);\n    }\n  }\n}\nvoid unikernel(uint64_t  in_0, uint64_t  out_0, //HBM 0 1\n               uint64_t  in_1, uint64_t  out_1,\n               uint64_t  in_2, uint64_t  out_2,\n               uint64_t  in_3, uint64_t  out_3,\n               uint64_t  in_4, uint64_t  out_4,\n               uint64_t  in_5, uint64_t  out_5,\n               uint64_t  in_6, uint64_t  out_6,\n               uint64_t  in_7, uint64_t  out_7,\n               uint64_t  in_8, uint64_t  out_8,\n               uint64_t  in_9, uint64_t  out_9,\n               uint64_t  in_10, uint64_t  out_10,\n               uint64_t  in_11, uint64_t  out_11,\n                uint32_t iters);\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "unikernel": {
            "code": "\n\n #include <hls_stream.h>\n\n#include \"math.h\"\n\n// #define GRID_ROWS 9720\n\n\n #include <ap_int.h>\n\n#include <inttypes.h>\n\n const int WIDTH_FACTOR = 512/32;\n// #define OVERLAP_TOP_OVERHEAD 8255\n// #define OVERLAP_BOTTOM_OVERHEAD 8382\n\n\n #include <tapa.h>\n\ntemplate<class T>\nT HLS_REG(T stream_in){\n#pragma HLS pipeline\n#pragma HLS inline off\n#pragma HLS interface port=return register\n    return stream_in;\n}\nstatic float SEIDEL2D_stencil_kernel(float in_0_1, float in_m1_1, float in_0_0,\n    float in_m1_0, float in_m1_m1, float in_0_m1, float in_1_m1, float in_1_1)\n{\n    /*\n        ((stream_in(-1, -1) + stream_in(0, -1) + stream_in(1, -1) + stream_in(-1, 0) + stream_in(0, 0) + stream_in(0, 1) + stream_in(-1, 1) + stream_in(0, 1) + stream_in(1, 1)) / 9)\n    */\n    float temp_1 = in_m1_m1 + in_0_m1;\n    float temp_2 = in_1_m1 + in_m1_0;\n    float temp_3 = in_0_0 + in_0_1;\n    float temp_4 = in_m1_1 + in_0_1;\n    float temp_5 = temp_1 + temp_2;\n    float temp_6 = temp_3 + temp_4;\n    float temp_7 = temp_5 + temp_6;\n    float temp_8 = (temp_7 + in_1_1) / (float)9;\n    return temp_8;\n    // return ((in_m1_m1 + in_0_m1 + in_1_m1 + in_m1_0 + in_0_0 + in_0_1 + in_m1_1 + in_0_1 + in_1_1) / (float)9);\n} // stencil kernel definition\nvoid SEIDEL2D(tapa::istream<ap_uint<512> >& stream_in, tapa::ostream<ap_uint<512> >& stream_out, //int useless,\n                uint32_t iters\n              )\n; // stencil kernel definition\nvoid load(tapa::async_mmap<ap_uint<512> >& a, tapa::async_mmap<ap_uint<512> >& b,\n                tapa::ostream<ap_uint<512> > &stream_out, tapa::istream<ap_uint<512> > &stream_in,\n                uint32_t iters) {\n#pragma HLS inline off\n  unsigned int loop_bound = 1024/WIDTH_FACTOR*60 / 12 + (65 +66)*(iters-1) + 65 + 66;\n  for(int k_wr_req = (65 + 66), k_wr_resp = (65 + 66 ), k_rd_req = 0, k_rd_resp = 0; k_rd_resp < loop_bound || k_wr_resp < loop_bound; ) {\n    // read from a\n    if (k_rd_req < loop_bound && a.read_addr.try_write(k_rd_req)) {\n      k_rd_req++;\n    }\n    if (k_rd_resp < loop_bound && !a.read_data.empty() && !stream_out.full()) {\n      ap_uint<512> temp = a.read_data.read(nullptr);\n      stream_out.write(temp);\n      k_rd_resp++;\n    }\n    // write to b\n    if (k_wr_req < loop_bound && !b.write_addr.full() && !b.write_data.full() && !stream_in.empty()) {\n      b.write_addr.write(k_wr_req);\n      b.write_data.write(stream_in.read());\n      k_wr_req++;\n    }\n    if (!b.write_resp.empty()) {\n      k_wr_resp += (unsigned int)(b.write_resp.read()) + 1;\n    }\n  }\n}\n//Block reading\nvoid inter_kernel(uint64_t  a, uint64_t  b,\n                tapa::ostream<ap_uint<512> > &stream_out, tapa::istream<ap_uint<512> > &stream_in,\n                uint32_t iters);\nextern \"C\" {\n\nvoid unikernel(uint64_t  in_0, uint64_t  out_0, //HBM 0 1\n               uint64_t  in_1, uint64_t  out_1,\n               uint64_t  in_2, uint64_t  out_2,\n               uint64_t  in_3, uint64_t  out_3,\n               uint64_t  in_4, uint64_t  out_4,\n               uint64_t  in_5, uint64_t  out_5,\n               uint64_t  in_6, uint64_t  out_6,\n               uint64_t  in_7, uint64_t  out_7,\n               uint64_t  in_8, uint64_t  out_8,\n               uint64_t  in_9, uint64_t  out_9,\n               uint64_t  in_10, uint64_t  out_10,\n               uint64_t  in_11, uint64_t  out_11,\n                uint32_t iters){\n\n#pragma HLS interface s_axilite port = in_0 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_0); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_0); }\n\n#pragma HLS interface s_axilite port = out_0 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_0); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_0); }\n\n#pragma HLS interface s_axilite port = in_1 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_1); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_1); }\n\n#pragma HLS interface s_axilite port = out_1 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_1); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_1); }\n\n#pragma HLS interface s_axilite port = in_2 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_2); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_2); }\n\n#pragma HLS interface s_axilite port = out_2 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_2); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_2); }\n\n#pragma HLS interface s_axilite port = in_3 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_3); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_3); }\n\n#pragma HLS interface s_axilite port = out_3 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_3); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_3); }\n\n#pragma HLS interface s_axilite port = in_4 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_4); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_4); }\n\n#pragma HLS interface s_axilite port = out_4 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_4); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_4); }\n\n#pragma HLS interface s_axilite port = in_5 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_5); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_5); }\n\n#pragma HLS interface s_axilite port = out_5 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_5); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_5); }\n\n#pragma HLS interface s_axilite port = in_6 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_6); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_6); }\n\n#pragma HLS interface s_axilite port = out_6 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_6); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_6); }\n\n#pragma HLS interface s_axilite port = in_7 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_7); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_7); }\n\n#pragma HLS interface s_axilite port = out_7 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_7); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_7); }\n\n#pragma HLS interface s_axilite port = in_8 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_8); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_8); }\n\n#pragma HLS interface s_axilite port = out_8 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_8); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_8); }\n\n#pragma HLS interface s_axilite port = in_9 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_9); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_9); }\n\n#pragma HLS interface s_axilite port = out_9 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_9); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_9); }\n\n#pragma HLS interface s_axilite port = in_10 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_10); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_10); }\n\n#pragma HLS interface s_axilite port = out_10 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_10); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_10); }\n\n#pragma HLS interface s_axilite port = in_11 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_11); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_11); }\n\n#pragma HLS interface s_axilite port = out_11 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_11); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(out_11); }\n\n#pragma HLS interface s_axilite port = iters bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(iters); }\n\n\n#pragma HLS interface s_axilite port = return bundle = control\n}\n\n\n}  // extern \"C\"\n\n",
            "fifos": {
                "k_rd_unikernel[0]": {
                    "consumed_by": [
                        "SEIDEL2D",
                        0
                    ],
                    "depth": 3,
                    "produced_by": [
                        "inter_kernel",
                        0
                    ]
                },
                "k_rd_unikernel[10]": {
                    "consumed_by": [
                        "SEIDEL2D",
                        10
                    ],
                    "depth": 3,
                    "produced_by": [
                        "inter_kernel",
                        10
                    ]
                },
                "k_rd_unikernel[11]": {
                    "consumed_by": [
                        "SEIDEL2D",
                        11
                    ],
                    "depth": 3,
                    "produced_by": [
                        "inter_kernel",
                        11
                    ]
                },
                "k_rd_unikernel[1]": {
                    "consumed_by": [
                        "SEIDEL2D",
                        1
                    ],
                    "depth": 3,
                    "produced_by": [
                        "inter_kernel",
                        1
                    ]
                },
                "k_rd_unikernel[2]": {
                    "consumed_by": [
                        "SEIDEL2D",
                        2
                    ],
                    "depth": 3,
                    "produced_by": [
                        "inter_kernel",
                        2
                    ]
                },
                "k_rd_unikernel[3]": {
                    "consumed_by": [
                        "SEIDEL2D",
                        3
                    ],
                    "depth": 3,
                    "produced_by": [
                        "inter_kernel",
                        3
                    ]
                },
                "k_rd_unikernel[4]": {
                    "consumed_by": [
                        "SEIDEL2D",
                        4
                    ],
                    "depth": 3,
                    "produced_by": [
                        "inter_kernel",
                        4
                    ]
                },
                "k_rd_unikernel[5]": {
                    "consumed_by": [
                        "SEIDEL2D",
                        5
                    ],
                    "depth": 3,
                    "produced_by": [
                        "inter_kernel",
                        5
                    ]
                },
                "k_rd_unikernel[6]": {
                    "consumed_by": [
                        "SEIDEL2D",
                        6
                    ],
                    "depth": 3,
                    "produced_by": [
                        "inter_kernel",
                        6
                    ]
                },
                "k_rd_unikernel[7]": {
                    "consumed_by": [
                        "SEIDEL2D",
                        7
                    ],
                    "depth": 3,
                    "produced_by": [
                        "inter_kernel",
                        7
                    ]
                },
                "k_rd_unikernel[8]": {
                    "consumed_by": [
                        "SEIDEL2D",
                        8
                    ],
                    "depth": 3,
                    "produced_by": [
                        "inter_kernel",
                        8
                    ]
                },
                "k_rd_unikernel[9]": {
                    "consumed_by": [
                        "SEIDEL2D",
                        9
                    ],
                    "depth": 3,
                    "produced_by": [
                        "inter_kernel",
                        9
                    ]
                },
                "k_wr_unikernel[0]": {
                    "consumed_by": [
                        "inter_kernel",
                        0
                    ],
                    "depth": 3,
                    "produced_by": [
                        "SEIDEL2D",
                        0
                    ]
                },
                "k_wr_unikernel[10]": {
                    "consumed_by": [
                        "inter_kernel",
                        10
                    ],
                    "depth": 3,
                    "produced_by": [
                        "SEIDEL2D",
                        10
                    ]
                },
                "k_wr_unikernel[11]": {
                    "consumed_by": [
                        "inter_kernel",
                        11
                    ],
                    "depth": 3,
                    "produced_by": [
                        "SEIDEL2D",
                        11
                    ]
                },
                "k_wr_unikernel[1]": {
                    "consumed_by": [
                        "inter_kernel",
                        1
                    ],
                    "depth": 3,
                    "produced_by": [
                        "SEIDEL2D",
                        1
                    ]
                },
                "k_wr_unikernel[2]": {
                    "consumed_by": [
                        "inter_kernel",
                        2
                    ],
                    "depth": 3,
                    "produced_by": [
                        "SEIDEL2D",
                        2
                    ]
                },
                "k_wr_unikernel[3]": {
                    "consumed_by": [
                        "inter_kernel",
                        3
                    ],
                    "depth": 3,
                    "produced_by": [
                        "SEIDEL2D",
                        3
                    ]
                },
                "k_wr_unikernel[4]": {
                    "consumed_by": [
                        "inter_kernel",
                        4
                    ],
                    "depth": 3,
                    "produced_by": [
                        "SEIDEL2D",
                        4
                    ]
                },
                "k_wr_unikernel[5]": {
                    "consumed_by": [
                        "inter_kernel",
                        5
                    ],
                    "depth": 3,
                    "produced_by": [
                        "SEIDEL2D",
                        5
                    ]
                },
                "k_wr_unikernel[6]": {
                    "consumed_by": [
                        "inter_kernel",
                        6
                    ],
                    "depth": 3,
                    "produced_by": [
                        "SEIDEL2D",
                        6
                    ]
                },
                "k_wr_unikernel[7]": {
                    "consumed_by": [
                        "inter_kernel",
                        7
                    ],
                    "depth": 3,
                    "produced_by": [
                        "SEIDEL2D",
                        7
                    ]
                },
                "k_wr_unikernel[8]": {
                    "consumed_by": [
                        "inter_kernel",
                        8
                    ],
                    "depth": 3,
                    "produced_by": [
                        "SEIDEL2D",
                        8
                    ]
                },
                "k_wr_unikernel[9]": {
                    "consumed_by": [
                        "inter_kernel",
                        9
                    ],
                    "depth": 3,
                    "produced_by": [
                        "SEIDEL2D",
                        9
                    ]
                }
            },
            "frt_interface": "#include <sstream>\n#include <stdexcept>\n#include <frt.h>\n\n\n\n #include <hls_stream.h>\n\n#include \"math.h\"\n\n// #define GRID_ROWS 9720\n\n\n #include <ap_int.h>\n\n#include <inttypes.h>\n\n const int WIDTH_FACTOR = 512/32;\n// #define OVERLAP_TOP_OVERHEAD 8255\n// #define OVERLAP_BOTTOM_OVERHEAD 8382\n\n\n #include <tapa.h>\n\ntemplate<class T>\nT HLS_REG(T stream_in){\n#pragma HLS pipeline\n#pragma HLS inline off\n#pragma HLS interface port=return register\n    return stream_in;\n}\nstatic float SEIDEL2D_stencil_kernel(float in_0_1, float in_m1_1, float in_0_0,\n    float in_m1_0, float in_m1_m1, float in_0_m1, float in_1_m1, float in_1_1)\n{\n    /*\n        ((stream_in(-1, -1) + stream_in(0, -1) + stream_in(1, -1) + stream_in(-1, 0) + stream_in(0, 0) + stream_in(0, 1) + stream_in(-1, 1) + stream_in(0, 1) + stream_in(1, 1)) / 9)\n    */\n    float temp_1 = in_m1_m1 + in_0_m1;\n    float temp_2 = in_1_m1 + in_m1_0;\n    float temp_3 = in_0_0 + in_0_1;\n    float temp_4 = in_m1_1 + in_0_1;\n    float temp_5 = temp_1 + temp_2;\n    float temp_6 = temp_3 + temp_4;\n    float temp_7 = temp_5 + temp_6;\n    float temp_8 = (temp_7 + in_1_1) / (float)9;\n    return temp_8;\n    // return ((in_m1_m1 + in_0_m1 + in_1_m1 + in_m1_0 + in_0_0 + in_0_1 + in_m1_1 + in_0_1 + in_1_1) / (float)9);\n} // stencil kernel definition\nvoid SEIDEL2D(tapa::istream<ap_uint<512> >& stream_in, tapa::ostream<ap_uint<512> >& stream_out, //int useless,\n                uint32_t iters\n              )\n; // stencil kernel definition\nvoid load(tapa::async_mmap<ap_uint<512> >& a, tapa::async_mmap<ap_uint<512> >& b,\n                tapa::ostream<ap_uint<512> > &stream_out, tapa::istream<ap_uint<512> > &stream_in,\n                uint32_t iters) {\n#pragma HLS inline off\n  unsigned int loop_bound = 1024/WIDTH_FACTOR*60 / 12 + (65 +66)*(iters-1) + 65 + 66;\n  for(int k_wr_req = (65 + 66), k_wr_resp = (65 + 66 ), k_rd_req = 0, k_rd_resp = 0; k_rd_resp < loop_bound || k_wr_resp < loop_bound; ) {\n    // read from a\n    if (k_rd_req < loop_bound && a.read_addr.try_write(k_rd_req)) {\n      k_rd_req++;\n    }\n    if (k_rd_resp < loop_bound && !a.read_data.empty() && !stream_out.full()) {\n      ap_uint<512> temp = a.read_data.read(nullptr);\n      stream_out.write(temp);\n      k_rd_resp++;\n    }\n    // write to b\n    if (k_wr_req < loop_bound && !b.write_addr.full() && !b.write_data.full() && !stream_in.empty()) {\n      b.write_addr.write(k_wr_req);\n      b.write_data.write(stream_in.read());\n      k_wr_req++;\n    }\n    if (!b.write_resp.empty()) {\n      k_wr_resp += (unsigned int)(b.write_resp.read()) + 1;\n    }\n  }\n}\n//Block reading\nvoid inter_kernel(uint64_t  a, uint64_t  b,\n                tapa::ostream<ap_uint<512> > &stream_out, tapa::istream<ap_uint<512> > &stream_in,\n                uint32_t iters);\nvoid unikernel(tapa::mmap<ap_uint<512> > in_0, tapa::mmap<ap_uint<512> > out_0, //HBM 0 1\n               tapa::mmap<ap_uint<512> > in_1, tapa::mmap<ap_uint<512> > out_1,\n               tapa::mmap<ap_uint<512> > in_2, tapa::mmap<ap_uint<512> > out_2,\n               tapa::mmap<ap_uint<512> > in_3, tapa::mmap<ap_uint<512> > out_3,\n               tapa::mmap<ap_uint<512> > in_4, tapa::mmap<ap_uint<512> > out_4,\n               tapa::mmap<ap_uint<512> > in_5, tapa::mmap<ap_uint<512> > out_5,\n               tapa::mmap<ap_uint<512> > in_6, tapa::mmap<ap_uint<512> > out_6,\n               tapa::mmap<ap_uint<512> > in_7, tapa::mmap<ap_uint<512> > out_7,\n               tapa::mmap<ap_uint<512> > in_8, tapa::mmap<ap_uint<512> > out_8,\n               tapa::mmap<ap_uint<512> > in_9, tapa::mmap<ap_uint<512> > out_9,\n               tapa::mmap<ap_uint<512> > in_10, tapa::mmap<ap_uint<512> > out_10,\n               tapa::mmap<ap_uint<512> > in_11, tapa::mmap<ap_uint<512> > out_11,\n                uint32_t iters){\n#define TAPAB_APP \"TAPAB_unikernel\"\n#define TAPAB \"TAPAB\"\n  const char* _tapa_bitstream = nullptr;\n  if ((_tapa_bitstream = getenv(TAPAB_APP)) ||\n      (_tapa_bitstream = getenv(TAPAB))) {\n    fpga::Instance _tapa_instance(_tapa_bitstream);\n    int _tapa_arg_index = 0;\n    for (const auto& _tapa_arg_info : _tapa_instance.GetArgsInfo()) {\n      if (false) {\n      } else if (_tapa_arg_info.name == \"in_0\") {\n        auto _tapa_arg = fpga::ReadWrite(in_0.get(), in_0.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"out_0\") {\n        auto _tapa_arg = fpga::ReadWrite(out_0.get(), out_0.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_1\") {\n        auto _tapa_arg = fpga::ReadWrite(in_1.get(), in_1.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"out_1\") {\n        auto _tapa_arg = fpga::ReadWrite(out_1.get(), out_1.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_2\") {\n        auto _tapa_arg = fpga::ReadWrite(in_2.get(), in_2.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"out_2\") {\n        auto _tapa_arg = fpga::ReadWrite(out_2.get(), out_2.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_3\") {\n        auto _tapa_arg = fpga::ReadWrite(in_3.get(), in_3.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"out_3\") {\n        auto _tapa_arg = fpga::ReadWrite(out_3.get(), out_3.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_4\") {\n        auto _tapa_arg = fpga::ReadWrite(in_4.get(), in_4.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"out_4\") {\n        auto _tapa_arg = fpga::ReadWrite(out_4.get(), out_4.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_5\") {\n        auto _tapa_arg = fpga::ReadWrite(in_5.get(), in_5.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"out_5\") {\n        auto _tapa_arg = fpga::ReadWrite(out_5.get(), out_5.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_6\") {\n        auto _tapa_arg = fpga::ReadWrite(in_6.get(), in_6.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"out_6\") {\n        auto _tapa_arg = fpga::ReadWrite(out_6.get(), out_6.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_7\") {\n        auto _tapa_arg = fpga::ReadWrite(in_7.get(), in_7.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"out_7\") {\n        auto _tapa_arg = fpga::ReadWrite(out_7.get(), out_7.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_8\") {\n        auto _tapa_arg = fpga::ReadWrite(in_8.get(), in_8.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"out_8\") {\n        auto _tapa_arg = fpga::ReadWrite(out_8.get(), out_8.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_9\") {\n        auto _tapa_arg = fpga::ReadWrite(in_9.get(), in_9.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"out_9\") {\n        auto _tapa_arg = fpga::ReadWrite(out_9.get(), out_9.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_10\") {\n        auto _tapa_arg = fpga::ReadWrite(in_10.get(), in_10.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"out_10\") {\n        auto _tapa_arg = fpga::ReadWrite(out_10.get(), out_10.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_11\") {\n        auto _tapa_arg = fpga::ReadWrite(in_11.get(), in_11.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"out_11\") {\n        auto _tapa_arg = fpga::ReadWrite(out_11.get(), out_11.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"iters\") {\n        _tapa_instance.SetArg(_tapa_arg_index, iters);\n      } else {\n        std::stringstream ss;\n        ss << \"unknown argument: \" << _tapa_arg_info;\n        throw std::runtime_error(ss.str());\n      }\n      ++_tapa_arg_index;\n    }\n    _tapa_instance.WriteToDevice();\n    _tapa_instance.Exec();\n    _tapa_instance.ReadFromDevice();\n    _tapa_instance.Finish();\n  } else {\n    throw std::runtime_error(\"no bitstream found; please set `\" TAPAB_APP\n                             \"` or `\" TAPAB \"`\");\n  }\n}\n",
            "level": "upper",
            "ports": [
                {
                    "cat": "mmap",
                    "name": "in_0",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "out_0",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_1",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "out_1",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_2",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "out_2",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_3",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "out_3",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_4",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "out_4",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_5",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "out_5",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_6",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "out_6",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_7",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "out_7",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_8",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "out_8",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_9",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "out_9",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_10",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "out_10",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_11",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "out_11",
                    "type": "ap_uint<512>*",
                    "width": 512
                },
                {
                    "cat": "scalar",
                    "name": "iters",
                    "type": "uint32_t",
                    "width": 32
                }
            ],
            "target": "hls",
            "tasks": {
                "SEIDEL2D": [
                    {
                        "args": {
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_rd_unikernel[0]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_wr_unikernel[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_rd_unikernel[1]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_wr_unikernel[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_rd_unikernel[2]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_wr_unikernel[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_rd_unikernel[3]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_wr_unikernel[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_rd_unikernel[4]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_wr_unikernel[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_rd_unikernel[5]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_wr_unikernel[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_rd_unikernel[6]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_wr_unikernel[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_rd_unikernel[7]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_wr_unikernel[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_rd_unikernel[8]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_wr_unikernel[8]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_rd_unikernel[9]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_wr_unikernel[9]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_rd_unikernel[10]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_wr_unikernel[10]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_rd_unikernel[11]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_wr_unikernel[11]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ],
                "inter_kernel": [
                    {
                        "args": {
                            "a": {
                                "arg": "in_0",
                                "cat": "async_mmap"
                            },
                            "b": {
                                "arg": "out_0",
                                "cat": "async_mmap"
                            },
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_wr_unikernel[0]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_rd_unikernel[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "a": {
                                "arg": "in_1",
                                "cat": "async_mmap"
                            },
                            "b": {
                                "arg": "out_1",
                                "cat": "async_mmap"
                            },
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_wr_unikernel[1]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_rd_unikernel[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "a": {
                                "arg": "in_2",
                                "cat": "async_mmap"
                            },
                            "b": {
                                "arg": "out_2",
                                "cat": "async_mmap"
                            },
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_wr_unikernel[2]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_rd_unikernel[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "a": {
                                "arg": "in_3",
                                "cat": "async_mmap"
                            },
                            "b": {
                                "arg": "out_3",
                                "cat": "async_mmap"
                            },
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_wr_unikernel[3]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_rd_unikernel[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "a": {
                                "arg": "in_4",
                                "cat": "async_mmap"
                            },
                            "b": {
                                "arg": "out_4",
                                "cat": "async_mmap"
                            },
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_wr_unikernel[4]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_rd_unikernel[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "a": {
                                "arg": "in_5",
                                "cat": "async_mmap"
                            },
                            "b": {
                                "arg": "out_5",
                                "cat": "async_mmap"
                            },
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_wr_unikernel[5]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_rd_unikernel[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "a": {
                                "arg": "in_6",
                                "cat": "async_mmap"
                            },
                            "b": {
                                "arg": "out_6",
                                "cat": "async_mmap"
                            },
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_wr_unikernel[6]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_rd_unikernel[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "a": {
                                "arg": "in_7",
                                "cat": "async_mmap"
                            },
                            "b": {
                                "arg": "out_7",
                                "cat": "async_mmap"
                            },
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_wr_unikernel[7]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_rd_unikernel[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "a": {
                                "arg": "in_8",
                                "cat": "async_mmap"
                            },
                            "b": {
                                "arg": "out_8",
                                "cat": "async_mmap"
                            },
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_wr_unikernel[8]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_rd_unikernel[8]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "a": {
                                "arg": "in_9",
                                "cat": "async_mmap"
                            },
                            "b": {
                                "arg": "out_9",
                                "cat": "async_mmap"
                            },
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_wr_unikernel[9]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_rd_unikernel[9]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "a": {
                                "arg": "in_10",
                                "cat": "async_mmap"
                            },
                            "b": {
                                "arg": "out_10",
                                "cat": "async_mmap"
                            },
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_wr_unikernel[10]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_rd_unikernel[10]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "a": {
                                "arg": "in_11",
                                "cat": "async_mmap"
                            },
                            "b": {
                                "arg": "out_11",
                                "cat": "async_mmap"
                            },
                            "iters": {
                                "arg": "iters",
                                "cat": "scalar"
                            },
                            "stream_in": {
                                "arg": "k_wr_unikernel[11]",
                                "cat": "istream"
                            },
                            "stream_out": {
                                "arg": "k_rd_unikernel[11]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ]
            },
            "vendor": "xilinx"
        }
    },
    "top": "unikernel"
}
