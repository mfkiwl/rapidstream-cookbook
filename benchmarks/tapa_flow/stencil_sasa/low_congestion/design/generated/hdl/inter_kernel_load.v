// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

module inter_kernel_load (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_read_addr_din,
        b_read_addr_full_n,
        b_read_addr_write,
        b_read_data_s_dout,
        b_read_data_s_empty_n,
        b_read_data_s_read,
        a_write_addr_din,
        a_write_addr_full_n,
        a_write_addr_write,
        a_write_data_din,
        a_write_data_full_n,
        a_write_data_write,
        a_write_resp_s_dout,
        a_write_resp_s_empty_n,
        a_write_resp_s_read,
        stream_out_din,
        stream_out_full_n,
        stream_out_write,
        stream_in_s_dout,
        stream_in_s_empty_n,
        stream_in_s_read,
        iters
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [64:0] b_read_addr_din;
input   b_read_addr_full_n;
output   b_read_addr_write;
input  [512:0] b_read_data_s_dout;
input   b_read_data_s_empty_n;
output   b_read_data_s_read;
output  [64:0] a_write_addr_din;
input   a_write_addr_full_n;
output   a_write_addr_write;
output  [512:0] a_write_data_din;
input   a_write_data_full_n;
output   a_write_data_write;
input  [8:0] a_write_resp_s_dout;
input   a_write_resp_s_empty_n;
output   a_write_resp_s_read;
output  [512:0] stream_out_din;
input   stream_out_full_n;
output   stream_out_write;
input  [512:0] stream_in_s_dout;
input   stream_in_s_empty_n;
output   stream_in_s_read;
input  [31:0] iters;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg b_read_addr_write;
reg b_read_data_s_read;
reg a_write_addr_write;
reg a_write_data_write;
reg a_write_resp_s_read;
reg stream_out_write;
reg stream_in_s_read;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_61_p2;
reg   [31:0] mul_ln53_reg_78;
wire    ap_CS_fsm_state2;
wire   [31:0] loop_bound_fu_67_p2;
reg   [31:0] loop_bound_reg_83;
wire    ap_CS_fsm_state3;
wire    grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_start;
wire    grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_done;
wire    grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_idle;
wire    grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_ready;
wire    grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_resp_s_read;
wire   [64:0] grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_b_read_addr_din;
wire    grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_b_read_addr_write;
wire    grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_b_read_data_s_read;
wire   [512:0] grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_stream_out_din;
wire    grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_stream_out_write;
wire   [64:0] grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_addr_din;
wire    grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_addr_write;
wire   [512:0] grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_data_din;
wire    grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_data_write;
wire    grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_stream_in_s_read;
reg    grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [8:0] grp_fu_61_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_start_reg = 1'b0;
end

inter_kernel_load_Pipeline_VITIS_LOOP_54_1 grp_load_Pipeline_VITIS_LOOP_54_1_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_start),
    .ap_done(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_done),
    .ap_idle(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_idle),
    .ap_ready(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_ready),
    .a_write_resp_s_dout(a_write_resp_s_dout),
    .a_write_resp_s_empty_n(a_write_resp_s_empty_n),
    .a_write_resp_s_read(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_resp_s_read),
    .loop_bound(loop_bound_reg_83),
    .b_read_addr_din(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_b_read_addr_din),
    .b_read_addr_full_n(b_read_addr_full_n),
    .b_read_addr_write(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_b_read_addr_write),
    .b_read_data_s_dout(b_read_data_s_dout),
    .b_read_data_s_empty_n(b_read_data_s_empty_n),
    .b_read_data_s_read(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_b_read_data_s_read),
    .stream_out_din(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_stream_out_din),
    .stream_out_full_n(stream_out_full_n),
    .stream_out_write(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_stream_out_write),
    .a_write_addr_din(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_addr_din),
    .a_write_addr_full_n(a_write_addr_full_n),
    .a_write_addr_write(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_addr_write),
    .a_write_data_din(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_data_din),
    .a_write_data_full_n(a_write_data_full_n),
    .a_write_data_write(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_data_write),
    .stream_in_s_dout(stream_in_s_dout),
    .stream_in_s_empty_n(stream_in_s_empty_n),
    .stream_in_s_read(grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_stream_in_s_read)
);

inter_kernel_mul_32s_9ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 32 ))
mul_32s_9ns_32_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(iters),
    .din1(grp_fu_61_p1),
    .ce(1'b1),
    .dout(grp_fu_61_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_ready == 1'b1)) begin
            grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        loop_bound_reg_83 <= loop_bound_fu_67_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul_ln53_reg_78 <= grp_fu_61_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_write_addr_write = grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_addr_write;
    end else begin
        a_write_addr_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_write_data_write = grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_data_write;
    end else begin
        a_write_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_write_resp_s_read = grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_resp_s_read;
    end else begin
        a_write_resp_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_read_addr_write = grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_b_read_addr_write;
    end else begin
        b_read_addr_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_read_data_s_read = grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_b_read_data_s_read;
    end else begin
        b_read_data_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stream_in_s_read = grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_stream_in_s_read;
    end else begin
        stream_in_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stream_out_write = grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_stream_out_write;
    end else begin
        stream_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_write_addr_din = grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_addr_din;

assign a_write_data_din = grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_a_write_data_din;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign b_read_addr_din = grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_b_read_addr_din;

assign grp_fu_61_p1 = 32'd131;

assign grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_start = grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_ap_start_reg;

assign loop_bound_fu_67_p2 = (mul_ln53_reg_78 + 32'd320);

assign stream_out_din = grp_load_Pipeline_VITIS_LOOP_54_1_fu_42_stream_out_din;

endmodule //inter_kernel_load
