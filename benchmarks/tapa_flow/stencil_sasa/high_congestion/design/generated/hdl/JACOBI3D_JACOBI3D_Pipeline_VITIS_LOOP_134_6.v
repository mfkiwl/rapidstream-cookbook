// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

module JACOBI3D_JACOBI3D_Pipeline_VITIS_LOOP_134_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t1_stream_m3_to_m2_dout,
        t1_stream_m3_to_m2_empty_n,
        t1_stream_m3_to_m2_read
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] t1_stream_m3_to_m2_dout;
input   t1_stream_m3_to_m2_empty_n;
output   t1_stream_m3_to_m2_read;

reg ap_idle;
reg t1_stream_m3_to_m2_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_3_nbreadreq_fu_24_p3;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    t1_stream_m3_to_m2_blk_n;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_loop_init;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

JACOBI3D_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start_int == 1'b0) | ((tmp_3_nbreadreq_fu_24_p3 == 1'd1) & (t1_stream_m3_to_m2_empty_n == 1'b0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | ((tmp_3_nbreadreq_fu_24_p3 == 1'd1) & (t1_stream_m3_to_m2_empty_n == 1'b0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((tmp_3_nbreadreq_fu_24_p3 == 1'd1) & (t1_stream_m3_to_m2_empty_n == 1'b0))) & (tmp_3_nbreadreq_fu_24_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((tmp_3_nbreadreq_fu_24_p3 == 1'd1) & (t1_stream_m3_to_m2_empty_n == 1'b0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((tmp_3_nbreadreq_fu_24_p3 == 1'd1) & (t1_stream_m3_to_m2_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (tmp_3_nbreadreq_fu_24_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        t1_stream_m3_to_m2_blk_n = t1_stream_m3_to_m2_empty_n;
    end else begin
        t1_stream_m3_to_m2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((tmp_3_nbreadreq_fu_24_p3 == 1'd1) & (t1_stream_m3_to_m2_empty_n == 1'b0))) & (tmp_3_nbreadreq_fu_24_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        t1_stream_m3_to_m2_read = 1'b1;
    end else begin
        t1_stream_m3_to_m2_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((tmp_3_nbreadreq_fu_24_p3 == 1'd1) & (t1_stream_m3_to_m2_empty_n == 1'b0)));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign tmp_3_nbreadreq_fu_24_p3 = t1_stream_m3_to_m2_empty_n;

endmodule //JACOBI3D_JACOBI3D_Pipeline_VITIS_LOOP_134_6
