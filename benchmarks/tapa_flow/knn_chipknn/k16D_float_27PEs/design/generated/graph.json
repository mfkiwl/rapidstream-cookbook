{
    "cflags": [
        "-std=c++17",
        "-I",
        "/home/ylxiao/.local/lib/python3.8/site-packages/tapa/../../../src",
        "-isystem",
        "/tools/Xilinx/Vitis_HLS/2022.2/include"
    ],
    "tasks": {
        "Knn": {
            "code": "\n\n #include \"ap_int.h\"\n\n#include \"ap_axi_sdata.h\"\n\n#include <tapa.h>\n\n#include <inttypes.h>\n\n#include <stdlib.h>\n\n// CEIL_DIVISION(X, Y) = ceil(x/y).\n// ROUND_TO_NEXT_MULTIPLE(X, Y) rounds X up to the nearest multiple of Y.\nconst int IWIDTH = 512;\nconst int INPUT_DIM = 16;\nconst int TOP = 10;\n/***************************************************************/\n// L2I = Local to Interface\nconst int L2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * (32)) + 1 );\n// D2L = Data_Type to Local\nconst int D2L_FACTOR_W = ( ((32)-1)/32 + 1 );\n// D2I = Data_Type to Interface\nconst int D2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * 32) + 1 );\n// I2D = Interface to Data_type\nconst int I2D_FACTOR_W = ( ((INPUT_DIM * 32)-1)/IWIDTH + 1 );\n// // DEBUG NOTE: BW_FACTOR = 1.1349753694581282\n// Round up to the nearest multiple, because otherwise some logic breaks (incorrect sizes => bad logic in edgecases)\n// We partition the input points, so each PE gets it's own partition, to maximize parallelization.\nconst int PARTITION_LEN_IN_I = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / IWIDTH);\nconst int PARTITION_LEN_IN_D = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * 32));\nconst int PARTITION_LEN_IN_L = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * (32)));\n// We name each sub-array of the local_distance arrays a \"segment\".\n//const int SWIDTH = DATA_TYPE_TOTAL_SZ; \n//typedef ap_axiu<SWIDTH, 0, 0, 0> pkt; \n//typedef ap_axiu<32, 0, 0, 0>    id_pkt;\n//#define STREAM_WIDTH ap_uint<SWIDTH> \nconst int NUM_FEATURES_PER_READ = (IWIDTH/32);\nconst int QUERY_FEATURE_RESERVE = (128);\nstatic inline float absval(float input){\n    return (input > 0 ? input : static_cast<float>(-1*input));\n}\n// purposefully empty #define\n/*************************************************/\n/******************** LOADS: *********************/\n/*************************************************/\nvoid load_KNN( int debug_PE_ID,\n                 uint64_t  searchSpace,\n                 tapa::ostream<ap_uint<IWIDTH> >& load_to_compute_stream)\n;\n/*************************************************/\n/******************* COMPUTES: *******************/\n/*************************************************/\nvoid compute_KNN( int debug_pe_idx,\n                    int debug_start_idx,\n                    tapa::istream<ap_uint<IWIDTH> >& load_to_compute_stream,\n                    tapa::ostreams<float, (L2I_FACTOR_W * 2)>& compute_to_sort_stream)\n;\nvoid swap(float* a, float* b,\n               int* x, int* y)\n{\n#pragma HLS INLINE\n    float tmpdist_a;\n    float tmpdist_b;\n    int tmpid_x;\n    int tmpid_y;\n    tmpdist_a = *a;\n    tmpdist_b = *b;\n    *b = tmpdist_a;\n    *a = tmpdist_b;\n    tmpid_x = *x;\n    tmpid_y = *y;\n    *x = tmpid_y;\n    *y = tmpid_x;\n}\nvoid para_partial_sort(const int PE_idx,\n                       int seg_idx,\n                       tapa::istream<float>& compute_to_sort_stream,\n                       tapa::ostream<float>& sort_to_hiermerge_dist_stream_0,\n                       tapa::ostream<int>& sort_to_hiermerge_id_stream_0)\n;\nvoid merge_dual_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid merge_trio_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid write_out_mmap(\n                    tapa::async_mmap<float>& output_knnDist,\n                    tapa::async_mmap<int>& output_knnId,\n                    float output_dist,\n                    int output_id,\n                    int& i_req_dist,\n                    int& i_resp_dist,\n                    int& i_req_id,\n                    int& i_resp_id\n) {\n#pragma HLS INLINE\n    // Writing the distance values:\n    if (i_req_dist < TOP && i_req_dist >= 0 &&\n        !output_knnDist.write_addr.full() &&\n        !output_knnDist.write_data.full()\n    ) {\n      output_knnDist.write_addr.try_write(i_req_dist);\n      output_knnDist.write_data.try_write(output_dist);\n      --i_req_dist;\n    }\n    if (!output_knnDist.write_resp.empty()) {\n      i_resp_dist += (unsigned int)(output_knnDist.write_resp.read(nullptr)) + 1;\n    }\n    // Writing the ID values:\n    if (i_req_id < TOP && i_req_id >= 0 &&\n        !output_knnId.write_addr.full() &&\n        !output_knnId.write_data.full()\n    ) {\n      output_knnId.write_addr.try_write(i_req_id);\n      output_knnId.write_data.try_write(output_id);\n      --i_req_id;\n    }\n    if (!output_knnId.write_resp.empty()) {\n      i_resp_id += (unsigned int)(output_knnId.write_resp.read(nullptr)) + 1;\n    }\n}\nvoid merge_dual_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::async_mmap<float>& hiermerge_dist_output,\n                        tapa::async_mmap<int>& hiermerge_id_output\n)\n{\n    float dist_1 = hiermerge_dist_istream_1.read();\n    float dist_2 = hiermerge_dist_istream_2.read();\n    int id_1 = hiermerge_id_istream_1.read();\n    int id_2 = hiermerge_id_istream_2.read();\n    int stream1_read_count = 1;\n    int stream2_read_count = 1;\n    int i_req_dist = TOP-1;\n    int i_resp_dist = TOP-1;\n    int i_req_id = TOP-1;\n    int i_resp_id = TOP-1;\n    for (int k = TOP-1; k > 0; --k)\n    {\n        if (dist_1 <= dist_2)\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_1,\n                            id_1,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream1_read_count < TOP)\n            {\n                ++stream1_read_count;\n                dist_1 = hiermerge_dist_istream_1.read();\n                id_1 = hiermerge_id_istream_1.read();\n            }\n        }\n        else\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_2,\n                            id_2,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream2_read_count < TOP)\n            {\n                ++stream2_read_count;\n                dist_2 = hiermerge_dist_istream_2.read();\n                id_2 = hiermerge_id_istream_2.read();\n            }\n        }\n    }\n    // Final write.\n    if (dist_1 <= dist_2) {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_1,\n                        id_1,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    else {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_2,\n                        id_2,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    // Empty the input streams.\n    while (stream1_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream1_read_count;\n        dist_1 = hiermerge_dist_istream_1.read();\n        id_1 = hiermerge_id_istream_1.read();\n    }\n    while (stream2_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream2_read_count;\n        dist_2 = hiermerge_dist_istream_2.read();\n        id_2 = hiermerge_id_istream_2.read();\n    }\n}\nvoid merge_trio_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        uint64_t  hiermerge_dist_output,\n                        uint64_t  hiermerge_id_output\n)\n;\nextern \"C\" {\n\nvoid Knn(\n    uint64_t  in_0,\n    uint64_t  in_1,\n    uint64_t  in_2,\n    uint64_t  in_3,\n    uint64_t  in_4,\n    uint64_t  in_5,\n    uint64_t  in_6,\n    uint64_t  in_7,\n    uint64_t  in_8,\n    uint64_t  in_9,\n    uint64_t  in_10,\n    uint64_t  in_11,\n    uint64_t  in_12,\n    uint64_t  in_13,\n    uint64_t  in_14,\n    uint64_t  in_15,\n    uint64_t  in_16,\n    uint64_t  in_17,\n    uint64_t  in_18,\n    uint64_t  in_19,\n    uint64_t  in_20,\n    uint64_t  in_21,\n    uint64_t  in_22,\n    uint64_t  in_23,\n    uint64_t  in_24,\n    uint64_t  in_25,\n    uint64_t  in_26,\n    uint64_t  final_out_dist,\n    uint64_t  final_out_id\n) {\n\n#pragma HLS interface s_axilite port = in_0 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_0); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_0); }\n\n#pragma HLS interface s_axilite port = in_1 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_1); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_1); }\n\n#pragma HLS interface s_axilite port = in_2 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_2); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_2); }\n\n#pragma HLS interface s_axilite port = in_3 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_3); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_3); }\n\n#pragma HLS interface s_axilite port = in_4 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_4); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_4); }\n\n#pragma HLS interface s_axilite port = in_5 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_5); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_5); }\n\n#pragma HLS interface s_axilite port = in_6 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_6); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_6); }\n\n#pragma HLS interface s_axilite port = in_7 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_7); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_7); }\n\n#pragma HLS interface s_axilite port = in_8 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_8); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_8); }\n\n#pragma HLS interface s_axilite port = in_9 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_9); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_9); }\n\n#pragma HLS interface s_axilite port = in_10 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_10); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_10); }\n\n#pragma HLS interface s_axilite port = in_11 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_11); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_11); }\n\n#pragma HLS interface s_axilite port = in_12 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_12); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_12); }\n\n#pragma HLS interface s_axilite port = in_13 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_13); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_13); }\n\n#pragma HLS interface s_axilite port = in_14 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_14); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_14); }\n\n#pragma HLS interface s_axilite port = in_15 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_15); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_15); }\n\n#pragma HLS interface s_axilite port = in_16 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_16); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_16); }\n\n#pragma HLS interface s_axilite port = in_17 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_17); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_17); }\n\n#pragma HLS interface s_axilite port = in_18 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_18); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_18); }\n\n#pragma HLS interface s_axilite port = in_19 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_19); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_19); }\n\n#pragma HLS interface s_axilite port = in_20 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_20); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_20); }\n\n#pragma HLS interface s_axilite port = in_21 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_21); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_21); }\n\n#pragma HLS interface s_axilite port = in_22 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_22); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_22); }\n\n#pragma HLS interface s_axilite port = in_23 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_23); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_23); }\n\n#pragma HLS interface s_axilite port = in_24 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_24); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_24); }\n\n#pragma HLS interface s_axilite port = in_25 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_25); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_25); }\n\n#pragma HLS interface s_axilite port = in_26 bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_26); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(in_26); }\n\n#pragma HLS interface s_axilite port = final_out_dist bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(final_out_dist); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(final_out_dist); }\n\n#pragma HLS interface s_axilite port = final_out_id bundle = control\n{ auto val = reinterpret_cast<volatile uint8_t&>(final_out_id); }\n{ auto val = reinterpret_cast<volatile uint8_t&>(final_out_id); }\n\n\n#pragma HLS interface s_axilite port = return bundle = control\n}\n\n\n}  // extern \"C\"\n\n",
            "fifos": {
                "L0_out_dist_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        27
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        0
                    ]
                },
                "L0_out_dist_Knn[10]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        32
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        10
                    ]
                },
                "L0_out_dist_Knn[11]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        32
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        11
                    ]
                },
                "L0_out_dist_Knn[12]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        33
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        12
                    ]
                },
                "L0_out_dist_Knn[13]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        33
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        13
                    ]
                },
                "L0_out_dist_Knn[14]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        34
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        14
                    ]
                },
                "L0_out_dist_Knn[15]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        34
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        15
                    ]
                },
                "L0_out_dist_Knn[16]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        35
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        16
                    ]
                },
                "L0_out_dist_Knn[17]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        35
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        17
                    ]
                },
                "L0_out_dist_Knn[18]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        36
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        18
                    ]
                },
                "L0_out_dist_Knn[19]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        36
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        19
                    ]
                },
                "L0_out_dist_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        27
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        1
                    ]
                },
                "L0_out_dist_Knn[20]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        37
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        20
                    ]
                },
                "L0_out_dist_Knn[21]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        37
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        21
                    ]
                },
                "L0_out_dist_Knn[22]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        38
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        22
                    ]
                },
                "L0_out_dist_Knn[23]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        38
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        23
                    ]
                },
                "L0_out_dist_Knn[24]": {
                    "consumed_by": [
                        "merge_trio_streams",
                        0
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        24
                    ]
                },
                "L0_out_dist_Knn[25]": {
                    "consumed_by": [
                        "merge_trio_streams",
                        0
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        25
                    ]
                },
                "L0_out_dist_Knn[26]": {
                    "consumed_by": [
                        "merge_trio_streams",
                        0
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        26
                    ]
                },
                "L0_out_dist_Knn[2]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        28
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        2
                    ]
                },
                "L0_out_dist_Knn[3]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        28
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        3
                    ]
                },
                "L0_out_dist_Knn[4]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        29
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        4
                    ]
                },
                "L0_out_dist_Knn[5]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        29
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        5
                    ]
                },
                "L0_out_dist_Knn[6]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        30
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        6
                    ]
                },
                "L0_out_dist_Knn[7]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        30
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        7
                    ]
                },
                "L0_out_dist_Knn[8]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        31
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        8
                    ]
                },
                "L0_out_dist_Knn[9]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        31
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        9
                    ]
                },
                "L0_out_id_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        27
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        0
                    ]
                },
                "L0_out_id_Knn[10]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        32
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        10
                    ]
                },
                "L0_out_id_Knn[11]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        32
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        11
                    ]
                },
                "L0_out_id_Knn[12]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        33
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        12
                    ]
                },
                "L0_out_id_Knn[13]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        33
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        13
                    ]
                },
                "L0_out_id_Knn[14]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        34
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        14
                    ]
                },
                "L0_out_id_Knn[15]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        34
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        15
                    ]
                },
                "L0_out_id_Knn[16]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        35
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        16
                    ]
                },
                "L0_out_id_Knn[17]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        35
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        17
                    ]
                },
                "L0_out_id_Knn[18]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        36
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        18
                    ]
                },
                "L0_out_id_Knn[19]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        36
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        19
                    ]
                },
                "L0_out_id_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        27
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        1
                    ]
                },
                "L0_out_id_Knn[20]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        37
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        20
                    ]
                },
                "L0_out_id_Knn[21]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        37
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        21
                    ]
                },
                "L0_out_id_Knn[22]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        38
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        22
                    ]
                },
                "L0_out_id_Knn[23]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        38
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        23
                    ]
                },
                "L0_out_id_Knn[24]": {
                    "consumed_by": [
                        "merge_trio_streams",
                        0
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        24
                    ]
                },
                "L0_out_id_Knn[25]": {
                    "consumed_by": [
                        "merge_trio_streams",
                        0
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        25
                    ]
                },
                "L0_out_id_Knn[26]": {
                    "consumed_by": [
                        "merge_trio_streams",
                        0
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        26
                    ]
                },
                "L0_out_id_Knn[2]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        28
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        2
                    ]
                },
                "L0_out_id_Knn[3]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        28
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        3
                    ]
                },
                "L0_out_id_Knn[4]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        29
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        4
                    ]
                },
                "L0_out_id_Knn[5]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        29
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        5
                    ]
                },
                "L0_out_id_Knn[6]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        30
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        6
                    ]
                },
                "L0_out_id_Knn[7]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        30
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        7
                    ]
                },
                "L0_out_id_Knn[8]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        31
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        8
                    ]
                },
                "L0_out_id_Knn[9]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        31
                    ],
                    "depth": 10,
                    "produced_by": [
                        "merge_dual_streams",
                        9
                    ]
                },
                "L1_out_dist_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        39
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        27
                    ]
                },
                "L1_out_dist_Knn[10]": {
                    "consumed_by": [
                        "merge_trio_streams",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        37
                    ]
                },
                "L1_out_dist_Knn[11]": {
                    "consumed_by": [
                        "merge_trio_streams",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        38
                    ]
                },
                "L1_out_dist_Knn[12]": {
                    "consumed_by": [
                        "merge_trio_streams",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_trio_streams",
                        0
                    ]
                },
                "L1_out_dist_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        39
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        28
                    ]
                },
                "L1_out_dist_Knn[2]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        40
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        29
                    ]
                },
                "L1_out_dist_Knn[3]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        40
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        30
                    ]
                },
                "L1_out_dist_Knn[4]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        41
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        31
                    ]
                },
                "L1_out_dist_Knn[5]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        41
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        32
                    ]
                },
                "L1_out_dist_Knn[6]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        42
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        33
                    ]
                },
                "L1_out_dist_Knn[7]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        42
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        34
                    ]
                },
                "L1_out_dist_Knn[8]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        43
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        35
                    ]
                },
                "L1_out_dist_Knn[9]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        43
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        36
                    ]
                },
                "L1_out_id_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        39
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        27
                    ]
                },
                "L1_out_id_Knn[10]": {
                    "consumed_by": [
                        "merge_trio_streams",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        37
                    ]
                },
                "L1_out_id_Knn[11]": {
                    "consumed_by": [
                        "merge_trio_streams",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        38
                    ]
                },
                "L1_out_id_Knn[12]": {
                    "consumed_by": [
                        "merge_trio_streams",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_trio_streams",
                        0
                    ]
                },
                "L1_out_id_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        39
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        28
                    ]
                },
                "L1_out_id_Knn[2]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        40
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        29
                    ]
                },
                "L1_out_id_Knn[3]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        40
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        30
                    ]
                },
                "L1_out_id_Knn[4]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        41
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        31
                    ]
                },
                "L1_out_id_Knn[5]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        41
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        32
                    ]
                },
                "L1_out_id_Knn[6]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        42
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        33
                    ]
                },
                "L1_out_id_Knn[7]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        42
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        34
                    ]
                },
                "L1_out_id_Knn[8]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        43
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        35
                    ]
                },
                "L1_out_id_Knn[9]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        43
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        36
                    ]
                },
                "L2_out_dist_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        44
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        39
                    ]
                },
                "L2_out_dist_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        44
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        40
                    ]
                },
                "L2_out_dist_Knn[2]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        45
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        41
                    ]
                },
                "L2_out_dist_Knn[3]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        45
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        42
                    ]
                },
                "L2_out_dist_Knn[4]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        46
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        43
                    ]
                },
                "L2_out_dist_Knn[5]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        46
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_trio_streams",
                        1
                    ]
                },
                "L2_out_id_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        44
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        39
                    ]
                },
                "L2_out_id_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        44
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        40
                    ]
                },
                "L2_out_id_Knn[2]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        45
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        41
                    ]
                },
                "L2_out_id_Knn[3]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        45
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        42
                    ]
                },
                "L2_out_id_Knn[4]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        46
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        43
                    ]
                },
                "L2_out_id_Knn[5]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        46
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_trio_streams",
                        1
                    ]
                },
                "L3_out_dist_Knn[0]": {
                    "consumed_by": [
                        "merge_trio_streams_FINAL",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        44
                    ]
                },
                "L3_out_dist_Knn[1]": {
                    "consumed_by": [
                        "merge_trio_streams_FINAL",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        45
                    ]
                },
                "L3_out_dist_Knn[2]": {
                    "consumed_by": [
                        "merge_trio_streams_FINAL",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        46
                    ]
                },
                "L3_out_id_Knn[0]": {
                    "consumed_by": [
                        "merge_trio_streams_FINAL",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        44
                    ]
                },
                "L3_out_id_Knn[1]": {
                    "consumed_by": [
                        "merge_trio_streams_FINAL",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        45
                    ]
                },
                "L3_out_id_Knn[2]": {
                    "consumed_by": [
                        "merge_trio_streams_FINAL",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "merge_dual_streams",
                        46
                    ]
                },
                "compute_to_sort_stream_0_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        0
                    ]
                },
                "compute_to_sort_stream_0_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        0
                    ]
                },
                "compute_to_sort_stream_10_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        20
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        10
                    ]
                },
                "compute_to_sort_stream_10_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        21
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        10
                    ]
                },
                "compute_to_sort_stream_11_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        22
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        11
                    ]
                },
                "compute_to_sort_stream_11_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        23
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        11
                    ]
                },
                "compute_to_sort_stream_12_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        24
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        12
                    ]
                },
                "compute_to_sort_stream_12_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        25
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        12
                    ]
                },
                "compute_to_sort_stream_13_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        26
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        13
                    ]
                },
                "compute_to_sort_stream_13_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        27
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        13
                    ]
                },
                "compute_to_sort_stream_14_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        28
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        14
                    ]
                },
                "compute_to_sort_stream_14_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        29
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        14
                    ]
                },
                "compute_to_sort_stream_15_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        30
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        15
                    ]
                },
                "compute_to_sort_stream_15_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        31
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        15
                    ]
                },
                "compute_to_sort_stream_16_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        32
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        16
                    ]
                },
                "compute_to_sort_stream_16_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        33
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        16
                    ]
                },
                "compute_to_sort_stream_17_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        34
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        17
                    ]
                },
                "compute_to_sort_stream_17_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        35
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        17
                    ]
                },
                "compute_to_sort_stream_18_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        36
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        18
                    ]
                },
                "compute_to_sort_stream_18_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        37
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        18
                    ]
                },
                "compute_to_sort_stream_19_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        38
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        19
                    ]
                },
                "compute_to_sort_stream_19_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        39
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        19
                    ]
                },
                "compute_to_sort_stream_1_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        1
                    ]
                },
                "compute_to_sort_stream_1_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        1
                    ]
                },
                "compute_to_sort_stream_20_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        40
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        20
                    ]
                },
                "compute_to_sort_stream_20_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        41
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        20
                    ]
                },
                "compute_to_sort_stream_21_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        42
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        21
                    ]
                },
                "compute_to_sort_stream_21_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        43
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        21
                    ]
                },
                "compute_to_sort_stream_22_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        44
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        22
                    ]
                },
                "compute_to_sort_stream_22_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        45
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        22
                    ]
                },
                "compute_to_sort_stream_23_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        46
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        23
                    ]
                },
                "compute_to_sort_stream_23_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        47
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        23
                    ]
                },
                "compute_to_sort_stream_24_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        48
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        24
                    ]
                },
                "compute_to_sort_stream_24_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        49
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        24
                    ]
                },
                "compute_to_sort_stream_25_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        50
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        25
                    ]
                },
                "compute_to_sort_stream_25_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        51
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        25
                    ]
                },
                "compute_to_sort_stream_26_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        52
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        26
                    ]
                },
                "compute_to_sort_stream_26_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        53
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        26
                    ]
                },
                "compute_to_sort_stream_2_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        2
                    ]
                },
                "compute_to_sort_stream_2_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        2
                    ]
                },
                "compute_to_sort_stream_3_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        3
                    ]
                },
                "compute_to_sort_stream_3_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        3
                    ]
                },
                "compute_to_sort_stream_4_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        4
                    ]
                },
                "compute_to_sort_stream_4_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        4
                    ]
                },
                "compute_to_sort_stream_5_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        5
                    ]
                },
                "compute_to_sort_stream_5_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        5
                    ]
                },
                "compute_to_sort_stream_6_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        6
                    ]
                },
                "compute_to_sort_stream_6_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        6
                    ]
                },
                "compute_to_sort_stream_7_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        7
                    ]
                },
                "compute_to_sort_stream_7_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        7
                    ]
                },
                "compute_to_sort_stream_8_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        16
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        8
                    ]
                },
                "compute_to_sort_stream_8_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        17
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        8
                    ]
                },
                "compute_to_sort_stream_9_Knn[0]": {
                    "consumed_by": [
                        "para_partial_sort",
                        18
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        9
                    ]
                },
                "compute_to_sort_stream_9_Knn[1]": {
                    "consumed_by": [
                        "para_partial_sort",
                        19
                    ],
                    "depth": 2,
                    "produced_by": [
                        "compute_KNN",
                        9
                    ]
                },
                "load_to_compute_stream_Knn[0]": {
                    "consumed_by": [
                        "compute_KNN",
                        0
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        0
                    ]
                },
                "load_to_compute_stream_Knn[10]": {
                    "consumed_by": [
                        "compute_KNN",
                        10
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        10
                    ]
                },
                "load_to_compute_stream_Knn[11]": {
                    "consumed_by": [
                        "compute_KNN",
                        11
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        11
                    ]
                },
                "load_to_compute_stream_Knn[12]": {
                    "consumed_by": [
                        "compute_KNN",
                        12
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        12
                    ]
                },
                "load_to_compute_stream_Knn[13]": {
                    "consumed_by": [
                        "compute_KNN",
                        13
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        13
                    ]
                },
                "load_to_compute_stream_Knn[14]": {
                    "consumed_by": [
                        "compute_KNN",
                        14
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        14
                    ]
                },
                "load_to_compute_stream_Knn[15]": {
                    "consumed_by": [
                        "compute_KNN",
                        15
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        15
                    ]
                },
                "load_to_compute_stream_Knn[16]": {
                    "consumed_by": [
                        "compute_KNN",
                        16
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        16
                    ]
                },
                "load_to_compute_stream_Knn[17]": {
                    "consumed_by": [
                        "compute_KNN",
                        17
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        17
                    ]
                },
                "load_to_compute_stream_Knn[18]": {
                    "consumed_by": [
                        "compute_KNN",
                        18
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        18
                    ]
                },
                "load_to_compute_stream_Knn[19]": {
                    "consumed_by": [
                        "compute_KNN",
                        19
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        19
                    ]
                },
                "load_to_compute_stream_Knn[1]": {
                    "consumed_by": [
                        "compute_KNN",
                        1
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        1
                    ]
                },
                "load_to_compute_stream_Knn[20]": {
                    "consumed_by": [
                        "compute_KNN",
                        20
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        20
                    ]
                },
                "load_to_compute_stream_Knn[21]": {
                    "consumed_by": [
                        "compute_KNN",
                        21
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        21
                    ]
                },
                "load_to_compute_stream_Knn[22]": {
                    "consumed_by": [
                        "compute_KNN",
                        22
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        22
                    ]
                },
                "load_to_compute_stream_Knn[23]": {
                    "consumed_by": [
                        "compute_KNN",
                        23
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        23
                    ]
                },
                "load_to_compute_stream_Knn[24]": {
                    "consumed_by": [
                        "compute_KNN",
                        24
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        24
                    ]
                },
                "load_to_compute_stream_Knn[25]": {
                    "consumed_by": [
                        "compute_KNN",
                        25
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        25
                    ]
                },
                "load_to_compute_stream_Knn[26]": {
                    "consumed_by": [
                        "compute_KNN",
                        26
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        26
                    ]
                },
                "load_to_compute_stream_Knn[2]": {
                    "consumed_by": [
                        "compute_KNN",
                        2
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        2
                    ]
                },
                "load_to_compute_stream_Knn[3]": {
                    "consumed_by": [
                        "compute_KNN",
                        3
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        3
                    ]
                },
                "load_to_compute_stream_Knn[4]": {
                    "consumed_by": [
                        "compute_KNN",
                        4
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        4
                    ]
                },
                "load_to_compute_stream_Knn[5]": {
                    "consumed_by": [
                        "compute_KNN",
                        5
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        5
                    ]
                },
                "load_to_compute_stream_Knn[6]": {
                    "consumed_by": [
                        "compute_KNN",
                        6
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        6
                    ]
                },
                "load_to_compute_stream_Knn[7]": {
                    "consumed_by": [
                        "compute_KNN",
                        7
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        7
                    ]
                },
                "load_to_compute_stream_Knn[8]": {
                    "consumed_by": [
                        "compute_KNN",
                        8
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        8
                    ]
                },
                "load_to_compute_stream_Knn[9]": {
                    "consumed_by": [
                        "compute_KNN",
                        9
                    ],
                    "depth": 2,
                    "produced_by": [
                        "load_KNN",
                        9
                    ]
                },
                "sort_to_hiermerge_dist_stream_0_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        0
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        0
                    ]
                },
                "sort_to_hiermerge_dist_stream_0_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        0
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        1
                    ]
                },
                "sort_to_hiermerge_dist_stream_10_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        10
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        20
                    ]
                },
                "sort_to_hiermerge_dist_stream_10_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        10
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        21
                    ]
                },
                "sort_to_hiermerge_dist_stream_11_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        11
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        22
                    ]
                },
                "sort_to_hiermerge_dist_stream_11_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        11
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        23
                    ]
                },
                "sort_to_hiermerge_dist_stream_12_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        12
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        24
                    ]
                },
                "sort_to_hiermerge_dist_stream_12_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        12
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        25
                    ]
                },
                "sort_to_hiermerge_dist_stream_13_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        13
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        26
                    ]
                },
                "sort_to_hiermerge_dist_stream_13_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        13
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        27
                    ]
                },
                "sort_to_hiermerge_dist_stream_14_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        14
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        28
                    ]
                },
                "sort_to_hiermerge_dist_stream_14_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        14
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        29
                    ]
                },
                "sort_to_hiermerge_dist_stream_15_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        15
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        30
                    ]
                },
                "sort_to_hiermerge_dist_stream_15_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        15
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        31
                    ]
                },
                "sort_to_hiermerge_dist_stream_16_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        16
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        32
                    ]
                },
                "sort_to_hiermerge_dist_stream_16_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        16
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        33
                    ]
                },
                "sort_to_hiermerge_dist_stream_17_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        17
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        34
                    ]
                },
                "sort_to_hiermerge_dist_stream_17_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        17
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        35
                    ]
                },
                "sort_to_hiermerge_dist_stream_18_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        18
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        36
                    ]
                },
                "sort_to_hiermerge_dist_stream_18_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        18
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        37
                    ]
                },
                "sort_to_hiermerge_dist_stream_19_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        19
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        38
                    ]
                },
                "sort_to_hiermerge_dist_stream_19_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        19
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        39
                    ]
                },
                "sort_to_hiermerge_dist_stream_1_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        1
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        2
                    ]
                },
                "sort_to_hiermerge_dist_stream_1_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        1
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        3
                    ]
                },
                "sort_to_hiermerge_dist_stream_20_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        20
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        40
                    ]
                },
                "sort_to_hiermerge_dist_stream_20_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        20
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        41
                    ]
                },
                "sort_to_hiermerge_dist_stream_21_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        21
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        42
                    ]
                },
                "sort_to_hiermerge_dist_stream_21_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        21
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        43
                    ]
                },
                "sort_to_hiermerge_dist_stream_22_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        22
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        44
                    ]
                },
                "sort_to_hiermerge_dist_stream_22_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        22
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        45
                    ]
                },
                "sort_to_hiermerge_dist_stream_23_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        23
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        46
                    ]
                },
                "sort_to_hiermerge_dist_stream_23_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        23
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        47
                    ]
                },
                "sort_to_hiermerge_dist_stream_24_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        24
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        48
                    ]
                },
                "sort_to_hiermerge_dist_stream_24_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        24
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        49
                    ]
                },
                "sort_to_hiermerge_dist_stream_25_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        25
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        50
                    ]
                },
                "sort_to_hiermerge_dist_stream_25_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        25
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        51
                    ]
                },
                "sort_to_hiermerge_dist_stream_26_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        26
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        52
                    ]
                },
                "sort_to_hiermerge_dist_stream_26_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        26
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        53
                    ]
                },
                "sort_to_hiermerge_dist_stream_2_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        2
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        4
                    ]
                },
                "sort_to_hiermerge_dist_stream_2_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        2
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        5
                    ]
                },
                "sort_to_hiermerge_dist_stream_3_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        3
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        6
                    ]
                },
                "sort_to_hiermerge_dist_stream_3_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        3
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        7
                    ]
                },
                "sort_to_hiermerge_dist_stream_4_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        4
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        8
                    ]
                },
                "sort_to_hiermerge_dist_stream_4_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        4
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        9
                    ]
                },
                "sort_to_hiermerge_dist_stream_5_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        5
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        10
                    ]
                },
                "sort_to_hiermerge_dist_stream_5_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        5
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        11
                    ]
                },
                "sort_to_hiermerge_dist_stream_6_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        6
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        12
                    ]
                },
                "sort_to_hiermerge_dist_stream_6_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        6
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        13
                    ]
                },
                "sort_to_hiermerge_dist_stream_7_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        7
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        14
                    ]
                },
                "sort_to_hiermerge_dist_stream_7_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        7
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        15
                    ]
                },
                "sort_to_hiermerge_dist_stream_8_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        8
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        16
                    ]
                },
                "sort_to_hiermerge_dist_stream_8_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        8
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        17
                    ]
                },
                "sort_to_hiermerge_dist_stream_9_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        9
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        18
                    ]
                },
                "sort_to_hiermerge_dist_stream_9_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        9
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        19
                    ]
                },
                "sort_to_hiermerge_id_stream_0_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        0
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        0
                    ]
                },
                "sort_to_hiermerge_id_stream_0_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        0
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        1
                    ]
                },
                "sort_to_hiermerge_id_stream_10_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        10
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        20
                    ]
                },
                "sort_to_hiermerge_id_stream_10_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        10
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        21
                    ]
                },
                "sort_to_hiermerge_id_stream_11_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        11
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        22
                    ]
                },
                "sort_to_hiermerge_id_stream_11_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        11
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        23
                    ]
                },
                "sort_to_hiermerge_id_stream_12_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        12
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        24
                    ]
                },
                "sort_to_hiermerge_id_stream_12_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        12
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        25
                    ]
                },
                "sort_to_hiermerge_id_stream_13_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        13
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        26
                    ]
                },
                "sort_to_hiermerge_id_stream_13_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        13
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        27
                    ]
                },
                "sort_to_hiermerge_id_stream_14_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        14
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        28
                    ]
                },
                "sort_to_hiermerge_id_stream_14_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        14
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        29
                    ]
                },
                "sort_to_hiermerge_id_stream_15_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        15
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        30
                    ]
                },
                "sort_to_hiermerge_id_stream_15_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        15
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        31
                    ]
                },
                "sort_to_hiermerge_id_stream_16_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        16
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        32
                    ]
                },
                "sort_to_hiermerge_id_stream_16_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        16
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        33
                    ]
                },
                "sort_to_hiermerge_id_stream_17_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        17
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        34
                    ]
                },
                "sort_to_hiermerge_id_stream_17_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        17
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        35
                    ]
                },
                "sort_to_hiermerge_id_stream_18_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        18
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        36
                    ]
                },
                "sort_to_hiermerge_id_stream_18_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        18
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        37
                    ]
                },
                "sort_to_hiermerge_id_stream_19_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        19
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        38
                    ]
                },
                "sort_to_hiermerge_id_stream_19_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        19
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        39
                    ]
                },
                "sort_to_hiermerge_id_stream_1_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        1
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        2
                    ]
                },
                "sort_to_hiermerge_id_stream_1_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        1
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        3
                    ]
                },
                "sort_to_hiermerge_id_stream_20_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        20
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        40
                    ]
                },
                "sort_to_hiermerge_id_stream_20_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        20
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        41
                    ]
                },
                "sort_to_hiermerge_id_stream_21_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        21
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        42
                    ]
                },
                "sort_to_hiermerge_id_stream_21_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        21
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        43
                    ]
                },
                "sort_to_hiermerge_id_stream_22_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        22
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        44
                    ]
                },
                "sort_to_hiermerge_id_stream_22_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        22
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        45
                    ]
                },
                "sort_to_hiermerge_id_stream_23_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        23
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        46
                    ]
                },
                "sort_to_hiermerge_id_stream_23_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        23
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        47
                    ]
                },
                "sort_to_hiermerge_id_stream_24_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        24
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        48
                    ]
                },
                "sort_to_hiermerge_id_stream_24_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        24
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        49
                    ]
                },
                "sort_to_hiermerge_id_stream_25_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        25
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        50
                    ]
                },
                "sort_to_hiermerge_id_stream_25_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        25
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        51
                    ]
                },
                "sort_to_hiermerge_id_stream_26_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        26
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        52
                    ]
                },
                "sort_to_hiermerge_id_stream_26_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        26
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        53
                    ]
                },
                "sort_to_hiermerge_id_stream_2_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        2
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        4
                    ]
                },
                "sort_to_hiermerge_id_stream_2_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        2
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        5
                    ]
                },
                "sort_to_hiermerge_id_stream_3_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        3
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        6
                    ]
                },
                "sort_to_hiermerge_id_stream_3_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        3
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        7
                    ]
                },
                "sort_to_hiermerge_id_stream_4_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        4
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        8
                    ]
                },
                "sort_to_hiermerge_id_stream_4_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        4
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        9
                    ]
                },
                "sort_to_hiermerge_id_stream_5_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        5
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        10
                    ]
                },
                "sort_to_hiermerge_id_stream_5_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        5
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        11
                    ]
                },
                "sort_to_hiermerge_id_stream_6_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        6
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        12
                    ]
                },
                "sort_to_hiermerge_id_stream_6_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        6
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        13
                    ]
                },
                "sort_to_hiermerge_id_stream_7_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        7
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        14
                    ]
                },
                "sort_to_hiermerge_id_stream_7_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        7
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        15
                    ]
                },
                "sort_to_hiermerge_id_stream_8_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        8
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        16
                    ]
                },
                "sort_to_hiermerge_id_stream_8_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        8
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        17
                    ]
                },
                "sort_to_hiermerge_id_stream_9_Knn[0]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        9
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        18
                    ]
                },
                "sort_to_hiermerge_id_stream_9_Knn[1]": {
                    "consumed_by": [
                        "merge_dual_streams",
                        9
                    ],
                    "depth": 10,
                    "produced_by": [
                        "para_partial_sort",
                        19
                    ]
                }
            },
            "frt_interface": "#include <sstream>\n#include <stdexcept>\n#include <frt.h>\n\n\n\n #include \"ap_int.h\"\n\n#include \"ap_axi_sdata.h\"\n\n#include <tapa.h>\n\n#include <inttypes.h>\n\n#include <stdlib.h>\n\n// CEIL_DIVISION(X, Y) = ceil(x/y).\n// ROUND_TO_NEXT_MULTIPLE(X, Y) rounds X up to the nearest multiple of Y.\nconst int IWIDTH = 512;\nconst int INPUT_DIM = 16;\nconst int TOP = 10;\n/***************************************************************/\n// L2I = Local to Interface\nconst int L2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * (32)) + 1 );\n// D2L = Data_Type to Local\nconst int D2L_FACTOR_W = ( ((32)-1)/32 + 1 );\n// D2I = Data_Type to Interface\nconst int D2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * 32) + 1 );\n// I2D = Interface to Data_type\nconst int I2D_FACTOR_W = ( ((INPUT_DIM * 32)-1)/IWIDTH + 1 );\n// // DEBUG NOTE: BW_FACTOR = 1.1349753694581282\n// Round up to the nearest multiple, because otherwise some logic breaks (incorrect sizes => bad logic in edgecases)\n// We partition the input points, so each PE gets it's own partition, to maximize parallelization.\nconst int PARTITION_LEN_IN_I = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / IWIDTH);\nconst int PARTITION_LEN_IN_D = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * 32));\nconst int PARTITION_LEN_IN_L = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * (32)));\n// We name each sub-array of the local_distance arrays a \"segment\".\n//const int SWIDTH = DATA_TYPE_TOTAL_SZ; \n//typedef ap_axiu<SWIDTH, 0, 0, 0> pkt; \n//typedef ap_axiu<32, 0, 0, 0>    id_pkt;\n//#define STREAM_WIDTH ap_uint<SWIDTH> \nconst int NUM_FEATURES_PER_READ = (IWIDTH/32);\nconst int QUERY_FEATURE_RESERVE = (128);\nstatic inline float absval(float input){\n    return (input > 0 ? input : static_cast<float>(-1*input));\n}\n// purposefully empty #define\n/*************************************************/\n/******************** LOADS: *********************/\n/*************************************************/\nvoid load_KNN( int debug_PE_ID,\n                 uint64_t  searchSpace,\n                 tapa::ostream<ap_uint<IWIDTH> >& load_to_compute_stream)\n;\n/*************************************************/\n/******************* COMPUTES: *******************/\n/*************************************************/\nvoid compute_KNN( int debug_pe_idx,\n                    int debug_start_idx,\n                    tapa::istream<ap_uint<IWIDTH> >& load_to_compute_stream,\n                    tapa::ostreams<float, (L2I_FACTOR_W * 2)>& compute_to_sort_stream)\n;\nvoid swap(float* a, float* b,\n               int* x, int* y)\n{\n#pragma HLS INLINE\n    float tmpdist_a;\n    float tmpdist_b;\n    int tmpid_x;\n    int tmpid_y;\n    tmpdist_a = *a;\n    tmpdist_b = *b;\n    *b = tmpdist_a;\n    *a = tmpdist_b;\n    tmpid_x = *x;\n    tmpid_y = *y;\n    *x = tmpid_y;\n    *y = tmpid_x;\n}\nvoid para_partial_sort(const int PE_idx,\n                       int seg_idx,\n                       tapa::istream<float>& compute_to_sort_stream,\n                       tapa::ostream<float>& sort_to_hiermerge_dist_stream_0,\n                       tapa::ostream<int>& sort_to_hiermerge_id_stream_0)\n;\nvoid merge_dual_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid merge_trio_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid write_out_mmap(\n                    tapa::async_mmap<float>& output_knnDist,\n                    tapa::async_mmap<int>& output_knnId,\n                    float output_dist,\n                    int output_id,\n                    int& i_req_dist,\n                    int& i_resp_dist,\n                    int& i_req_id,\n                    int& i_resp_id\n) {\n#pragma HLS INLINE\n    // Writing the distance values:\n    if (i_req_dist < TOP && i_req_dist >= 0 &&\n        !output_knnDist.write_addr.full() &&\n        !output_knnDist.write_data.full()\n    ) {\n      output_knnDist.write_addr.try_write(i_req_dist);\n      output_knnDist.write_data.try_write(output_dist);\n      --i_req_dist;\n    }\n    if (!output_knnDist.write_resp.empty()) {\n      i_resp_dist += (unsigned int)(output_knnDist.write_resp.read(nullptr)) + 1;\n    }\n    // Writing the ID values:\n    if (i_req_id < TOP && i_req_id >= 0 &&\n        !output_knnId.write_addr.full() &&\n        !output_knnId.write_data.full()\n    ) {\n      output_knnId.write_addr.try_write(i_req_id);\n      output_knnId.write_data.try_write(output_id);\n      --i_req_id;\n    }\n    if (!output_knnId.write_resp.empty()) {\n      i_resp_id += (unsigned int)(output_knnId.write_resp.read(nullptr)) + 1;\n    }\n}\nvoid merge_dual_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::async_mmap<float>& hiermerge_dist_output,\n                        tapa::async_mmap<int>& hiermerge_id_output\n)\n{\n    float dist_1 = hiermerge_dist_istream_1.read();\n    float dist_2 = hiermerge_dist_istream_2.read();\n    int id_1 = hiermerge_id_istream_1.read();\n    int id_2 = hiermerge_id_istream_2.read();\n    int stream1_read_count = 1;\n    int stream2_read_count = 1;\n    int i_req_dist = TOP-1;\n    int i_resp_dist = TOP-1;\n    int i_req_id = TOP-1;\n    int i_resp_id = TOP-1;\n    for (int k = TOP-1; k > 0; --k)\n    {\n        if (dist_1 <= dist_2)\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_1,\n                            id_1,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream1_read_count < TOP)\n            {\n                ++stream1_read_count;\n                dist_1 = hiermerge_dist_istream_1.read();\n                id_1 = hiermerge_id_istream_1.read();\n            }\n        }\n        else\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_2,\n                            id_2,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream2_read_count < TOP)\n            {\n                ++stream2_read_count;\n                dist_2 = hiermerge_dist_istream_2.read();\n                id_2 = hiermerge_id_istream_2.read();\n            }\n        }\n    }\n    // Final write.\n    if (dist_1 <= dist_2) {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_1,\n                        id_1,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    else {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_2,\n                        id_2,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    // Empty the input streams.\n    while (stream1_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream1_read_count;\n        dist_1 = hiermerge_dist_istream_1.read();\n        id_1 = hiermerge_id_istream_1.read();\n    }\n    while (stream2_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream2_read_count;\n        dist_2 = hiermerge_dist_istream_2.read();\n        id_2 = hiermerge_id_istream_2.read();\n    }\n}\nvoid merge_trio_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        uint64_t  hiermerge_dist_output,\n                        uint64_t  hiermerge_id_output\n)\n;\nvoid Knn(\n    tapa::mmap<ap_uint<IWIDTH> > in_0,\n    tapa::mmap<ap_uint<IWIDTH> > in_1,\n    tapa::mmap<ap_uint<IWIDTH> > in_2,\n    tapa::mmap<ap_uint<IWIDTH> > in_3,\n    tapa::mmap<ap_uint<IWIDTH> > in_4,\n    tapa::mmap<ap_uint<IWIDTH> > in_5,\n    tapa::mmap<ap_uint<IWIDTH> > in_6,\n    tapa::mmap<ap_uint<IWIDTH> > in_7,\n    tapa::mmap<ap_uint<IWIDTH> > in_8,\n    tapa::mmap<ap_uint<IWIDTH> > in_9,\n    tapa::mmap<ap_uint<IWIDTH> > in_10,\n    tapa::mmap<ap_uint<IWIDTH> > in_11,\n    tapa::mmap<ap_uint<IWIDTH> > in_12,\n    tapa::mmap<ap_uint<IWIDTH> > in_13,\n    tapa::mmap<ap_uint<IWIDTH> > in_14,\n    tapa::mmap<ap_uint<IWIDTH> > in_15,\n    tapa::mmap<ap_uint<IWIDTH> > in_16,\n    tapa::mmap<ap_uint<IWIDTH> > in_17,\n    tapa::mmap<ap_uint<IWIDTH> > in_18,\n    tapa::mmap<ap_uint<IWIDTH> > in_19,\n    tapa::mmap<ap_uint<IWIDTH> > in_20,\n    tapa::mmap<ap_uint<IWIDTH> > in_21,\n    tapa::mmap<ap_uint<IWIDTH> > in_22,\n    tapa::mmap<ap_uint<IWIDTH> > in_23,\n    tapa::mmap<ap_uint<IWIDTH> > in_24,\n    tapa::mmap<ap_uint<IWIDTH> > in_25,\n    tapa::mmap<ap_uint<IWIDTH> > in_26,\n    tapa::mmap<float> final_out_dist,\n    tapa::mmap<int> final_out_id\n) {\n#define TAPAB_APP \"TAPAB_Knn\"\n#define TAPAB \"TAPAB\"\n  const char* _tapa_bitstream = nullptr;\n  if ((_tapa_bitstream = getenv(TAPAB_APP)) ||\n      (_tapa_bitstream = getenv(TAPAB))) {\n    fpga::Instance _tapa_instance(_tapa_bitstream);\n    int _tapa_arg_index = 0;\n    for (const auto& _tapa_arg_info : _tapa_instance.GetArgsInfo()) {\n      if (false) {\n      } else if (_tapa_arg_info.name == \"in_0\") {\n        auto _tapa_arg = fpga::ReadWrite(in_0.get(), in_0.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_1\") {\n        auto _tapa_arg = fpga::ReadWrite(in_1.get(), in_1.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_2\") {\n        auto _tapa_arg = fpga::ReadWrite(in_2.get(), in_2.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_3\") {\n        auto _tapa_arg = fpga::ReadWrite(in_3.get(), in_3.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_4\") {\n        auto _tapa_arg = fpga::ReadWrite(in_4.get(), in_4.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_5\") {\n        auto _tapa_arg = fpga::ReadWrite(in_5.get(), in_5.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_6\") {\n        auto _tapa_arg = fpga::ReadWrite(in_6.get(), in_6.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_7\") {\n        auto _tapa_arg = fpga::ReadWrite(in_7.get(), in_7.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_8\") {\n        auto _tapa_arg = fpga::ReadWrite(in_8.get(), in_8.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_9\") {\n        auto _tapa_arg = fpga::ReadWrite(in_9.get(), in_9.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_10\") {\n        auto _tapa_arg = fpga::ReadWrite(in_10.get(), in_10.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_11\") {\n        auto _tapa_arg = fpga::ReadWrite(in_11.get(), in_11.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_12\") {\n        auto _tapa_arg = fpga::ReadWrite(in_12.get(), in_12.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_13\") {\n        auto _tapa_arg = fpga::ReadWrite(in_13.get(), in_13.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_14\") {\n        auto _tapa_arg = fpga::ReadWrite(in_14.get(), in_14.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_15\") {\n        auto _tapa_arg = fpga::ReadWrite(in_15.get(), in_15.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_16\") {\n        auto _tapa_arg = fpga::ReadWrite(in_16.get(), in_16.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_17\") {\n        auto _tapa_arg = fpga::ReadWrite(in_17.get(), in_17.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_18\") {\n        auto _tapa_arg = fpga::ReadWrite(in_18.get(), in_18.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_19\") {\n        auto _tapa_arg = fpga::ReadWrite(in_19.get(), in_19.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_20\") {\n        auto _tapa_arg = fpga::ReadWrite(in_20.get(), in_20.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_21\") {\n        auto _tapa_arg = fpga::ReadWrite(in_21.get(), in_21.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_22\") {\n        auto _tapa_arg = fpga::ReadWrite(in_22.get(), in_22.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_23\") {\n        auto _tapa_arg = fpga::ReadWrite(in_23.get(), in_23.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_24\") {\n        auto _tapa_arg = fpga::ReadWrite(in_24.get(), in_24.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_25\") {\n        auto _tapa_arg = fpga::ReadWrite(in_25.get(), in_25.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"in_26\") {\n        auto _tapa_arg = fpga::ReadWrite(in_26.get(), in_26.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"final_out_dist\") {\n        auto _tapa_arg = fpga::ReadWrite(final_out_dist.get(), final_out_dist.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else if (_tapa_arg_info.name == \"final_out_id\") {\n        auto _tapa_arg = fpga::ReadWrite(final_out_id.get(), final_out_id.size());\n        _tapa_instance.SetArg(_tapa_arg_index, _tapa_arg);\n      } else {\n        std::stringstream ss;\n        ss << \"unknown argument: \" << _tapa_arg_info;\n        throw std::runtime_error(ss.str());\n      }\n      ++_tapa_arg_index;\n    }\n    _tapa_instance.WriteToDevice();\n    _tapa_instance.Exec();\n    _tapa_instance.ReadFromDevice();\n    _tapa_instance.Finish();\n  } else {\n    throw std::runtime_error(\"no bitstream found; please set `\" TAPAB_APP\n                             \"` or `\" TAPAB \"`\");\n  }\n}\n",
            "level": "upper",
            "ports": [
                {
                    "cat": "mmap",
                    "name": "in_0",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_1",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_2",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_3",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_4",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_5",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_6",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_7",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_8",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_9",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_10",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_11",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_12",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_13",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_14",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_15",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_16",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_17",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_18",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_19",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_20",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_21",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_22",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_23",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_24",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_25",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "in_26",
                    "type": "ap_uint<IWIDTH>*",
                    "width": 512
                },
                {
                    "cat": "mmap",
                    "name": "final_out_dist",
                    "type": "float*",
                    "width": 32
                },
                {
                    "cat": "mmap",
                    "name": "final_out_id",
                    "type": "int*",
                    "width": 32
                }
            ],
            "target": "hls",
            "tasks": {
                "compute_KNN": [
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_0_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_0_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[0]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_1_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_1_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd155346",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[1]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_2_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_2_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd2",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd310692",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[2]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_3_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_3_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd3",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd466038",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[3]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_4_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_4_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd4",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd621384",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[4]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_5_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_5_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd5",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd776730",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[5]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_6_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_6_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd6",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd932076",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[6]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_7_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_7_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd7",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd1087422",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[7]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_8_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_8_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd8",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd1242768",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[8]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_9_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_9_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd9",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd1398114",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[9]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_10_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_10_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd10",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd1553460",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[10]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_11_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_11_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd11",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd1708806",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[11]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_12_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_12_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd12",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd1864152",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[12]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_13_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_13_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd13",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd2019498",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[13]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_14_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_14_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd14",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd2174844",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[14]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_15_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_15_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd15",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd2330190",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[15]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_16_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_16_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd16",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd2485536",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[16]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_17_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_17_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd17",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd2640882",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[17]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_18_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_18_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd18",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd2796228",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[18]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_19_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_19_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd19",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd2951574",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[19]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_20_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_20_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd20",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd3106920",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[20]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_21_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_21_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd21",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd3262266",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[21]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_22_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_22_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd22",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd3417612",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[22]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_23_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_23_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd23",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd3572958",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[23]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_24_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_24_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd24",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd3728304",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[24]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_25_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_25_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd25",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd3883650",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[25]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "compute_to_sort_stream[0]": {
                                "arg": "compute_to_sort_stream_26_Knn[0]",
                                "cat": "ostream"
                            },
                            "compute_to_sort_stream[1]": {
                                "arg": "compute_to_sort_stream_26_Knn[1]",
                                "cat": "ostream"
                            },
                            "debug_pe_idx": {
                                "arg": "64'd26",
                                "cat": "scalar"
                            },
                            "debug_start_idx": {
                                "arg": "64'd4038996",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[26]",
                                "cat": "istream"
                            }
                        },
                        "step": 0
                    }
                ],
                "load_KNN": [
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[0]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_0",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[1]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_1",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd2",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[2]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_2",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd3",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[3]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_3",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd4",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[4]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_4",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd5",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[5]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_5",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd6",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[6]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_6",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd7",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[7]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_7",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd8",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[8]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_8",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd9",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[9]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_9",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd10",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[10]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_10",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd11",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[11]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_11",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd12",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[12]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_12",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd13",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[13]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_13",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd14",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[14]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_14",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd15",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[15]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_15",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd16",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[16]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_16",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd17",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[17]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_17",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd18",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[18]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_18",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd19",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[19]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_19",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd20",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[20]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_20",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd21",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[21]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_21",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd22",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[22]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_22",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd23",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[23]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_23",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd24",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[24]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_24",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd25",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[25]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_25",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_ID": {
                                "arg": "64'd26",
                                "cat": "scalar"
                            },
                            "load_to_compute_stream": {
                                "arg": "load_to_compute_stream_Knn[26]",
                                "cat": "ostream"
                            },
                            "searchSpace": {
                                "arg": "in_26",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    }
                ],
                "merge_dual_streams": [
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_0_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_0_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[0]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_0_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_0_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_1_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_1_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[1]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_1_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_1_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd2",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_2_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_2_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[2]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_2_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_2_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd3",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_3_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_3_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[3]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_3_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_3_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd4",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_4_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_4_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[4]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_4_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_4_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd5",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_5_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_5_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[5]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_5_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_5_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd6",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_6_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_6_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[6]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_6_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_6_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd7",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_7_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_7_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[7]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_7_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_7_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd8",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_8_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_8_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[8]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_8_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_8_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[8]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd9",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_9_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_9_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[9]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_9_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_9_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[9]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd10",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_10_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_10_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[10]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_10_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_10_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[10]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd11",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_11_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_11_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[11]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_11_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_11_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[11]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd12",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_12_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_12_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[12]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_12_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_12_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[12]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd13",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_13_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_13_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[13]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_13_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_13_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[13]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd14",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_14_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_14_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[14]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_14_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_14_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[14]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd15",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_15_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_15_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[15]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_15_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_15_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[15]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd16",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_16_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_16_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[16]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_16_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_16_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[16]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd17",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_17_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_17_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[17]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_17_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_17_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[17]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_18_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_18_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[18]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_18_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_18_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[18]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd19",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_19_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_19_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[19]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_19_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_19_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[19]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd20",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_20_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_20_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[20]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_20_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_20_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[20]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd21",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_21_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_21_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[21]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_21_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_21_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[21]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd22",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_22_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_22_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[22]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_22_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_22_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[22]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd23",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_23_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_23_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[23]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_23_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_23_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[23]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd24",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_24_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_24_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[24]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_24_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_24_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[24]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd25",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_25_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_25_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[25]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_25_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_25_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[25]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd26",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "sort_to_hiermerge_dist_stream_26_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "sort_to_hiermerge_dist_stream_26_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L0_out_dist_Knn[26]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "sort_to_hiermerge_id_stream_26_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "sort_to_hiermerge_id_stream_26_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L0_out_id_Knn[26]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L0_out_dist_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L0_out_dist_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L1_out_dist_Knn[0]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L0_out_id_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L0_out_id_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L1_out_id_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd2",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L0_out_dist_Knn[2]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L0_out_dist_Knn[3]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L1_out_dist_Knn[1]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L0_out_id_Knn[2]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L0_out_id_Knn[3]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L1_out_id_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd4",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L0_out_dist_Knn[4]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L0_out_dist_Knn[5]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L1_out_dist_Knn[2]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L0_out_id_Knn[4]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L0_out_id_Knn[5]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L1_out_id_Knn[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd6",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L0_out_dist_Knn[6]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L0_out_dist_Knn[7]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L1_out_dist_Knn[3]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L0_out_id_Knn[6]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L0_out_id_Knn[7]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L1_out_id_Knn[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd8",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L0_out_dist_Knn[8]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L0_out_dist_Knn[9]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L1_out_dist_Knn[4]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L0_out_id_Knn[8]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L0_out_id_Knn[9]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L1_out_id_Knn[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd10",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L0_out_dist_Knn[10]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L0_out_dist_Knn[11]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L1_out_dist_Knn[5]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L0_out_id_Knn[10]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L0_out_id_Knn[11]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L1_out_id_Knn[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd12",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L0_out_dist_Knn[12]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L0_out_dist_Knn[13]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L1_out_dist_Knn[6]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L0_out_id_Knn[12]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L0_out_id_Knn[13]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L1_out_id_Knn[6]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd14",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L0_out_dist_Knn[14]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L0_out_dist_Knn[15]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L1_out_dist_Knn[7]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L0_out_id_Knn[14]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L0_out_id_Knn[15]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L1_out_id_Knn[7]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd16",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L0_out_dist_Knn[16]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L0_out_dist_Knn[17]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L1_out_dist_Knn[8]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L0_out_id_Knn[16]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L0_out_id_Knn[17]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L1_out_id_Knn[8]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd18",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L0_out_dist_Knn[18]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L0_out_dist_Knn[19]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L1_out_dist_Knn[9]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L0_out_id_Knn[18]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L0_out_id_Knn[19]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L1_out_id_Knn[9]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd20",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L0_out_dist_Knn[20]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L0_out_dist_Knn[21]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L1_out_dist_Knn[10]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L0_out_id_Knn[20]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L0_out_id_Knn[21]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L1_out_id_Knn[10]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd22",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L0_out_dist_Knn[22]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L0_out_dist_Knn[23]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L1_out_dist_Knn[11]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L0_out_id_Knn[22]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L0_out_id_Knn[23]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L1_out_id_Knn[11]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L1_out_dist_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L1_out_dist_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L2_out_dist_Knn[0]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L1_out_id_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L1_out_id_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L2_out_id_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd2",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L1_out_dist_Knn[2]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L1_out_dist_Knn[3]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L2_out_dist_Knn[1]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L1_out_id_Knn[2]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L1_out_id_Knn[3]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L2_out_id_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd4",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L1_out_dist_Knn[4]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L1_out_dist_Knn[5]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L2_out_dist_Knn[2]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L1_out_id_Knn[4]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L1_out_id_Knn[5]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L2_out_id_Knn[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd6",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L1_out_dist_Knn[6]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L1_out_dist_Knn[7]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L2_out_dist_Knn[3]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L1_out_id_Knn[6]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L1_out_id_Knn[7]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L2_out_id_Knn[3]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd8",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L1_out_dist_Knn[8]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L1_out_dist_Knn[9]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L2_out_dist_Knn[4]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L1_out_id_Knn[8]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L1_out_id_Knn[9]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L2_out_id_Knn[4]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L2_out_dist_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L2_out_dist_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L3_out_dist_Knn[0]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L2_out_id_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L2_out_id_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L3_out_id_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd2",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L2_out_dist_Knn[2]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L2_out_dist_Knn[3]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L3_out_dist_Knn[1]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L2_out_id_Knn[2]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L2_out_id_Knn[3]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L3_out_id_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd4",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L2_out_dist_Knn[4]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L2_out_dist_Knn[5]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L3_out_dist_Knn[2]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L2_out_id_Knn[4]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L2_out_id_Knn[5]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L3_out_id_Knn[2]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ],
                "merge_trio_streams": [
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd24",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L0_out_dist_Knn[24]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L0_out_dist_Knn[25]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_3": {
                                "arg": "L0_out_dist_Knn[26]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L1_out_dist_Knn[12]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L0_out_id_Knn[24]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L0_out_id_Knn[25]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_3": {
                                "arg": "L0_out_id_Knn[26]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L1_out_id_Knn[12]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd10",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L1_out_dist_Knn[10]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L1_out_dist_Knn[11]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_3": {
                                "arg": "L1_out_dist_Knn[12]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_ostream": {
                                "arg": "L2_out_dist_Knn[5]",
                                "cat": "ostream"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L1_out_id_Knn[10]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L1_out_id_Knn[11]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_3": {
                                "arg": "L1_out_id_Knn[12]",
                                "cat": "istream"
                            },
                            "hiermerge_id_ostream": {
                                "arg": "L2_out_id_Knn[5]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ],
                "merge_trio_streams_FINAL": [
                    {
                        "args": {
                            "debug_PE_idx": {
                                "arg": "64'd18446744073709551615",
                                "cat": "scalar"
                            },
                            "debug_seg_d2l_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "debug_stage_idx": {
                                "arg": "64'd2",
                                "cat": "scalar"
                            },
                            "hiermerge_dist_istream_1": {
                                "arg": "L3_out_dist_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_2": {
                                "arg": "L3_out_dist_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_istream_3": {
                                "arg": "L3_out_dist_Knn[2]",
                                "cat": "istream"
                            },
                            "hiermerge_dist_output": {
                                "arg": "final_out_dist",
                                "cat": "async_mmap"
                            },
                            "hiermerge_id_istream_1": {
                                "arg": "L3_out_id_Knn[0]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_2": {
                                "arg": "L3_out_id_Knn[1]",
                                "cat": "istream"
                            },
                            "hiermerge_id_istream_3": {
                                "arg": "L3_out_id_Knn[2]",
                                "cat": "istream"
                            },
                            "hiermerge_id_output": {
                                "arg": "final_out_id",
                                "cat": "async_mmap"
                            }
                        },
                        "step": 0
                    }
                ],
                "para_partial_sort": [
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_0_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_0_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_0_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_0_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_0_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_0_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_1_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_1_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_1_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_1_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_1_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_1_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd2",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_2_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_2_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_2_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd2",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_2_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_2_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_2_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd3",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_3_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_3_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_3_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd3",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_3_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_3_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_3_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd4",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_4_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_4_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_4_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd4",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_4_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_4_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_4_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd5",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_5_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_5_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_5_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd5",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_5_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_5_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_5_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd6",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_6_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_6_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_6_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd6",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_6_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_6_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_6_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd7",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_7_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_7_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_7_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd7",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_7_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_7_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_7_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd8",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_8_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_8_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_8_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd8",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_8_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_8_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_8_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd9",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_9_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_9_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_9_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd9",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_9_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_9_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_9_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd10",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_10_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_10_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_10_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd10",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_10_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_10_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_10_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd11",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_11_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_11_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_11_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd11",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_11_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_11_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_11_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd12",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_12_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_12_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_12_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd12",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_12_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_12_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_12_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd13",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_13_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_13_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_13_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd13",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_13_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_13_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_13_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd14",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_14_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_14_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_14_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd14",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_14_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_14_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_14_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd15",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_15_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_15_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_15_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd15",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_15_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_15_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_15_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd16",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_16_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_16_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_16_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd16",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_16_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_16_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_16_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd17",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_17_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_17_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_17_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd17",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_17_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_17_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_17_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd18",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_18_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_18_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_18_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd18",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_18_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_18_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_18_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd19",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_19_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_19_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_19_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd19",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_19_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_19_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_19_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd20",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_20_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_20_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_20_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd20",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_20_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_20_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_20_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd21",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_21_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_21_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_21_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd21",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_21_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_21_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_21_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd22",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_22_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_22_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_22_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd22",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_22_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_22_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_22_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd23",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_23_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_23_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_23_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd23",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_23_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_23_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_23_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd24",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_24_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_24_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_24_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd24",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_24_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_24_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_24_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd25",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_25_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_25_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_25_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd25",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_25_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_25_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_25_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd26",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_26_Knn[0]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd0",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_26_Knn[0]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_26_Knn[0]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    },
                    {
                        "args": {
                            "PE_idx": {
                                "arg": "64'd26",
                                "cat": "scalar"
                            },
                            "compute_to_sort_stream": {
                                "arg": "compute_to_sort_stream_26_Knn[1]",
                                "cat": "istream"
                            },
                            "seg_idx": {
                                "arg": "64'd1",
                                "cat": "scalar"
                            },
                            "sort_to_hiermerge_dist_stream_0": {
                                "arg": "sort_to_hiermerge_dist_stream_26_Knn[1]",
                                "cat": "ostream"
                            },
                            "sort_to_hiermerge_id_stream_0": {
                                "arg": "sort_to_hiermerge_id_stream_26_Knn[1]",
                                "cat": "ostream"
                            }
                        },
                        "step": 0
                    }
                ]
            },
            "vendor": "xilinx"
        },
        "compute_KNN": {
            "code": "\n\n #include \"ap_int.h\"\n\n#include \"ap_axi_sdata.h\"\n\n#include <tapa.h>\n\n#include <inttypes.h>\n\n#include <stdlib.h>\n\n// CEIL_DIVISION(X, Y) = ceil(x/y).\n// ROUND_TO_NEXT_MULTIPLE(X, Y) rounds X up to the nearest multiple of Y.\nconst int IWIDTH = 512;\nconst int INPUT_DIM = 16;\nconst int TOP = 10;\n/***************************************************************/\n// L2I = Local to Interface\nconst int L2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * (32)) + 1 );\n// D2L = Data_Type to Local\nconst int D2L_FACTOR_W = ( ((32)-1)/32 + 1 );\n// D2I = Data_Type to Interface\nconst int D2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * 32) + 1 );\n// I2D = Interface to Data_type\nconst int I2D_FACTOR_W = ( ((INPUT_DIM * 32)-1)/IWIDTH + 1 );\n// // DEBUG NOTE: BW_FACTOR = 1.1349753694581282\n// Round up to the nearest multiple, because otherwise some logic breaks (incorrect sizes => bad logic in edgecases)\n// We partition the input points, so each PE gets it's own partition, to maximize parallelization.\nconst int PARTITION_LEN_IN_I = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / IWIDTH);\nconst int PARTITION_LEN_IN_D = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * 32));\nconst int PARTITION_LEN_IN_L = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * (32)));\n// We name each sub-array of the local_distance arrays a \"segment\".\n//const int SWIDTH = DATA_TYPE_TOTAL_SZ; \n//typedef ap_axiu<SWIDTH, 0, 0, 0> pkt; \n//typedef ap_axiu<32, 0, 0, 0>    id_pkt;\n//#define STREAM_WIDTH ap_uint<SWIDTH> \nconst int NUM_FEATURES_PER_READ = (IWIDTH/32);\nconst int QUERY_FEATURE_RESERVE = (128);\nstatic inline float absval(float input){\n    return (input > 0 ? input : static_cast<float>(-1*input));\n}\n// purposefully empty #define\n/*************************************************/\n/******************** LOADS: *********************/\n/*************************************************/\nvoid load_KNN( int debug_PE_ID,\n                 uint64_t  searchSpace,\n                 tapa::ostream<ap_uint<IWIDTH> >& load_to_compute_stream)\n;\n/*************************************************/\n/******************* COMPUTES: *******************/\n/*************************************************/\nvoid compute_KNN( int debug_pe_idx,\n                    int debug_start_idx,\n                    tapa::istream<ap_uint<IWIDTH> >& load_to_compute_stream,\n                    tapa::ostreams<float, (L2I_FACTOR_W * 2)>& compute_to_sort_stream)\n{\n\n\n#pragma HLS disaggregate variable = load_to_compute_stream\n#pragma HLS interface ap_fifo port = load_to_compute_stream._\n#pragma HLS aggregate variable = load_to_compute_stream._ bit\n#pragma HLS interface ap_fifo port = load_to_compute_stream._peek\n#pragma HLS aggregate variable = load_to_compute_stream._peek bit\nvoid(load_to_compute_stream._.empty());\nvoid(load_to_compute_stream._peek.empty());\n\n#pragma HLS disaggregate variable = compute_to_sort_stream\n#pragma HLS array_partition variable = compute_to_sort_stream complete\n#pragma HLS interface ap_fifo port = compute_to_sort_stream[0]._\n#pragma HLS aggregate variable = compute_to_sort_stream[0]._ bit\nvoid(compute_to_sort_stream[0]._.full());\n#pragma HLS interface ap_fifo port = compute_to_sort_stream[1]._\n#pragma HLS aggregate variable = compute_to_sort_stream[1]._ bit\nvoid(compute_to_sort_stream[1]._.full());\n\n#pragma HLS INLINE OFF\n    ap_uint<IWIDTH> cur_data = 0;\n    float local_Query[INPUT_DIM];\n#pragma HLS ARRAY_PARTITION variable=local_Query complete dim=1\n    /***********************************************/\n    GET_QUERYDATA:\n    for (int i = 0 ; i < (INPUT_DIM-1)/NUM_FEATURES_PER_READ + 1; ++i)\n    {\n        ap_uint<32> tmp = 0;\n        int input_dim_idx = 0;\n        cur_data = load_to_compute_stream.read();\n        for ( int j = 0;\n              j < NUM_FEATURES_PER_READ && input_dim_idx < INPUT_DIM;\n              ++j, ++input_dim_idx)\n        {\n            tmp.range(32 -1, 0)\n                = cur_data.range(j*32 + (32 -1),\n                                 j*32);\n            local_Query[input_dim_idx] = *((float*)(&tmp));\n        }\n    }\n    COMPUTE_DATA:\n    for (int jj = 0; jj < (PARTITION_LEN_IN_I / (L2I_FACTOR_W * 2)); ++jj){\n        for (int ii = 0 ; ii < (L2I_FACTOR_W * 2); ++ii){\n#pragma HLS PIPELINE II=1\n            float aggregated_local_dists = 0;\n            //#ifndef __SYNTHESIS__\n            //if (debug_pe_idx == 0)\n            //{\n            //    printf(\"COMPUTE: Reading from load_to_compute_stream for the %d-th time\\n\",\n            //            DEBUG_load_ctr++);\n            //}\n            //#endif\n            cur_data = load_to_compute_stream.read();\n            for (int l2i = 0; l2i < L2I_FACTOR_W; ++l2i)\n            {\n#pragma HLS UNROLL\n                for (int d2l = 0; d2l < D2L_FACTOR_W; ++d2l){\n#pragma HLS UNROLL\n                    int d2i = d2l + D2L_FACTOR_W*l2i;\n                    float delta_squared_sum = 0.0;\n                    int start_idx = d2i * INPUT_DIM;\n                    for (int ll = 0; ll < INPUT_DIM; ++ll){\n                        unsigned int sp_range_idx = (start_idx + ll) * 32;\n                        float sp_dim_item_value;\n                        ap_uint<32> tmp = 0;\n                        tmp.range(32 -1, 0) =\n                            cur_data.range(sp_range_idx + (32 -1),\n                                                   sp_range_idx);\n                        sp_dim_item_value = *((float*) (&tmp));\n                        float delta = absval(sp_dim_item_value - local_Query[ll]);\n                        delta_squared_sum += delta * delta;\n                    }\n                    aggregated_local_dists = delta_squared_sum;\n                    //#ifndef __SYNTHESIS__\n                    //if (delta_squared_sum < MAX_DATA_TYPE_VAL)\n                    //{\n                    //    printf(\"COMPUTE: At index %d, delta_squared_sum = %f\\n\", \n                    //            debug_start_idx + ii*SEGMENT_SIZE_IN_D +\n                    //            jj*D2I_FACTOR_W + d2i,\n                    //            delta_squared_sum);\n                    //}\n                    //#endif\n                }\n                int stream_idx = (ii*L2I_FACTOR_W + l2i)%(L2I_FACTOR_W * 2);\n                compute_to_sort_stream[stream_idx].write(aggregated_local_dists);\n                //#ifndef __SYNTHESIS__\n                //if (debug_pe_idx == 0)\n                //{\n                //    printf(\"COMPUTE: Writing the value %f to compute_to_sort_stream number %d, for the %d'th time\\n\", \n                //            aggregated_local_dists,\n                //            stream_idx,\n                //            DEBUG_write_counters[stream_idx]++);\n                //}\n                //#endif\n                aggregated_local_dists = 0;\n            }\n        }\n    }\n}\nvoid swap(float* a, float* b,\n               int* x, int* y)\n{\n#pragma HLS INLINE\n    float tmpdist_a;\n    float tmpdist_b;\n    int tmpid_x;\n    int tmpid_y;\n    tmpdist_a = *a;\n    tmpdist_b = *b;\n    *b = tmpdist_a;\n    *a = tmpdist_b;\n    tmpid_x = *x;\n    tmpid_y = *y;\n    *x = tmpid_y;\n    *y = tmpid_x;\n}\nvoid para_partial_sort(const int PE_idx,\n                       int seg_idx,\n                       tapa::istream<float>& compute_to_sort_stream,\n                       tapa::ostream<float>& sort_to_hiermerge_dist_stream_0,\n                       tapa::ostream<int>& sort_to_hiermerge_id_stream_0)\n;\nvoid merge_dual_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid merge_trio_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid write_out_mmap(\n                    tapa::async_mmap<float>& output_knnDist,\n                    tapa::async_mmap<int>& output_knnId,\n                    float output_dist,\n                    int output_id,\n                    int& i_req_dist,\n                    int& i_resp_dist,\n                    int& i_req_id,\n                    int& i_resp_id\n) {\n#pragma HLS INLINE\n    // Writing the distance values:\n    if (i_req_dist < TOP && i_req_dist >= 0 &&\n        !output_knnDist.write_addr.full() &&\n        !output_knnDist.write_data.full()\n    ) {\n      output_knnDist.write_addr.try_write(i_req_dist);\n      output_knnDist.write_data.try_write(output_dist);\n      --i_req_dist;\n    }\n    if (!output_knnDist.write_resp.empty()) {\n      i_resp_dist += (unsigned int)(output_knnDist.write_resp.read(nullptr)) + 1;\n    }\n    // Writing the ID values:\n    if (i_req_id < TOP && i_req_id >= 0 &&\n        !output_knnId.write_addr.full() &&\n        !output_knnId.write_data.full()\n    ) {\n      output_knnId.write_addr.try_write(i_req_id);\n      output_knnId.write_data.try_write(output_id);\n      --i_req_id;\n    }\n    if (!output_knnId.write_resp.empty()) {\n      i_resp_id += (unsigned int)(output_knnId.write_resp.read(nullptr)) + 1;\n    }\n}\nvoid merge_dual_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::async_mmap<float>& hiermerge_dist_output,\n                        tapa::async_mmap<int>& hiermerge_id_output\n)\n{\n    float dist_1 = hiermerge_dist_istream_1.read();\n    float dist_2 = hiermerge_dist_istream_2.read();\n    int id_1 = hiermerge_id_istream_1.read();\n    int id_2 = hiermerge_id_istream_2.read();\n    int stream1_read_count = 1;\n    int stream2_read_count = 1;\n    int i_req_dist = TOP-1;\n    int i_resp_dist = TOP-1;\n    int i_req_id = TOP-1;\n    int i_resp_id = TOP-1;\n    for (int k = TOP-1; k > 0; --k)\n    {\n        if (dist_1 <= dist_2)\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_1,\n                            id_1,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream1_read_count < TOP)\n            {\n                ++stream1_read_count;\n                dist_1 = hiermerge_dist_istream_1.read();\n                id_1 = hiermerge_id_istream_1.read();\n            }\n        }\n        else\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_2,\n                            id_2,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream2_read_count < TOP)\n            {\n                ++stream2_read_count;\n                dist_2 = hiermerge_dist_istream_2.read();\n                id_2 = hiermerge_id_istream_2.read();\n            }\n        }\n    }\n    // Final write.\n    if (dist_1 <= dist_2) {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_1,\n                        id_1,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    else {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_2,\n                        id_2,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    // Empty the input streams.\n    while (stream1_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream1_read_count;\n        dist_1 = hiermerge_dist_istream_1.read();\n        id_1 = hiermerge_id_istream_1.read();\n    }\n    while (stream2_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream2_read_count;\n        dist_2 = hiermerge_dist_istream_2.read();\n        id_2 = hiermerge_id_istream_2.read();\n    }\n}\nvoid merge_trio_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        uint64_t  hiermerge_dist_output,\n                        uint64_t  hiermerge_id_output\n)\n;\nvoid Knn(\n    uint64_t  in_0,\n    uint64_t  in_1,\n    uint64_t  in_2,\n    uint64_t  in_3,\n    uint64_t  in_4,\n    uint64_t  in_5,\n    uint64_t  in_6,\n    uint64_t  in_7,\n    uint64_t  in_8,\n    uint64_t  in_9,\n    uint64_t  in_10,\n    uint64_t  in_11,\n    uint64_t  in_12,\n    uint64_t  in_13,\n    uint64_t  in_14,\n    uint64_t  in_15,\n    uint64_t  in_16,\n    uint64_t  in_17,\n    uint64_t  in_18,\n    uint64_t  in_19,\n    uint64_t  in_20,\n    uint64_t  in_21,\n    uint64_t  in_22,\n    uint64_t  in_23,\n    uint64_t  in_24,\n    uint64_t  in_25,\n    uint64_t  in_26,\n    uint64_t  final_out_dist,\n    uint64_t  final_out_id\n) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "load_KNN": {
            "code": "\n\n #include \"ap_int.h\"\n\n#include \"ap_axi_sdata.h\"\n\n#include <tapa.h>\n\n#include <inttypes.h>\n\n#include <stdlib.h>\n\n// CEIL_DIVISION(X, Y) = ceil(x/y).\n// ROUND_TO_NEXT_MULTIPLE(X, Y) rounds X up to the nearest multiple of Y.\nconst int IWIDTH = 512;\nconst int INPUT_DIM = 16;\nconst int TOP = 10;\n/***************************************************************/\n// L2I = Local to Interface\nconst int L2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * (32)) + 1 );\n// D2L = Data_Type to Local\nconst int D2L_FACTOR_W = ( ((32)-1)/32 + 1 );\n// D2I = Data_Type to Interface\nconst int D2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * 32) + 1 );\n// I2D = Interface to Data_type\nconst int I2D_FACTOR_W = ( ((INPUT_DIM * 32)-1)/IWIDTH + 1 );\n// // DEBUG NOTE: BW_FACTOR = 1.1349753694581282\n// Round up to the nearest multiple, because otherwise some logic breaks (incorrect sizes => bad logic in edgecases)\n// We partition the input points, so each PE gets it's own partition, to maximize parallelization.\nconst int PARTITION_LEN_IN_I = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / IWIDTH);\nconst int PARTITION_LEN_IN_D = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * 32));\nconst int PARTITION_LEN_IN_L = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * (32)));\n// We name each sub-array of the local_distance arrays a \"segment\".\n//const int SWIDTH = DATA_TYPE_TOTAL_SZ; \n//typedef ap_axiu<SWIDTH, 0, 0, 0> pkt; \n//typedef ap_axiu<32, 0, 0, 0>    id_pkt;\n//#define STREAM_WIDTH ap_uint<SWIDTH> \nconst int NUM_FEATURES_PER_READ = (IWIDTH/32);\nconst int QUERY_FEATURE_RESERVE = (128);\nstatic inline float absval(float input){\n    return (input > 0 ? input : static_cast<float>(-1*input));\n}\n// purposefully empty #define\n/*************************************************/\n/******************** LOADS: *********************/\n/*************************************************/\nvoid load_KNN( int debug_PE_ID,\n                 tapa::async_mmap<ap_uint<IWIDTH> > & searchSpace,\n                 tapa::ostream<ap_uint<IWIDTH> >& load_to_compute_stream)\n{\n\n#pragma HLS disaggregate variable = searchSpace\n#pragma HLS interface ap_fifo port = searchSpace.read_addr._\n#pragma HLS aggregate variable = searchSpace.read_addr._  bit\n#pragma HLS interface ap_fifo port = searchSpace.read_data._\n#pragma HLS aggregate variable = searchSpace.read_data._  bit\n#pragma HLS interface ap_fifo port = searchSpace.write_addr._\n#pragma HLS aggregate variable = searchSpace.write_addr._  bit\n#pragma HLS interface ap_fifo port = searchSpace.write_data._\n#pragma HLS aggregate variable = searchSpace.write_data._  bit\n#pragma HLS interface ap_fifo port = searchSpace.write_resp._\n#pragma HLS aggregate variable = searchSpace.write_resp._  bit\n#pragma HLS disaggregate variable = searchSpace .read_data\n#pragma HLS interface ap_fifo port = searchSpace.read_data._peek\n#pragma HLS aggregate variable = searchSpace.read_data._peek bit\n#pragma HLS disaggregate variable = searchSpace .write_resp\n#pragma HLS interface ap_fifo port = searchSpace.write_resp._peek\n#pragma HLS aggregate variable = searchSpace.write_resp._peek bit\nvoid(searchSpace.read_addr._.full());\nvoid(searchSpace.read_data._.empty());\nvoid(searchSpace.read_data._peek.empty());\nvoid(searchSpace.write_addr._.full());\nvoid(searchSpace.write_data._.full());\nvoid(searchSpace.write_resp._.empty());\nvoid(searchSpace.write_resp._peek.empty());\n\n#pragma HLS disaggregate variable = load_to_compute_stream\n#pragma HLS interface ap_fifo port = load_to_compute_stream._\n#pragma HLS aggregate variable = load_to_compute_stream._ bit\nvoid(load_to_compute_stream._.full());\n\n#pragma HLS INLINE OFF\n    ap_uint<IWIDTH> loaded_value = 0;\n    LOAD_QUERY:\n    for (int i_req = 0, i_resp = 0; i_resp < (INPUT_DIM-1)/NUM_FEATURES_PER_READ + 1; ) {\n#pragma HLS loop_tripcount min=((INPUT_DIM-1)/NUM_FEATURES_PER_READ + 1) max=((INPUT_DIM-1)/NUM_FEATURES_PER_READ + 1)\n#pragma HLS pipeline II=1\n        //Think of addr as an array index.\n        int addr = i_req;\n        if (i_req < (INPUT_DIM-1)/NUM_FEATURES_PER_READ + 1 && searchSpace.read_addr.try_write(addr)) {\n            i_req++;\n        }\n        if (!searchSpace.read_data.empty()) {\n            loaded_value = searchSpace.read_data.read(nullptr);\n            i_resp++;\n            // DEBUGGING:\n            load_to_compute_stream.write(loaded_value);\n        }\n    }\n    LOAD_SEARCHSPACE:\n    for (int i_req = 0, i_resp = 0; i_resp < PARTITION_LEN_IN_I; ) {\n#pragma HLS loop_tripcount min=PARTITION_LEN_IN_I max=PARTITION_LEN_IN_I\n#pragma HLS pipeline II=1\n        //Think of addr as an array index.\n        int addr = (QUERY_FEATURE_RESERVE / NUM_FEATURES_PER_READ) + i_req;\n        if (i_req < PARTITION_LEN_IN_I && searchSpace.read_addr.try_write(addr)) {\n            i_req++;\n        }\n        if (!searchSpace.read_data.empty()) {\n            loaded_value = searchSpace.read_data.read(nullptr);\n            i_resp++;\n            //// DEBUGGING: Printing the loaded data:\n            //#ifndef __SYNTHESIS__\n            //for (int i = 0; i < NUM_FEATURES_PER_READ; ++i)\n            //{\n            //    DATA_TYPE cur_value = 0;\n            //    TRANSFER_TYPE tmp;\n            //    tmp.range(DATA_TYPE_TOTAL_SZ - 1, 0)\n            //        = loaded_value(i*DATA_TYPE_TOTAL_SZ + (DATA_TYPE_TOTAL_SZ - 1),\n            //                        i*DATA_TYPE_TOTAL_SZ);\n            //    cur_value = *((DATA_TYPE*) (&tmp));\n            //    if (cur_value < MAX_DATA_TYPE_VAL && debug_PE_ID == 0)\n            //    {\n            //        printf(\"LOAD SEARCHSPACE: value = %f, i_resp = %d\\n\", cur_value, i_resp);\n            //    }\n            //}\n            //#endif\n            //// DEBUGGING: Printing how many times we write to each stream:\n            //#ifndef __SYNTHESIS__\n            //if (debug_PE_ID == 0)\n            //{\n            //    printf(\"LOAD: Writing to load_to_compute_stream for the %d-th time\\n\",\n            //            i_resp-1);\n            //}\n            //#endif\n            load_to_compute_stream.write(loaded_value);\n        }\n    }\n}\n/*************************************************/\n/******************* COMPUTES: *******************/\n/*************************************************/\nvoid compute_KNN( int debug_pe_idx,\n                    int debug_start_idx,\n                    tapa::istream<ap_uint<IWIDTH> >& load_to_compute_stream,\n                    tapa::ostreams<float, (L2I_FACTOR_W * 2)>& compute_to_sort_stream)\n;\nvoid swap(float* a, float* b,\n               int* x, int* y)\n{\n#pragma HLS INLINE\n    float tmpdist_a;\n    float tmpdist_b;\n    int tmpid_x;\n    int tmpid_y;\n    tmpdist_a = *a;\n    tmpdist_b = *b;\n    *b = tmpdist_a;\n    *a = tmpdist_b;\n    tmpid_x = *x;\n    tmpid_y = *y;\n    *x = tmpid_y;\n    *y = tmpid_x;\n}\nvoid para_partial_sort(const int PE_idx,\n                       int seg_idx,\n                       tapa::istream<float>& compute_to_sort_stream,\n                       tapa::ostream<float>& sort_to_hiermerge_dist_stream_0,\n                       tapa::ostream<int>& sort_to_hiermerge_id_stream_0)\n;\nvoid merge_dual_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid merge_trio_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid write_out_mmap(\n                    tapa::async_mmap<float>& output_knnDist,\n                    tapa::async_mmap<int>& output_knnId,\n                    float output_dist,\n                    int output_id,\n                    int& i_req_dist,\n                    int& i_resp_dist,\n                    int& i_req_id,\n                    int& i_resp_id\n) {\n#pragma HLS INLINE\n    // Writing the distance values:\n    if (i_req_dist < TOP && i_req_dist >= 0 &&\n        !output_knnDist.write_addr.full() &&\n        !output_knnDist.write_data.full()\n    ) {\n      output_knnDist.write_addr.try_write(i_req_dist);\n      output_knnDist.write_data.try_write(output_dist);\n      --i_req_dist;\n    }\n    if (!output_knnDist.write_resp.empty()) {\n      i_resp_dist += (unsigned int)(output_knnDist.write_resp.read(nullptr)) + 1;\n    }\n    // Writing the ID values:\n    if (i_req_id < TOP && i_req_id >= 0 &&\n        !output_knnId.write_addr.full() &&\n        !output_knnId.write_data.full()\n    ) {\n      output_knnId.write_addr.try_write(i_req_id);\n      output_knnId.write_data.try_write(output_id);\n      --i_req_id;\n    }\n    if (!output_knnId.write_resp.empty()) {\n      i_resp_id += (unsigned int)(output_knnId.write_resp.read(nullptr)) + 1;\n    }\n}\nvoid merge_dual_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::async_mmap<float>& hiermerge_dist_output,\n                        tapa::async_mmap<int>& hiermerge_id_output\n)\n{\n    float dist_1 = hiermerge_dist_istream_1.read();\n    float dist_2 = hiermerge_dist_istream_2.read();\n    int id_1 = hiermerge_id_istream_1.read();\n    int id_2 = hiermerge_id_istream_2.read();\n    int stream1_read_count = 1;\n    int stream2_read_count = 1;\n    int i_req_dist = TOP-1;\n    int i_resp_dist = TOP-1;\n    int i_req_id = TOP-1;\n    int i_resp_id = TOP-1;\n    for (int k = TOP-1; k > 0; --k)\n    {\n        if (dist_1 <= dist_2)\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_1,\n                            id_1,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream1_read_count < TOP)\n            {\n                ++stream1_read_count;\n                dist_1 = hiermerge_dist_istream_1.read();\n                id_1 = hiermerge_id_istream_1.read();\n            }\n        }\n        else\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_2,\n                            id_2,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream2_read_count < TOP)\n            {\n                ++stream2_read_count;\n                dist_2 = hiermerge_dist_istream_2.read();\n                id_2 = hiermerge_id_istream_2.read();\n            }\n        }\n    }\n    // Final write.\n    if (dist_1 <= dist_2) {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_1,\n                        id_1,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    else {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_2,\n                        id_2,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    // Empty the input streams.\n    while (stream1_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream1_read_count;\n        dist_1 = hiermerge_dist_istream_1.read();\n        id_1 = hiermerge_id_istream_1.read();\n    }\n    while (stream2_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream2_read_count;\n        dist_2 = hiermerge_dist_istream_2.read();\n        id_2 = hiermerge_id_istream_2.read();\n    }\n}\nvoid merge_trio_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        uint64_t  hiermerge_dist_output,\n                        uint64_t  hiermerge_id_output\n)\n;\nvoid Knn(\n    uint64_t  in_0,\n    uint64_t  in_1,\n    uint64_t  in_2,\n    uint64_t  in_3,\n    uint64_t  in_4,\n    uint64_t  in_5,\n    uint64_t  in_6,\n    uint64_t  in_7,\n    uint64_t  in_8,\n    uint64_t  in_9,\n    uint64_t  in_10,\n    uint64_t  in_11,\n    uint64_t  in_12,\n    uint64_t  in_13,\n    uint64_t  in_14,\n    uint64_t  in_15,\n    uint64_t  in_16,\n    uint64_t  in_17,\n    uint64_t  in_18,\n    uint64_t  in_19,\n    uint64_t  in_20,\n    uint64_t  in_21,\n    uint64_t  in_22,\n    uint64_t  in_23,\n    uint64_t  in_24,\n    uint64_t  in_25,\n    uint64_t  in_26,\n    uint64_t  final_out_dist,\n    uint64_t  final_out_id\n) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "merge_dual_streams": {
            "code": "\n\n #include \"ap_int.h\"\n\n#include \"ap_axi_sdata.h\"\n\n#include <tapa.h>\n\n#include <inttypes.h>\n\n#include <stdlib.h>\n\n// CEIL_DIVISION(X, Y) = ceil(x/y).\n// ROUND_TO_NEXT_MULTIPLE(X, Y) rounds X up to the nearest multiple of Y.\nconst int IWIDTH = 512;\nconst int INPUT_DIM = 16;\nconst int TOP = 10;\n/***************************************************************/\n// L2I = Local to Interface\nconst int L2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * (32)) + 1 );\n// D2L = Data_Type to Local\nconst int D2L_FACTOR_W = ( ((32)-1)/32 + 1 );\n// D2I = Data_Type to Interface\nconst int D2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * 32) + 1 );\n// I2D = Interface to Data_type\nconst int I2D_FACTOR_W = ( ((INPUT_DIM * 32)-1)/IWIDTH + 1 );\n// // DEBUG NOTE: BW_FACTOR = 1.1349753694581282\n// Round up to the nearest multiple, because otherwise some logic breaks (incorrect sizes => bad logic in edgecases)\n// We partition the input points, so each PE gets it's own partition, to maximize parallelization.\nconst int PARTITION_LEN_IN_I = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / IWIDTH);\nconst int PARTITION_LEN_IN_D = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * 32));\nconst int PARTITION_LEN_IN_L = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * (32)));\n// We name each sub-array of the local_distance arrays a \"segment\".\n//const int SWIDTH = DATA_TYPE_TOTAL_SZ; \n//typedef ap_axiu<SWIDTH, 0, 0, 0> pkt; \n//typedef ap_axiu<32, 0, 0, 0>    id_pkt;\n//#define STREAM_WIDTH ap_uint<SWIDTH> \nconst int NUM_FEATURES_PER_READ = (IWIDTH/32);\nconst int QUERY_FEATURE_RESERVE = (128);\nstatic inline float absval(float input){\n    return (input > 0 ? input : static_cast<float>(-1*input));\n}\n// purposefully empty #define\n/*************************************************/\n/******************** LOADS: *********************/\n/*************************************************/\nvoid load_KNN( int debug_PE_ID,\n                 uint64_t  searchSpace,\n                 tapa::ostream<ap_uint<IWIDTH> >& load_to_compute_stream)\n;\n/*************************************************/\n/******************* COMPUTES: *******************/\n/*************************************************/\nvoid compute_KNN( int debug_pe_idx,\n                    int debug_start_idx,\n                    tapa::istream<ap_uint<IWIDTH> >& load_to_compute_stream,\n                    tapa::ostreams<float, (L2I_FACTOR_W * 2)>& compute_to_sort_stream)\n;\nvoid swap(float* a, float* b,\n               int* x, int* y)\n{\n#pragma HLS INLINE\n    float tmpdist_a;\n    float tmpdist_b;\n    int tmpid_x;\n    int tmpid_y;\n    tmpdist_a = *a;\n    tmpdist_b = *b;\n    *b = tmpdist_a;\n    *a = tmpdist_b;\n    tmpid_x = *x;\n    tmpid_y = *y;\n    *x = tmpid_y;\n    *y = tmpid_x;\n}\nvoid para_partial_sort(const int PE_idx,\n                       int seg_idx,\n                       tapa::istream<float>& compute_to_sort_stream,\n                       tapa::ostream<float>& sort_to_hiermerge_dist_stream_0,\n                       tapa::ostream<int>& sort_to_hiermerge_id_stream_0)\n;\nvoid merge_dual_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n{\n\n\n\n#pragma HLS disaggregate variable = hiermerge_dist_istream_1\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_1._\n#pragma HLS aggregate variable = hiermerge_dist_istream_1._ bit\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_1._peek\n#pragma HLS aggregate variable = hiermerge_dist_istream_1._peek bit\nvoid(hiermerge_dist_istream_1._.empty());\nvoid(hiermerge_dist_istream_1._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_id_istream_1\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_1._\n#pragma HLS aggregate variable = hiermerge_id_istream_1._ bit\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_1._peek\n#pragma HLS aggregate variable = hiermerge_id_istream_1._peek bit\nvoid(hiermerge_id_istream_1._.empty());\nvoid(hiermerge_id_istream_1._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_dist_istream_2\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_2._\n#pragma HLS aggregate variable = hiermerge_dist_istream_2._ bit\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_2._peek\n#pragma HLS aggregate variable = hiermerge_dist_istream_2._peek bit\nvoid(hiermerge_dist_istream_2._.empty());\nvoid(hiermerge_dist_istream_2._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_id_istream_2\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_2._\n#pragma HLS aggregate variable = hiermerge_id_istream_2._ bit\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_2._peek\n#pragma HLS aggregate variable = hiermerge_id_istream_2._peek bit\nvoid(hiermerge_id_istream_2._.empty());\nvoid(hiermerge_id_istream_2._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_dist_ostream\n#pragma HLS interface ap_fifo port = hiermerge_dist_ostream._\n#pragma HLS aggregate variable = hiermerge_dist_ostream._ bit\nvoid(hiermerge_dist_ostream._.full());\n\n#pragma HLS disaggregate variable = hiermerge_id_ostream\n#pragma HLS interface ap_fifo port = hiermerge_id_ostream._\n#pragma HLS aggregate variable = hiermerge_id_ostream._ bit\nvoid(hiermerge_id_ostream._.full());\n\n    float dist_1 = hiermerge_dist_istream_1.read();\n    float dist_2 = hiermerge_dist_istream_2.read();\n    int id_1 = hiermerge_id_istream_1.read();\n    int id_2 = hiermerge_id_istream_2.read();\n    int stream1_read_count = 1;\n    int stream2_read_count = 1;\n    for (int k = TOP-1; k > 0; --k)\n    {\n        if (dist_1 <= dist_2)\n        {\n            hiermerge_dist_ostream.write(dist_1);\n            hiermerge_id_ostream.write(id_1);\n            if (stream1_read_count < TOP)\n            {\n                ++stream1_read_count;\n                dist_1 = hiermerge_dist_istream_1.read();\n                id_1 = hiermerge_id_istream_1.read();\n            }\n        }\n        else\n        {\n            hiermerge_dist_ostream.write(dist_2);\n            hiermerge_id_ostream.write(id_2);\n            if (stream2_read_count < TOP)\n            {\n                ++stream2_read_count;\n                dist_2 = hiermerge_dist_istream_2.read();\n                id_2 = hiermerge_id_istream_2.read();\n            }\n        }\n    }\n    // Final write.\n    if (dist_1 <= dist_2) {\n        hiermerge_dist_ostream.write(dist_1);\n        hiermerge_id_ostream.write(id_1);\n    }\n    else {\n        hiermerge_dist_ostream.write(dist_2);\n        hiermerge_id_ostream.write(id_2);\n    }\n    // Empty the input streams.\n    // NOTE: The total tripcount of these loops will be TOP.\n    while (stream1_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream1_read_count;\n        dist_1 = hiermerge_dist_istream_1.read();\n        id_1 = hiermerge_id_istream_1.read();\n    }\n    while (stream2_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream2_read_count;\n        dist_2 = hiermerge_dist_istream_2.read();\n        id_2 = hiermerge_id_istream_2.read();\n    }\n}\nvoid merge_trio_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid write_out_mmap(\n                    tapa::async_mmap<float>& output_knnDist,\n                    tapa::async_mmap<int>& output_knnId,\n                    float output_dist,\n                    int output_id,\n                    int& i_req_dist,\n                    int& i_resp_dist,\n                    int& i_req_id,\n                    int& i_resp_id\n) {\n#pragma HLS INLINE\n    // Writing the distance values:\n    if (i_req_dist < TOP && i_req_dist >= 0 &&\n        !output_knnDist.write_addr.full() &&\n        !output_knnDist.write_data.full()\n    ) {\n      output_knnDist.write_addr.try_write(i_req_dist);\n      output_knnDist.write_data.try_write(output_dist);\n      --i_req_dist;\n    }\n    if (!output_knnDist.write_resp.empty()) {\n      i_resp_dist += (unsigned int)(output_knnDist.write_resp.read(nullptr)) + 1;\n    }\n    // Writing the ID values:\n    if (i_req_id < TOP && i_req_id >= 0 &&\n        !output_knnId.write_addr.full() &&\n        !output_knnId.write_data.full()\n    ) {\n      output_knnId.write_addr.try_write(i_req_id);\n      output_knnId.write_data.try_write(output_id);\n      --i_req_id;\n    }\n    if (!output_knnId.write_resp.empty()) {\n      i_resp_id += (unsigned int)(output_knnId.write_resp.read(nullptr)) + 1;\n    }\n}\nvoid merge_dual_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::async_mmap<float>& hiermerge_dist_output,\n                        tapa::async_mmap<int>& hiermerge_id_output\n)\n{\n    float dist_1 = hiermerge_dist_istream_1.read();\n    float dist_2 = hiermerge_dist_istream_2.read();\n    int id_1 = hiermerge_id_istream_1.read();\n    int id_2 = hiermerge_id_istream_2.read();\n    int stream1_read_count = 1;\n    int stream2_read_count = 1;\n    int i_req_dist = TOP-1;\n    int i_resp_dist = TOP-1;\n    int i_req_id = TOP-1;\n    int i_resp_id = TOP-1;\n    for (int k = TOP-1; k > 0; --k)\n    {\n        if (dist_1 <= dist_2)\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_1,\n                            id_1,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream1_read_count < TOP)\n            {\n                ++stream1_read_count;\n                dist_1 = hiermerge_dist_istream_1.read();\n                id_1 = hiermerge_id_istream_1.read();\n            }\n        }\n        else\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_2,\n                            id_2,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream2_read_count < TOP)\n            {\n                ++stream2_read_count;\n                dist_2 = hiermerge_dist_istream_2.read();\n                id_2 = hiermerge_id_istream_2.read();\n            }\n        }\n    }\n    // Final write.\n    if (dist_1 <= dist_2) {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_1,\n                        id_1,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    else {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_2,\n                        id_2,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    // Empty the input streams.\n    while (stream1_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream1_read_count;\n        dist_1 = hiermerge_dist_istream_1.read();\n        id_1 = hiermerge_id_istream_1.read();\n    }\n    while (stream2_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream2_read_count;\n        dist_2 = hiermerge_dist_istream_2.read();\n        id_2 = hiermerge_id_istream_2.read();\n    }\n}\nvoid merge_trio_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        uint64_t  hiermerge_dist_output,\n                        uint64_t  hiermerge_id_output\n)\n;\nvoid Knn(\n    uint64_t  in_0,\n    uint64_t  in_1,\n    uint64_t  in_2,\n    uint64_t  in_3,\n    uint64_t  in_4,\n    uint64_t  in_5,\n    uint64_t  in_6,\n    uint64_t  in_7,\n    uint64_t  in_8,\n    uint64_t  in_9,\n    uint64_t  in_10,\n    uint64_t  in_11,\n    uint64_t  in_12,\n    uint64_t  in_13,\n    uint64_t  in_14,\n    uint64_t  in_15,\n    uint64_t  in_16,\n    uint64_t  in_17,\n    uint64_t  in_18,\n    uint64_t  in_19,\n    uint64_t  in_20,\n    uint64_t  in_21,\n    uint64_t  in_22,\n    uint64_t  in_23,\n    uint64_t  in_24,\n    uint64_t  in_25,\n    uint64_t  in_26,\n    uint64_t  final_out_dist,\n    uint64_t  final_out_id\n) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "merge_trio_streams": {
            "code": "\n\n #include \"ap_int.h\"\n\n#include \"ap_axi_sdata.h\"\n\n#include <tapa.h>\n\n#include <inttypes.h>\n\n#include <stdlib.h>\n\n// CEIL_DIVISION(X, Y) = ceil(x/y).\n// ROUND_TO_NEXT_MULTIPLE(X, Y) rounds X up to the nearest multiple of Y.\nconst int IWIDTH = 512;\nconst int INPUT_DIM = 16;\nconst int TOP = 10;\n/***************************************************************/\n// L2I = Local to Interface\nconst int L2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * (32)) + 1 );\n// D2L = Data_Type to Local\nconst int D2L_FACTOR_W = ( ((32)-1)/32 + 1 );\n// D2I = Data_Type to Interface\nconst int D2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * 32) + 1 );\n// I2D = Interface to Data_type\nconst int I2D_FACTOR_W = ( ((INPUT_DIM * 32)-1)/IWIDTH + 1 );\n// // DEBUG NOTE: BW_FACTOR = 1.1349753694581282\n// Round up to the nearest multiple, because otherwise some logic breaks (incorrect sizes => bad logic in edgecases)\n// We partition the input points, so each PE gets it's own partition, to maximize parallelization.\nconst int PARTITION_LEN_IN_I = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / IWIDTH);\nconst int PARTITION_LEN_IN_D = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * 32));\nconst int PARTITION_LEN_IN_L = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * (32)));\n// We name each sub-array of the local_distance arrays a \"segment\".\n//const int SWIDTH = DATA_TYPE_TOTAL_SZ; \n//typedef ap_axiu<SWIDTH, 0, 0, 0> pkt; \n//typedef ap_axiu<32, 0, 0, 0>    id_pkt;\n//#define STREAM_WIDTH ap_uint<SWIDTH> \nconst int NUM_FEATURES_PER_READ = (IWIDTH/32);\nconst int QUERY_FEATURE_RESERVE = (128);\nstatic inline float absval(float input){\n    return (input > 0 ? input : static_cast<float>(-1*input));\n}\n// purposefully empty #define\n/*************************************************/\n/******************** LOADS: *********************/\n/*************************************************/\nvoid load_KNN( int debug_PE_ID,\n                 uint64_t  searchSpace,\n                 tapa::ostream<ap_uint<IWIDTH> >& load_to_compute_stream)\n;\n/*************************************************/\n/******************* COMPUTES: *******************/\n/*************************************************/\nvoid compute_KNN( int debug_pe_idx,\n                    int debug_start_idx,\n                    tapa::istream<ap_uint<IWIDTH> >& load_to_compute_stream,\n                    tapa::ostreams<float, (L2I_FACTOR_W * 2)>& compute_to_sort_stream)\n;\nvoid swap(float* a, float* b,\n               int* x, int* y)\n{\n#pragma HLS INLINE\n    float tmpdist_a;\n    float tmpdist_b;\n    int tmpid_x;\n    int tmpid_y;\n    tmpdist_a = *a;\n    tmpdist_b = *b;\n    *b = tmpdist_a;\n    *a = tmpdist_b;\n    tmpid_x = *x;\n    tmpid_y = *y;\n    *x = tmpid_y;\n    *y = tmpid_x;\n}\nvoid para_partial_sort(const int PE_idx,\n                       int seg_idx,\n                       tapa::istream<float>& compute_to_sort_stream,\n                       tapa::ostream<float>& sort_to_hiermerge_dist_stream_0,\n                       tapa::ostream<int>& sort_to_hiermerge_id_stream_0)\n;\nvoid merge_dual_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid merge_trio_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n{\n\n\n\n#pragma HLS disaggregate variable = hiermerge_dist_istream_1\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_1._\n#pragma HLS aggregate variable = hiermerge_dist_istream_1._ bit\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_1._peek\n#pragma HLS aggregate variable = hiermerge_dist_istream_1._peek bit\nvoid(hiermerge_dist_istream_1._.empty());\nvoid(hiermerge_dist_istream_1._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_id_istream_1\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_1._\n#pragma HLS aggregate variable = hiermerge_id_istream_1._ bit\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_1._peek\n#pragma HLS aggregate variable = hiermerge_id_istream_1._peek bit\nvoid(hiermerge_id_istream_1._.empty());\nvoid(hiermerge_id_istream_1._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_dist_istream_2\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_2._\n#pragma HLS aggregate variable = hiermerge_dist_istream_2._ bit\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_2._peek\n#pragma HLS aggregate variable = hiermerge_dist_istream_2._peek bit\nvoid(hiermerge_dist_istream_2._.empty());\nvoid(hiermerge_dist_istream_2._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_id_istream_2\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_2._\n#pragma HLS aggregate variable = hiermerge_id_istream_2._ bit\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_2._peek\n#pragma HLS aggregate variable = hiermerge_id_istream_2._peek bit\nvoid(hiermerge_id_istream_2._.empty());\nvoid(hiermerge_id_istream_2._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_dist_istream_3\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_3._\n#pragma HLS aggregate variable = hiermerge_dist_istream_3._ bit\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_3._peek\n#pragma HLS aggregate variable = hiermerge_dist_istream_3._peek bit\nvoid(hiermerge_dist_istream_3._.empty());\nvoid(hiermerge_dist_istream_3._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_id_istream_3\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_3._\n#pragma HLS aggregate variable = hiermerge_id_istream_3._ bit\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_3._peek\n#pragma HLS aggregate variable = hiermerge_id_istream_3._peek bit\nvoid(hiermerge_id_istream_3._.empty());\nvoid(hiermerge_id_istream_3._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_dist_ostream\n#pragma HLS interface ap_fifo port = hiermerge_dist_ostream._\n#pragma HLS aggregate variable = hiermerge_dist_ostream._ bit\nvoid(hiermerge_dist_ostream._.full());\n\n#pragma HLS disaggregate variable = hiermerge_id_ostream\n#pragma HLS interface ap_fifo port = hiermerge_id_ostream._\n#pragma HLS aggregate variable = hiermerge_id_ostream._ bit\nvoid(hiermerge_id_ostream._.full());\n\n    float dist_1 = hiermerge_dist_istream_1.read();\n    float dist_2 = hiermerge_dist_istream_2.read();\n    float dist_3 = hiermerge_dist_istream_3.read();\n    int id_1 = hiermerge_id_istream_1.read();\n    int id_2 = hiermerge_id_istream_2.read();\n    int id_3 = hiermerge_id_istream_3.read();\n    int stream1_read_count = 1;\n    int stream2_read_count = 1;\n    int stream3_read_count = 1;\n    for (int k = TOP-1; k > 0; --k)\n    {\n        if ( (dist_1 <= dist_2) && (dist_1 <= dist_3) )\n        {\n            hiermerge_dist_ostream.write(dist_1);\n            hiermerge_id_ostream.write(id_1);\n            if (stream1_read_count < TOP)\n            {\n                ++stream1_read_count;\n                dist_1 = hiermerge_dist_istream_1.read();\n                id_1 = hiermerge_id_istream_1.read();\n            }\n        }\n        else if ( (dist_2 <= dist_3) && (dist_2 <= dist_1) )\n        {\n            hiermerge_dist_ostream.write(dist_2);\n            hiermerge_id_ostream.write(id_2);\n            if (stream2_read_count < TOP)\n            {\n                ++stream2_read_count;\n                dist_2 = hiermerge_dist_istream_2.read();\n                id_2 = hiermerge_id_istream_2.read();\n            }\n        }\n        else\n        {\n            hiermerge_dist_ostream.write(dist_3);\n            hiermerge_id_ostream.write(id_3);\n            if (stream3_read_count < TOP)\n            {\n                ++stream3_read_count;\n                dist_3 = hiermerge_dist_istream_3.read();\n                id_3 = hiermerge_id_istream_3.read();\n            }\n        }\n    }\n    // Final write.\n    if ( (dist_1 <= dist_2) && (dist_1 <= dist_3) ){\n        hiermerge_dist_ostream.write(dist_1);\n        hiermerge_id_ostream.write(id_1);\n    }\n    else if ( (dist_2 <= dist_3) && (dist_2 <= dist_1) ){\n        hiermerge_dist_ostream.write(dist_2);\n        hiermerge_id_ostream.write(id_2);\n    }\n    else{\n        hiermerge_dist_ostream.write(dist_3);\n        hiermerge_id_ostream.write(id_3);\n    }\n    // Empty the input streams.\n    // NOTE: The total tripcount of these loops will be 2*TOP.\n    while (stream1_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream1_read_count;\n        dist_1 = hiermerge_dist_istream_1.read();\n        id_1 = hiermerge_id_istream_1.read();\n    }\n    while (stream2_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream2_read_count;\n        dist_2 = hiermerge_dist_istream_2.read();\n        id_2 = hiermerge_id_istream_2.read();\n    }\n    while (stream3_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP max=TOP\n        ++stream3_read_count;\n        dist_3 = hiermerge_dist_istream_3.read();\n        id_3 = hiermerge_id_istream_3.read();\n    }\n}\nvoid write_out_mmap(\n                    tapa::async_mmap<float>& output_knnDist,\n                    tapa::async_mmap<int>& output_knnId,\n                    float output_dist,\n                    int output_id,\n                    int& i_req_dist,\n                    int& i_resp_dist,\n                    int& i_req_id,\n                    int& i_resp_id\n) {\n#pragma HLS INLINE\n    // Writing the distance values:\n    if (i_req_dist < TOP && i_req_dist >= 0 &&\n        !output_knnDist.write_addr.full() &&\n        !output_knnDist.write_data.full()\n    ) {\n      output_knnDist.write_addr.try_write(i_req_dist);\n      output_knnDist.write_data.try_write(output_dist);\n      --i_req_dist;\n    }\n    if (!output_knnDist.write_resp.empty()) {\n      i_resp_dist += (unsigned int)(output_knnDist.write_resp.read(nullptr)) + 1;\n    }\n    // Writing the ID values:\n    if (i_req_id < TOP && i_req_id >= 0 &&\n        !output_knnId.write_addr.full() &&\n        !output_knnId.write_data.full()\n    ) {\n      output_knnId.write_addr.try_write(i_req_id);\n      output_knnId.write_data.try_write(output_id);\n      --i_req_id;\n    }\n    if (!output_knnId.write_resp.empty()) {\n      i_resp_id += (unsigned int)(output_knnId.write_resp.read(nullptr)) + 1;\n    }\n}\nvoid merge_dual_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::async_mmap<float>& hiermerge_dist_output,\n                        tapa::async_mmap<int>& hiermerge_id_output\n)\n{\n    float dist_1 = hiermerge_dist_istream_1.read();\n    float dist_2 = hiermerge_dist_istream_2.read();\n    int id_1 = hiermerge_id_istream_1.read();\n    int id_2 = hiermerge_id_istream_2.read();\n    int stream1_read_count = 1;\n    int stream2_read_count = 1;\n    int i_req_dist = TOP-1;\n    int i_resp_dist = TOP-1;\n    int i_req_id = TOP-1;\n    int i_resp_id = TOP-1;\n    for (int k = TOP-1; k > 0; --k)\n    {\n        if (dist_1 <= dist_2)\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_1,\n                            id_1,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream1_read_count < TOP)\n            {\n                ++stream1_read_count;\n                dist_1 = hiermerge_dist_istream_1.read();\n                id_1 = hiermerge_id_istream_1.read();\n            }\n        }\n        else\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_2,\n                            id_2,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream2_read_count < TOP)\n            {\n                ++stream2_read_count;\n                dist_2 = hiermerge_dist_istream_2.read();\n                id_2 = hiermerge_id_istream_2.read();\n            }\n        }\n    }\n    // Final write.\n    if (dist_1 <= dist_2) {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_1,\n                        id_1,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    else {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_2,\n                        id_2,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    // Empty the input streams.\n    while (stream1_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream1_read_count;\n        dist_1 = hiermerge_dist_istream_1.read();\n        id_1 = hiermerge_id_istream_1.read();\n    }\n    while (stream2_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream2_read_count;\n        dist_2 = hiermerge_dist_istream_2.read();\n        id_2 = hiermerge_id_istream_2.read();\n    }\n}\nvoid merge_trio_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        uint64_t  hiermerge_dist_output,\n                        uint64_t  hiermerge_id_output\n)\n;\nvoid Knn(\n    uint64_t  in_0,\n    uint64_t  in_1,\n    uint64_t  in_2,\n    uint64_t  in_3,\n    uint64_t  in_4,\n    uint64_t  in_5,\n    uint64_t  in_6,\n    uint64_t  in_7,\n    uint64_t  in_8,\n    uint64_t  in_9,\n    uint64_t  in_10,\n    uint64_t  in_11,\n    uint64_t  in_12,\n    uint64_t  in_13,\n    uint64_t  in_14,\n    uint64_t  in_15,\n    uint64_t  in_16,\n    uint64_t  in_17,\n    uint64_t  in_18,\n    uint64_t  in_19,\n    uint64_t  in_20,\n    uint64_t  in_21,\n    uint64_t  in_22,\n    uint64_t  in_23,\n    uint64_t  in_24,\n    uint64_t  in_25,\n    uint64_t  in_26,\n    uint64_t  final_out_dist,\n    uint64_t  final_out_id\n) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "merge_trio_streams_FINAL": {
            "code": "\n\n #include \"ap_int.h\"\n\n#include \"ap_axi_sdata.h\"\n\n#include <tapa.h>\n\n#include <inttypes.h>\n\n#include <stdlib.h>\n\n// CEIL_DIVISION(X, Y) = ceil(x/y).\n// ROUND_TO_NEXT_MULTIPLE(X, Y) rounds X up to the nearest multiple of Y.\nconst int IWIDTH = 512;\nconst int INPUT_DIM = 16;\nconst int TOP = 10;\n/***************************************************************/\n// L2I = Local to Interface\nconst int L2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * (32)) + 1 );\n// D2L = Data_Type to Local\nconst int D2L_FACTOR_W = ( ((32)-1)/32 + 1 );\n// D2I = Data_Type to Interface\nconst int D2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * 32) + 1 );\n// I2D = Interface to Data_type\nconst int I2D_FACTOR_W = ( ((INPUT_DIM * 32)-1)/IWIDTH + 1 );\n// // DEBUG NOTE: BW_FACTOR = 1.1349753694581282\n// Round up to the nearest multiple, because otherwise some logic breaks (incorrect sizes => bad logic in edgecases)\n// We partition the input points, so each PE gets it's own partition, to maximize parallelization.\nconst int PARTITION_LEN_IN_I = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / IWIDTH);\nconst int PARTITION_LEN_IN_D = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * 32));\nconst int PARTITION_LEN_IN_L = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * (32)));\n// We name each sub-array of the local_distance arrays a \"segment\".\n//const int SWIDTH = DATA_TYPE_TOTAL_SZ; \n//typedef ap_axiu<SWIDTH, 0, 0, 0> pkt; \n//typedef ap_axiu<32, 0, 0, 0>    id_pkt;\n//#define STREAM_WIDTH ap_uint<SWIDTH> \nconst int NUM_FEATURES_PER_READ = (IWIDTH/32);\nconst int QUERY_FEATURE_RESERVE = (128);\nstatic inline float absval(float input){\n    return (input > 0 ? input : static_cast<float>(-1*input));\n}\n// purposefully empty #define\n/*************************************************/\n/******************** LOADS: *********************/\n/*************************************************/\nvoid load_KNN( int debug_PE_ID,\n                 uint64_t  searchSpace,\n                 tapa::ostream<ap_uint<IWIDTH> >& load_to_compute_stream)\n;\n/*************************************************/\n/******************* COMPUTES: *******************/\n/*************************************************/\nvoid compute_KNN( int debug_pe_idx,\n                    int debug_start_idx,\n                    tapa::istream<ap_uint<IWIDTH> >& load_to_compute_stream,\n                    tapa::ostreams<float, (L2I_FACTOR_W * 2)>& compute_to_sort_stream)\n;\nvoid swap(float* a, float* b,\n               int* x, int* y)\n{\n#pragma HLS INLINE\n    float tmpdist_a;\n    float tmpdist_b;\n    int tmpid_x;\n    int tmpid_y;\n    tmpdist_a = *a;\n    tmpdist_b = *b;\n    *b = tmpdist_a;\n    *a = tmpdist_b;\n    tmpid_x = *x;\n    tmpid_y = *y;\n    *x = tmpid_y;\n    *y = tmpid_x;\n}\nvoid para_partial_sort(const int PE_idx,\n                       int seg_idx,\n                       tapa::istream<float>& compute_to_sort_stream,\n                       tapa::ostream<float>& sort_to_hiermerge_dist_stream_0,\n                       tapa::ostream<int>& sort_to_hiermerge_id_stream_0)\n;\nvoid merge_dual_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid merge_trio_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid write_out_mmap(\n                    tapa::async_mmap<float>& output_knnDist,\n                    tapa::async_mmap<int>& output_knnId,\n                    float output_dist,\n                    int output_id,\n                    int& i_req_dist,\n                    int& i_resp_dist,\n                    int& i_req_id,\n                    int& i_resp_id\n) {\n#pragma HLS INLINE\n    // Writing the distance values:\n    if (i_req_dist < TOP && i_req_dist >= 0 &&\n        !output_knnDist.write_addr.full() &&\n        !output_knnDist.write_data.full()\n    ) {\n      output_knnDist.write_addr.try_write(i_req_dist);\n      output_knnDist.write_data.try_write(output_dist);\n      --i_req_dist;\n    }\n    if (!output_knnDist.write_resp.empty()) {\n      i_resp_dist += (unsigned int)(output_knnDist.write_resp.read(nullptr)) + 1;\n    }\n    // Writing the ID values:\n    if (i_req_id < TOP && i_req_id >= 0 &&\n        !output_knnId.write_addr.full() &&\n        !output_knnId.write_data.full()\n    ) {\n      output_knnId.write_addr.try_write(i_req_id);\n      output_knnId.write_data.try_write(output_id);\n      --i_req_id;\n    }\n    if (!output_knnId.write_resp.empty()) {\n      i_resp_id += (unsigned int)(output_knnId.write_resp.read(nullptr)) + 1;\n    }\n}\nvoid merge_dual_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::async_mmap<float>& hiermerge_dist_output,\n                        tapa::async_mmap<int>& hiermerge_id_output\n)\n{\n    float dist_1 = hiermerge_dist_istream_1.read();\n    float dist_2 = hiermerge_dist_istream_2.read();\n    int id_1 = hiermerge_id_istream_1.read();\n    int id_2 = hiermerge_id_istream_2.read();\n    int stream1_read_count = 1;\n    int stream2_read_count = 1;\n    int i_req_dist = TOP-1;\n    int i_resp_dist = TOP-1;\n    int i_req_id = TOP-1;\n    int i_resp_id = TOP-1;\n    for (int k = TOP-1; k > 0; --k)\n    {\n        if (dist_1 <= dist_2)\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_1,\n                            id_1,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream1_read_count < TOP)\n            {\n                ++stream1_read_count;\n                dist_1 = hiermerge_dist_istream_1.read();\n                id_1 = hiermerge_id_istream_1.read();\n            }\n        }\n        else\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_2,\n                            id_2,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream2_read_count < TOP)\n            {\n                ++stream2_read_count;\n                dist_2 = hiermerge_dist_istream_2.read();\n                id_2 = hiermerge_id_istream_2.read();\n            }\n        }\n    }\n    // Final write.\n    if (dist_1 <= dist_2) {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_1,\n                        id_1,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    else {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_2,\n                        id_2,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    // Empty the input streams.\n    while (stream1_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream1_read_count;\n        dist_1 = hiermerge_dist_istream_1.read();\n        id_1 = hiermerge_id_istream_1.read();\n    }\n    while (stream2_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream2_read_count;\n        dist_2 = hiermerge_dist_istream_2.read();\n        id_2 = hiermerge_id_istream_2.read();\n    }\n}\nvoid merge_trio_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        tapa::async_mmap<float>& hiermerge_dist_output,\n                        tapa::async_mmap<int>& hiermerge_id_output\n)\n{\n\n\n\n#pragma HLS disaggregate variable = hiermerge_dist_istream_1\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_1._\n#pragma HLS aggregate variable = hiermerge_dist_istream_1._ bit\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_1._peek\n#pragma HLS aggregate variable = hiermerge_dist_istream_1._peek bit\nvoid(hiermerge_dist_istream_1._.empty());\nvoid(hiermerge_dist_istream_1._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_id_istream_1\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_1._\n#pragma HLS aggregate variable = hiermerge_id_istream_1._ bit\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_1._peek\n#pragma HLS aggregate variable = hiermerge_id_istream_1._peek bit\nvoid(hiermerge_id_istream_1._.empty());\nvoid(hiermerge_id_istream_1._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_dist_istream_2\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_2._\n#pragma HLS aggregate variable = hiermerge_dist_istream_2._ bit\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_2._peek\n#pragma HLS aggregate variable = hiermerge_dist_istream_2._peek bit\nvoid(hiermerge_dist_istream_2._.empty());\nvoid(hiermerge_dist_istream_2._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_id_istream_2\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_2._\n#pragma HLS aggregate variable = hiermerge_id_istream_2._ bit\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_2._peek\n#pragma HLS aggregate variable = hiermerge_id_istream_2._peek bit\nvoid(hiermerge_id_istream_2._.empty());\nvoid(hiermerge_id_istream_2._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_dist_istream_3\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_3._\n#pragma HLS aggregate variable = hiermerge_dist_istream_3._ bit\n#pragma HLS interface ap_fifo port = hiermerge_dist_istream_3._peek\n#pragma HLS aggregate variable = hiermerge_dist_istream_3._peek bit\nvoid(hiermerge_dist_istream_3._.empty());\nvoid(hiermerge_dist_istream_3._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_id_istream_3\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_3._\n#pragma HLS aggregate variable = hiermerge_id_istream_3._ bit\n#pragma HLS interface ap_fifo port = hiermerge_id_istream_3._peek\n#pragma HLS aggregate variable = hiermerge_id_istream_3._peek bit\nvoid(hiermerge_id_istream_3._.empty());\nvoid(hiermerge_id_istream_3._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_dist_output\n#pragma HLS interface ap_fifo port = hiermerge_dist_output.read_addr._\n#pragma HLS aggregate variable = hiermerge_dist_output.read_addr._  bit\n#pragma HLS interface ap_fifo port = hiermerge_dist_output.read_data._\n#pragma HLS aggregate variable = hiermerge_dist_output.read_data._  bit\n#pragma HLS interface ap_fifo port = hiermerge_dist_output.write_addr._\n#pragma HLS aggregate variable = hiermerge_dist_output.write_addr._  bit\n#pragma HLS interface ap_fifo port = hiermerge_dist_output.write_data._\n#pragma HLS aggregate variable = hiermerge_dist_output.write_data._  bit\n#pragma HLS interface ap_fifo port = hiermerge_dist_output.write_resp._\n#pragma HLS aggregate variable = hiermerge_dist_output.write_resp._  bit\n#pragma HLS disaggregate variable = hiermerge_dist_output .read_data\n#pragma HLS interface ap_fifo port = hiermerge_dist_output.read_data._peek\n#pragma HLS aggregate variable = hiermerge_dist_output.read_data._peek bit\n#pragma HLS disaggregate variable = hiermerge_dist_output .write_resp\n#pragma HLS interface ap_fifo port = hiermerge_dist_output.write_resp._peek\n#pragma HLS aggregate variable = hiermerge_dist_output.write_resp._peek bit\nvoid(hiermerge_dist_output.read_addr._.full());\nvoid(hiermerge_dist_output.read_data._.empty());\nvoid(hiermerge_dist_output.read_data._peek.empty());\nvoid(hiermerge_dist_output.write_addr._.full());\nvoid(hiermerge_dist_output.write_data._.full());\nvoid(hiermerge_dist_output.write_resp._.empty());\nvoid(hiermerge_dist_output.write_resp._peek.empty());\n\n#pragma HLS disaggregate variable = hiermerge_id_output\n#pragma HLS interface ap_fifo port = hiermerge_id_output.read_addr._\n#pragma HLS aggregate variable = hiermerge_id_output.read_addr._  bit\n#pragma HLS interface ap_fifo port = hiermerge_id_output.read_data._\n#pragma HLS aggregate variable = hiermerge_id_output.read_data._  bit\n#pragma HLS interface ap_fifo port = hiermerge_id_output.write_addr._\n#pragma HLS aggregate variable = hiermerge_id_output.write_addr._  bit\n#pragma HLS interface ap_fifo port = hiermerge_id_output.write_data._\n#pragma HLS aggregate variable = hiermerge_id_output.write_data._  bit\n#pragma HLS interface ap_fifo port = hiermerge_id_output.write_resp._\n#pragma HLS aggregate variable = hiermerge_id_output.write_resp._  bit\n#pragma HLS disaggregate variable = hiermerge_id_output .read_data\n#pragma HLS interface ap_fifo port = hiermerge_id_output.read_data._peek\n#pragma HLS aggregate variable = hiermerge_id_output.read_data._peek bit\n#pragma HLS disaggregate variable = hiermerge_id_output .write_resp\n#pragma HLS interface ap_fifo port = hiermerge_id_output.write_resp._peek\n#pragma HLS aggregate variable = hiermerge_id_output.write_resp._peek bit\nvoid(hiermerge_id_output.read_addr._.full());\nvoid(hiermerge_id_output.read_data._.empty());\nvoid(hiermerge_id_output.read_data._peek.empty());\nvoid(hiermerge_id_output.write_addr._.full());\nvoid(hiermerge_id_output.write_data._.full());\nvoid(hiermerge_id_output.write_resp._.empty());\nvoid(hiermerge_id_output.write_resp._peek.empty());\n\n    float dist_1 = hiermerge_dist_istream_1.read();\n    float dist_2 = hiermerge_dist_istream_2.read();\n    float dist_3 = hiermerge_dist_istream_3.read();\n    int id_1 = hiermerge_id_istream_1.read();\n    int id_2 = hiermerge_id_istream_2.read();\n    int id_3 = hiermerge_id_istream_3.read();\n    int stream1_read_count = 1;\n    int stream2_read_count = 1;\n    int stream3_read_count = 1;\n    int i_req_dist = TOP-1;\n    int i_resp_dist = TOP-1;\n    int i_req_id = TOP-1;\n    int i_resp_id = TOP-1;\n    for (int k = TOP-1; k > 0; --k)\n    {\n        if ( (dist_1 <= dist_2) && (dist_1 <= dist_3) )\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_1,\n                            id_1,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream1_read_count < TOP)\n            {\n                ++stream1_read_count;\n                dist_1 = hiermerge_dist_istream_1.read();\n                id_1 = hiermerge_id_istream_1.read();\n            }\n        }\n        else if ( (dist_2 <= dist_3) && (dist_2 <= dist_1) )\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_2,\n                            id_2,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream2_read_count < TOP)\n            {\n                ++stream2_read_count;\n                dist_2 = hiermerge_dist_istream_2.read();\n                id_2 = hiermerge_id_istream_2.read();\n            }\n        }\n        else\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_3,\n                            id_3,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream3_read_count < TOP)\n            {\n                ++stream3_read_count;\n                dist_3 = hiermerge_dist_istream_3.read();\n                id_3 = hiermerge_id_istream_3.read();\n            }\n        }\n    }\n    // Final write.\n    if ( (dist_1 <= dist_2) && (dist_1 <= dist_3) ){\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_1,\n                        id_1,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    else if ( (dist_2 <= dist_3) && (dist_2 <= dist_1) ){\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_2,\n                        id_2,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    else{\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_3,\n                        id_3,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    // Empty the input streams.\n    while (stream1_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream1_read_count;\n        dist_1 = hiermerge_dist_istream_1.read();\n        id_1 = hiermerge_id_istream_1.read();\n    }\n    while (stream2_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream2_read_count;\n        dist_2 = hiermerge_dist_istream_2.read();\n        id_2 = hiermerge_id_istream_2.read();\n    }\n    while (stream3_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP max=TOP\n        ++stream3_read_count;\n        dist_3 = hiermerge_dist_istream_3.read();\n        id_3 = hiermerge_id_istream_3.read();\n    }\n}\nvoid Knn(\n    uint64_t  in_0,\n    uint64_t  in_1,\n    uint64_t  in_2,\n    uint64_t  in_3,\n    uint64_t  in_4,\n    uint64_t  in_5,\n    uint64_t  in_6,\n    uint64_t  in_7,\n    uint64_t  in_8,\n    uint64_t  in_9,\n    uint64_t  in_10,\n    uint64_t  in_11,\n    uint64_t  in_12,\n    uint64_t  in_13,\n    uint64_t  in_14,\n    uint64_t  in_15,\n    uint64_t  in_16,\n    uint64_t  in_17,\n    uint64_t  in_18,\n    uint64_t  in_19,\n    uint64_t  in_20,\n    uint64_t  in_21,\n    uint64_t  in_22,\n    uint64_t  in_23,\n    uint64_t  in_24,\n    uint64_t  in_25,\n    uint64_t  in_26,\n    uint64_t  final_out_dist,\n    uint64_t  final_out_id\n) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        },
        "para_partial_sort": {
            "code": "\n\n #include \"ap_int.h\"\n\n#include \"ap_axi_sdata.h\"\n\n#include <tapa.h>\n\n#include <inttypes.h>\n\n#include <stdlib.h>\n\n// CEIL_DIVISION(X, Y) = ceil(x/y).\n// ROUND_TO_NEXT_MULTIPLE(X, Y) rounds X up to the nearest multiple of Y.\nconst int IWIDTH = 512;\nconst int INPUT_DIM = 16;\nconst int TOP = 10;\n/***************************************************************/\n// L2I = Local to Interface\nconst int L2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * (32)) + 1 );\n// D2L = Data_Type to Local\nconst int D2L_FACTOR_W = ( ((32)-1)/32 + 1 );\n// D2I = Data_Type to Interface\nconst int D2I_FACTOR_W = ( (IWIDTH-1)/(INPUT_DIM * 32) + 1 );\n// I2D = Interface to Data_type\nconst int I2D_FACTOR_W = ( ((INPUT_DIM * 32)-1)/IWIDTH + 1 );\n// // DEBUG NOTE: BW_FACTOR = 1.1349753694581282\n// Round up to the nearest multiple, because otherwise some logic breaks (incorrect sizes => bad logic in edgecases)\n// We partition the input points, so each PE gets it's own partition, to maximize parallelization.\nconst int PARTITION_LEN_IN_I = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / IWIDTH);\nconst int PARTITION_LEN_IN_D = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * 32));\nconst int PARTITION_LEN_IN_L = (((( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) * 32 * INPUT_DIM) / (INPUT_DIM * (32)));\n// We name each sub-array of the local_distance arrays a \"segment\".\n//const int SWIDTH = DATA_TYPE_TOTAL_SZ; \n//typedef ap_axiu<SWIDTH, 0, 0, 0> pkt; \n//typedef ap_axiu<32, 0, 0, 0>    id_pkt;\n//#define STREAM_WIDTH ap_uint<SWIDTH> \nconst int NUM_FEATURES_PER_READ = (IWIDTH/32);\nconst int QUERY_FEATURE_RESERVE = (128);\nstatic inline float absval(float input){\n    return (input > 0 ? input : static_cast<float>(-1*input));\n}\n// purposefully empty #define\n/*************************************************/\n/******************** LOADS: *********************/\n/*************************************************/\nvoid load_KNN( int debug_PE_ID,\n                 uint64_t  searchSpace,\n                 tapa::ostream<ap_uint<IWIDTH> >& load_to_compute_stream)\n;\n/*************************************************/\n/******************* COMPUTES: *******************/\n/*************************************************/\nvoid compute_KNN( int debug_pe_idx,\n                    int debug_start_idx,\n                    tapa::istream<ap_uint<IWIDTH> >& load_to_compute_stream,\n                    tapa::ostreams<float, (L2I_FACTOR_W * 2)>& compute_to_sort_stream)\n;\nvoid swap(float* a, float* b,\n               int* x, int* y)\n{\n#pragma HLS INLINE\n    float tmpdist_a;\n    float tmpdist_b;\n    int tmpid_x;\n    int tmpid_y;\n    tmpdist_a = *a;\n    tmpdist_b = *b;\n    *b = tmpdist_a;\n    *a = tmpdist_b;\n    tmpid_x = *x;\n    tmpid_y = *y;\n    *x = tmpid_y;\n    *y = tmpid_x;\n}\nvoid para_partial_sort(const int PE_idx,\n                       int seg_idx,\n                       tapa::istream<float>& compute_to_sort_stream,\n                       tapa::ostream<float>& sort_to_hiermerge_dist_stream_0,\n                       tapa::ostream<int>& sort_to_hiermerge_id_stream_0)\n{\n\n\n#pragma HLS disaggregate variable = compute_to_sort_stream\n#pragma HLS interface ap_fifo port = compute_to_sort_stream._\n#pragma HLS aggregate variable = compute_to_sort_stream._ bit\n#pragma HLS interface ap_fifo port = compute_to_sort_stream._peek\n#pragma HLS aggregate variable = compute_to_sort_stream._peek bit\nvoid(compute_to_sort_stream._.empty());\nvoid(compute_to_sort_stream._peek.empty());\n\n#pragma HLS disaggregate variable = sort_to_hiermerge_dist_stream_0\n#pragma HLS interface ap_fifo port = sort_to_hiermerge_dist_stream_0._\n#pragma HLS aggregate variable = sort_to_hiermerge_dist_stream_0._ bit\nvoid(sort_to_hiermerge_dist_stream_0._.full());\n\n#pragma HLS disaggregate variable = sort_to_hiermerge_id_stream_0\n#pragma HLS interface ap_fifo port = sort_to_hiermerge_id_stream_0._\n#pragma HLS aggregate variable = sort_to_hiermerge_id_stream_0._ bit\nvoid(sort_to_hiermerge_id_stream_0._.full());\n\n#pragma HLS INLINE OFF\n    static // TAPA Known-issue: Static keyword fails CSIM because this is not thread-safe. \n                //  but when running the HW build, it will instantiate several copies of this function. So this is OK.\n    float local_kNearstDist[D2L_FACTOR_W][(TOP+1)];\n#pragma HLS ARRAY_PARTITION variable=local_kNearstDist complete dim=0\n    static\n    int local_kNearstId[D2L_FACTOR_W][(TOP+1)];\n#pragma HLS ARRAY_PARTITION variable=local_kNearstId complete dim=0\n    /* Our segments used to be large chunks of each partition.\n     * Now, however, our segments are cylically split, so our ID \n     * logic has to change.\n     */\n    int start_id = PE_idx * (( (( ((4194304)-1)/(27) + 1 )-1)/((L2I_FACTOR_W * 2)*D2I_FACTOR_W) + 1 ) * ((L2I_FACTOR_W * 2)*D2I_FACTOR_W)) + seg_idx*D2L_FACTOR_W;\n    /*******************************************/\n    // Initialize all top-K distances to MAX, and their IDs to an invalid value.\n    INIT_LOOP:\n    for (int i = 0; i < D2L_FACTOR_W; ++i)\n    {\n        for (int j = 0; j < TOP+1; ++j)\n        {\n            local_kNearstId[i][j] = -1;\n            local_kNearstDist[i][j] = (3.402823e+38f);\n        }\n    }\n    SORT_LOOP:\n    for (int lvalue_idx = 0; lvalue_idx < ((PARTITION_LEN_IN_L / (L2I_FACTOR_W * 2)) + TOP); ++lvalue_idx) {\n#pragma HLS PIPELINE II=2\n        float cur_Lval = 0;\n        int stream_idx = seg_idx;\n        if (lvalue_idx >= (PARTITION_LEN_IN_L / (L2I_FACTOR_W * 2))) {\n            cur_Lval = (3.402823e+38f);\n        } else {\n            //#ifndef __SYNTHESIS__\n            //if (PE_idx == 0)\n            //{\n            //    printf(\"PPS Unit %d: Reading from compute_to_sort_stream %d, for the %d-th time\\n\", \n            //            seg_idx,\n            //            stream_idx,\n            //            DEBUG_stream_counters++);\n            //}\n            //#endif\n            cur_Lval = compute_to_sort_stream.read();\n        }\n        for (int D_idx = 0; D_idx < D2L_FACTOR_W; ++D_idx)\n        {\n#pragma HLS UNROLL\n            unsigned char range_idx = (D_idx)*32;\n            float cur_Dval;\n            cur_Dval = cur_Lval;\n            local_kNearstDist[D_idx][0] = cur_Dval;\n            local_kNearstId[D_idx][0] = start_id + lvalue_idx*D2L_FACTOR_W*(L2I_FACTOR_W * 2) + D_idx;\n            //#ifndef __SYNTHESIS__\n            //printf(\"SORT: Current ID = %d, cur_Dval = %f\\n\", start_id + lvalue_idx, cur_Dval);\n            //printf(\"SORT: Best ID = %d, Best Dval = %f\\n\", local_kNearstId[D_idx][TOP], local_kNearstDist[D_idx][TOP]);\n            //#endif\n            //compare and swap odd\n            for(int ii=1; ii<TOP; ii+=2){\n#pragma HLS UNROLL\n#pragma HLS DEPENDENCE variable=\"local_kNearstDist\" inter false\n#pragma HLS DEPENDENCE variable=\"local_kNearstId\" inter false\n                if (local_kNearstDist[D_idx][ii] < local_kNearstDist[D_idx][ii+1]){\n                    swap(&local_kNearstDist[D_idx][ii], &local_kNearstDist[D_idx][ii+1],\n                              &local_kNearstId[D_idx][ii], &local_kNearstId[D_idx][ii+1]);\n                }\n            }\n            //compare and swap even\n            for(int ii=1; ii<TOP+1; ii+=2){\n#pragma HLS UNROLL\n#pragma HLS DEPENDENCE variable=\"local_kNearstDist\" inter false\n#pragma HLS DEPENDENCE variable=\"local_kNearstId\" inter false\n                if (local_kNearstDist[D_idx][ii] > local_kNearstDist[D_idx][ii-1]){\n                    swap(&local_kNearstDist[D_idx][ii], &local_kNearstDist[D_idx][ii-1],\n                              &local_kNearstId[D_idx][ii], &local_kNearstId[D_idx][ii-1]);\n                }\n            }\n        }\n    }\n    // Write data out\n    OUTPUT_LOOP:\n    for (int j = TOP; j > 0; --j)\n    {\n#pragma HLS PIPELINE II=1\n        sort_to_hiermerge_dist_stream_0.write(local_kNearstDist[0][j]);\n        sort_to_hiermerge_id_stream_0.write(local_kNearstId[0][j]);\n    }\n    REINITIALIZATION_LOOP:\n    for (int i = 0; i < D2L_FACTOR_W; ++i){\n        for (int j = 0; j < TOP+1; ++j){\n#pragma HLS UNROLL\n            // Reset the kNearst values so we can run the next iteration.\n            local_kNearstId[i][j] = -1;\n            local_kNearstDist[i][j] = (3.402823e+38f);\n        }\n    }\n}\nvoid merge_dual_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid merge_trio_streams(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        tapa::ostream<float>& hiermerge_dist_ostream,\n                        tapa::ostream<int>& hiermerge_id_ostream\n)\n;\nvoid write_out_mmap(\n                    tapa::async_mmap<float>& output_knnDist,\n                    tapa::async_mmap<int>& output_knnId,\n                    float output_dist,\n                    int output_id,\n                    int& i_req_dist,\n                    int& i_resp_dist,\n                    int& i_req_id,\n                    int& i_resp_id\n) {\n#pragma HLS INLINE\n    // Writing the distance values:\n    if (i_req_dist < TOP && i_req_dist >= 0 &&\n        !output_knnDist.write_addr.full() &&\n        !output_knnDist.write_data.full()\n    ) {\n      output_knnDist.write_addr.try_write(i_req_dist);\n      output_knnDist.write_data.try_write(output_dist);\n      --i_req_dist;\n    }\n    if (!output_knnDist.write_resp.empty()) {\n      i_resp_dist += (unsigned int)(output_knnDist.write_resp.read(nullptr)) + 1;\n    }\n    // Writing the ID values:\n    if (i_req_id < TOP && i_req_id >= 0 &&\n        !output_knnId.write_addr.full() &&\n        !output_knnId.write_data.full()\n    ) {\n      output_knnId.write_addr.try_write(i_req_id);\n      output_knnId.write_data.try_write(output_id);\n      --i_req_id;\n    }\n    if (!output_knnId.write_resp.empty()) {\n      i_resp_id += (unsigned int)(output_knnId.write_resp.read(nullptr)) + 1;\n    }\n}\nvoid merge_dual_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::async_mmap<float>& hiermerge_dist_output,\n                        tapa::async_mmap<int>& hiermerge_id_output\n)\n{\n    float dist_1 = hiermerge_dist_istream_1.read();\n    float dist_2 = hiermerge_dist_istream_2.read();\n    int id_1 = hiermerge_id_istream_1.read();\n    int id_2 = hiermerge_id_istream_2.read();\n    int stream1_read_count = 1;\n    int stream2_read_count = 1;\n    int i_req_dist = TOP-1;\n    int i_resp_dist = TOP-1;\n    int i_req_id = TOP-1;\n    int i_resp_id = TOP-1;\n    for (int k = TOP-1; k > 0; --k)\n    {\n        if (dist_1 <= dist_2)\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_1,\n                            id_1,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream1_read_count < TOP)\n            {\n                ++stream1_read_count;\n                dist_1 = hiermerge_dist_istream_1.read();\n                id_1 = hiermerge_id_istream_1.read();\n            }\n        }\n        else\n        {\n            write_out_mmap( hiermerge_dist_output,\n                            hiermerge_id_output,\n                            dist_2,\n                            id_2,\n                            i_req_dist,\n                            i_resp_dist,\n                            i_req_id,\n                            i_resp_id);\n            if (stream2_read_count < TOP)\n            {\n                ++stream2_read_count;\n                dist_2 = hiermerge_dist_istream_2.read();\n                id_2 = hiermerge_id_istream_2.read();\n            }\n        }\n    }\n    // Final write.\n    if (dist_1 <= dist_2) {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_1,\n                        id_1,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    else {\n        write_out_mmap( hiermerge_dist_output,\n                        hiermerge_id_output,\n                        dist_2,\n                        id_2,\n                        i_req_dist,\n                        i_resp_dist,\n                        i_req_id,\n                        i_resp_id);\n    }\n    // Empty the input streams.\n    while (stream1_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream1_read_count;\n        dist_1 = hiermerge_dist_istream_1.read();\n        id_1 = hiermerge_id_istream_1.read();\n    }\n    while (stream2_read_count < TOP)\n    {\n#pragma HLS loop_tripcount min=TOP/2 max=TOP/2\n        ++stream2_read_count;\n        dist_2 = hiermerge_dist_istream_2.read();\n        id_2 = hiermerge_id_istream_2.read();\n    }\n}\nvoid merge_trio_streams_FINAL(\n                        int debug_PE_idx,\n                        int debug_seg_d2l_idx,\n                        int debug_stage_idx,\n                        tapa::istream<float>& hiermerge_dist_istream_1,\n                        tapa::istream<int>& hiermerge_id_istream_1,\n                        tapa::istream<float>& hiermerge_dist_istream_2,\n                        tapa::istream<int>& hiermerge_id_istream_2,\n                        tapa::istream<float>& hiermerge_dist_istream_3,\n                        tapa::istream<int>& hiermerge_id_istream_3,\n                        uint64_t  hiermerge_dist_output,\n                        uint64_t  hiermerge_id_output\n)\n;\nvoid Knn(\n    uint64_t  in_0,\n    uint64_t  in_1,\n    uint64_t  in_2,\n    uint64_t  in_3,\n    uint64_t  in_4,\n    uint64_t  in_5,\n    uint64_t  in_6,\n    uint64_t  in_7,\n    uint64_t  in_8,\n    uint64_t  in_9,\n    uint64_t  in_10,\n    uint64_t  in_11,\n    uint64_t  in_12,\n    uint64_t  in_13,\n    uint64_t  in_14,\n    uint64_t  in_15,\n    uint64_t  in_16,\n    uint64_t  in_17,\n    uint64_t  in_18,\n    uint64_t  in_19,\n    uint64_t  in_20,\n    uint64_t  in_21,\n    uint64_t  in_22,\n    uint64_t  in_23,\n    uint64_t  in_24,\n    uint64_t  in_25,\n    uint64_t  in_26,\n    uint64_t  final_out_dist,\n    uint64_t  final_out_id\n) ;\n",
            "level": "lower",
            "target": "hls",
            "vendor": "xilinx"
        }
    },
    "top": "Knn"
}
