// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="FloatvMultConst_FloatvMultConst,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.461450,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3704,HLS_SYN_LUT=1602,HLS_VERSION=2022_2}" *)

module FloatvMultConst (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        alpha_u,
        M,
        P_N,
        fifo_in_s_dout,
        fifo_in_s_empty_n,
        fifo_in_s_read,
        fifo_in_peek_dout,
        fifo_in_peek_empty_n,
        fifo_in_peek_read,
        fifo_out_din,
        fifo_out_full_n,
        fifo_out_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] alpha_u;
input  [31:0] M;
input  [31:0] P_N;
input  [512:0] fifo_in_s_dout;
input   fifo_in_s_empty_n;
output   fifo_in_s_read;
input  [512:0] fifo_in_peek_dout;
input   fifo_in_peek_empty_n;
output   fifo_in_peek_read;
output  [512:0] fifo_out_din;
input   fifo_out_full_n;
output   fifo_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fifo_in_s_read;
reg fifo_out_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] lshr_ln_reg_216;
wire  signed [31:0] grp_fu_200_p2;
reg  signed [31:0] mul_ln88_reg_221;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_191_p2;
reg   [31:0] num_ite_reg_236;
wire   [31:0] empty_86_fu_196_p1;
reg   [31:0] empty_86_reg_241;
wire    ap_CS_fsm_state7;
wire    grp_FloatvMultConst_Pipeline_cc_fu_106_ap_start;
wire    grp_FloatvMultConst_Pipeline_cc_fu_106_ap_done;
wire    grp_FloatvMultConst_Pipeline_cc_fu_106_ap_idle;
wire    grp_FloatvMultConst_Pipeline_cc_fu_106_ap_ready;
wire   [512:0] grp_FloatvMultConst_Pipeline_cc_fu_106_fifo_out_din;
wire    grp_FloatvMultConst_Pipeline_cc_fu_106_fifo_out_write;
wire    grp_FloatvMultConst_Pipeline_cc_fu_106_fifo_in_s_read;
reg    grp_FloatvMultConst_Pipeline_cc_fu_106_ap_start_reg;
wire    ap_CS_fsm_state8;
wire   [15:0] N16_fu_120_p4;
wire   [0:0] icmp_ln86_fu_130_p2;
wire  signed [15:0] rp_time_fu_136_p3;
wire   [15:0] N_fu_116_p1;
wire   [31:0] add_ln88_fu_152_p2;
wire  signed [27:0] trunc_ln_fu_158_p4;
wire   [16:0] zext_ln87_fu_148_p1;
wire   [16:0] add_ln88_1_fu_172_p2;
wire   [13:0] grp_fu_191_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire   [31:0] grp_fu_191_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_FloatvMultConst_Pipeline_cc_fu_106_ap_start_reg = 1'b0;
end

FloatvMultConst_FloatvMultConst_Pipeline_cc grp_FloatvMultConst_Pipeline_cc_fu_106(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_FloatvMultConst_Pipeline_cc_fu_106_ap_start),
    .ap_done(grp_FloatvMultConst_Pipeline_cc_fu_106_ap_done),
    .ap_idle(grp_FloatvMultConst_Pipeline_cc_fu_106_ap_idle),
    .ap_ready(grp_FloatvMultConst_Pipeline_cc_fu_106_ap_ready),
    .fifo_out_din(grp_FloatvMultConst_Pipeline_cc_fu_106_fifo_out_din),
    .fifo_out_full_n(fifo_out_full_n),
    .fifo_out_write(grp_FloatvMultConst_Pipeline_cc_fu_106_fifo_out_write),
    .num_ite(num_ite_reg_236),
    .fifo_in_s_dout(fifo_in_s_dout),
    .fifo_in_s_empty_n(fifo_in_s_empty_n),
    .fifo_in_s_read(grp_FloatvMultConst_Pipeline_cc_fu_106_fifo_in_s_read),
    .empty(empty_86_reg_241)
);

FloatvMultConst_mul_32s_14ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 32 ))
mul_32s_14ns_32_2_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_ln88_reg_221),
    .din1(grp_fu_191_p1),
    .ce(1'b1),
    .dout(grp_fu_191_p2)
);

FloatvMultConst_mul_mul_16s_28s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_28s_32_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(rp_time_fu_136_p3),
    .din1(trunc_ln_fu_158_p4),
    .ce(1'b1),
    .dout(grp_fu_200_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_FloatvMultConst_Pipeline_cc_fu_106_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_FloatvMultConst_Pipeline_cc_fu_106_ap_start_reg <= 1'b1;
        end else if ((grp_FloatvMultConst_Pipeline_cc_fu_106_ap_ready == 1'b1)) begin
            grp_FloatvMultConst_Pipeline_cc_fu_106_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        empty_86_reg_241 <= empty_86_fu_196_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        lshr_ln_reg_216 <= {{add_ln88_1_fu_172_p2[16:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln88_reg_221 <= grp_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        num_ite_reg_236 <= grp_fu_191_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((grp_FloatvMultConst_Pipeline_cc_fu_106_ap_done == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_FloatvMultConst_Pipeline_cc_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_FloatvMultConst_Pipeline_cc_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        fifo_in_s_read = grp_FloatvMultConst_Pipeline_cc_fu_106_fifo_in_s_read;
    end else begin
        fifo_in_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        fifo_out_write = grp_FloatvMultConst_Pipeline_cc_fu_106_fifo_out_write;
    end else begin
        fifo_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_FloatvMultConst_Pipeline_cc_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign N16_fu_120_p4 = {{P_N[31:16]}};

assign N_fu_116_p1 = P_N[15:0];

assign add_ln88_1_fu_172_p2 = (zext_ln87_fu_148_p1 + 17'd7);

assign add_ln88_fu_152_p2 = (M + 32'd15);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_86_fu_196_p1 = alpha_u;

assign fifo_in_peek_read = 1'b0;

assign fifo_out_din = grp_FloatvMultConst_Pipeline_cc_fu_106_fifo_out_din;

assign grp_FloatvMultConst_Pipeline_cc_fu_106_ap_start = grp_FloatvMultConst_Pipeline_cc_fu_106_ap_start_reg;

assign grp_fu_191_p1 = grp_fu_191_p10;

assign grp_fu_191_p10 = lshr_ln_reg_216;

assign icmp_ln86_fu_130_p2 = ((N16_fu_120_p4 == 16'd0) ? 1'b1 : 1'b0);

assign rp_time_fu_136_p3 = ((icmp_ln86_fu_130_p2[0:0] == 1'b1) ? 16'd1 : N16_fu_120_p4);

assign trunc_ln_fu_158_p4 = {{add_ln88_fu_152_p2[31:4]}};

assign zext_ln87_fu_148_p1 = N_fu_116_p1;

endmodule //FloatvMultConst
